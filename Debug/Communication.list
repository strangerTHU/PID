
Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000990c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08009af8  08009af8  00019af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f58  08009f58  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009f58  08009f58  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f58  08009f58  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f58  08009f58  00019f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001d8  0800a138  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800a138  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7ac  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b3  00000000  00000000  0002d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0002fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a56  00000000  00000000  00030b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aeda  00000000  00000000  00031556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108dc  00000000  00000000  0004c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a537  00000000  00000000  0005cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d04  00000000  00000000  000f7244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000fbf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08009adc 	.word	0x08009adc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	08009adc 	.word	0x08009adc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_d2lz>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	4605      	mov	r5, r0
 80010f4:	460c      	mov	r4, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	2300      	movs	r3, #0
 80010fa:	4628      	mov	r0, r5
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff fd7d 	bl	8000bfc <__aeabi_dcmplt>
 8001102:	b928      	cbnz	r0, 8001110 <__aeabi_d2lz+0x20>
 8001104:	4628      	mov	r0, r5
 8001106:	4621      	mov	r1, r4
 8001108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800110c:	f000 b80a 	b.w	8001124 <__aeabi_d2ulz>
 8001110:	4628      	mov	r0, r5
 8001112:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001116:	f000 f805 	bl	8001124 <__aeabi_d2ulz>
 800111a:	4240      	negs	r0, r0
 800111c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001120:	bd38      	pop	{r3, r4, r5, pc}
 8001122:	bf00      	nop

08001124 <__aeabi_d2ulz>:
 8001124:	b5d0      	push	{r4, r6, r7, lr}
 8001126:	2200      	movs	r2, #0
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <__aeabi_d2ulz+0x34>)
 800112a:	4606      	mov	r6, r0
 800112c:	460f      	mov	r7, r1
 800112e:	f7ff faf3 	bl	8000718 <__aeabi_dmul>
 8001132:	f7ff fdc9 	bl	8000cc8 <__aeabi_d2uiz>
 8001136:	4604      	mov	r4, r0
 8001138:	f7ff fa74 	bl	8000624 <__aeabi_ui2d>
 800113c:	2200      	movs	r2, #0
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <__aeabi_d2ulz+0x38>)
 8001140:	f7ff faea 	bl	8000718 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4630      	mov	r0, r6
 800114a:	4639      	mov	r1, r7
 800114c:	f7ff f92c 	bl	80003a8 <__aeabi_dsub>
 8001150:	f7ff fdba 	bl	8000cc8 <__aeabi_d2uiz>
 8001154:	4621      	mov	r1, r4
 8001156:	bdd0      	pop	{r4, r6, r7, pc}
 8001158:	3df00000 	.word	0x3df00000
 800115c:	41f00000 	.word	0x41f00000

08001160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_DMA_Init+0x38>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <MX_DMA_Init+0x38>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_DMA_Init+0x38>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2010      	movs	r0, #16
 8001184:	f000 ff87 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001188:	2010      	movs	r0, #16
 800118a:	f000 ffa0 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011ce:	f043 0320 	orr.w	r3, r3, #32
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0320 	and.w	r3, r3, #32
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a16      	ldr	r2, [pc, #88]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a10      	ldr	r2, [pc, #64]	; (8001240 <MX_GPIO_Init+0xa4>)
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_GPIO_Init+0xa4>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2104      	movs	r1, #4
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <MX_GPIO_Init+0xa8>)
 8001216:	f001 fcff 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800121a:	2304      	movs	r3, #4
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0xa8>)
 8001232:	f001 fb5d 	bl	80028f0 <HAL_GPIO_Init>

}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40011400 	.word	0x40011400

08001248 <pid>:
  float Kd;
}pidstr;
pidstr pidparm;//用于保存PID参数和用于计算PWM占空比的量
float rset=5;//设置目标转速
float pid(pidstr *a,float dr)//用于更新PWM的占空比
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  a->sum = a->sum + dr;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fdab 	bl	8000db4 <__addsf3>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
  float pwm = a->Kp * dr + a->Ki * a->sum + a->Kd * (dr - a->lr);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffe3 	bl	8000238 <__aeabi_fmul>
 8001272:	4603      	mov	r3, r0
 8001274:	461c      	mov	r4, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f7fe ffd9 	bl	8000238 <__aeabi_fmul>
 8001286:	4603      	mov	r3, r0
 8001288:	4619      	mov	r1, r3
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff fd92 	bl	8000db4 <__addsf3>
 8001290:	4603      	mov	r3, r0
 8001292:	461d      	mov	r5, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691c      	ldr	r4, [r3, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4619      	mov	r1, r3
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f7ff fd86 	bl	8000db0 <__aeabi_fsub>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7fe ffc5 	bl	8000238 <__aeabi_fmul>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4628      	mov	r0, r5
 80012b4:	f7ff fd7e 	bl	8000db4 <__addsf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]
  a->lr = dr;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	605a      	str	r2, [r3, #4]
  if(pwm >= PID_MAX)
 80012c2:	490b      	ldr	r1, [pc, #44]	; (80012f0 <pid+0xa8>)
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff fedf 	bl	8001088 <__aeabi_fcmpge>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <pid+0x8c>
  {
    return PID_MAX;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <pid+0xa8>)
 80012d2:	e009      	b.n	80012e8 <pid+0xa0>
  }
  else if(pwm <= PID_MIN)
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <pid+0xac>)
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fecc 	bl	8001074 <__aeabi_fcmple>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <pid+0x9e>
  {
    return PID_MIN;
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <pid+0xac>)
 80012e4:	e000      	b.n	80012e8 <pid+0xa0>
  }
  else{
    return pwm;
 80012e6:	68fb      	ldr	r3, [r7, #12]
  }
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdb0      	pop	{r4, r5, r7, pc}
 80012f0:	447a0000 	.word	0x447a0000
 80012f4:	c47a0000 	.word	0xc47a0000

080012f8 <HAL_TIM_PeriodElapsedCallback>:

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
 if(htim->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d13e      	bne.n	8001388 <HAL_TIM_PeriodElapsedCallback+0x90>
 {
  int cnt=__HAL_TIM_GetCounter(&htim3);
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	617b      	str	r3, [r7, #20]
  __HAL_TIM_SetCounter(&htim3, 0);
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  float rnow=cnt/10.8;
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff f992 	bl	8000644 <__aeabi_i2d>
 8001320:	a31b      	add	r3, pc, #108	; (adr r3, 8001390 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff fb21 	bl	800096c <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fce9 	bl	8000d08 <__aeabi_d2f>
 8001336:	4603      	mov	r3, r0
 8001338:	613b      	str	r3, [r7, #16]
  float dr=rset-rnow;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6939      	ldr	r1, [r7, #16]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fd35 	bl	8000db0 <__aeabi_fsub>
 8001346:	4603      	mov	r3, r0
 8001348:	60fb      	str	r3, [r7, #12]
  float pwm=pid(&pidparm,dr);
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800134e:	f7ff ff7b 	bl	8001248 <pid>
 8001352:	60b8      	str	r0, [r7, #8]
  u1_printf("%f,%f\n",rnow,rset);
 8001354:	6938      	ldr	r0, [r7, #16]
 8001356:	f7ff f987 	bl	8000668 <__aeabi_f2d>
 800135a:	4604      	mov	r4, r0
 800135c:	460d      	mov	r5, r1
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f980 	bl	8000668 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	e9cd 2300 	strd	r2, r3, [sp]
 8001370:	4622      	mov	r2, r4
 8001372:	462b      	mov	r3, r5
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001376:	f000 f819 	bl	80013ac <u1_printf>
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1, pwm);
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800137c:	681c      	ldr	r4, [r3, #0]
 800137e:	68b8      	ldr	r0, [r7, #8]
 8001380:	f7ff fe96 	bl	80010b0 <__aeabi_f2uiz>
 8001384:	4603      	mov	r3, r0
 8001386:	6363      	str	r3, [r4, #52]	; 0x34
 }
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	9999999a 	.word	0x9999999a
 8001394:	40259999 	.word	0x40259999
 8001398:	2000029c 	.word	0x2000029c
 800139c:	20000000 	.word	0x20000000
 80013a0:	200001f4 	.word	0x200001f4
 80013a4:	08009af8 	.word	0x08009af8
 80013a8:	2000020c 	.word	0x2000020c

080013ac <u1_printf>:

void u1_printf(char* fmt, ...) {
 80013ac:	b40f      	push	{r0, r1, r2, r3}
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b0b4      	sub	sp, #208	; 0xd0
 80013b2:	af00      	add	r7, sp, #0
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 80013b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  uint8_t buf[200];
  vsprintf((char*)buf, fmt, ap);
 80013bc:	463b      	mov	r3, r7
 80013be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80013c2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 ff5e 	bl	8006288 <vsiprintf>
  va_end(ap);
  len = strlen((char*)buf);
 80013cc:	463b      	mov	r3, r7
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe ff2a 	bl	8000228 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY);//若使用了其他UART通道，将对应通道（参数1）修改即可。该函数在（6.补充）中会进行说明。
 80013da:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80013de:	4639      	mov	r1, r7
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <u1_printf+0x4c>)
 80013e6:	f003 f9e6 	bl	80047b6 <HAL_UART_Transmit>
}
 80013ea:	bf00      	nop
 80013ec:	37d0      	adds	r7, #208	; 0xd0
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013f4:	b004      	add	sp, #16
 80013f6:	4770      	bx	lr
 80013f8:	200002e4 	.word	0x200002e4

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	pidparm.Kd=500;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <main+0x64>)
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <main+0x68>)
 8001404:	611a      	str	r2, [r3, #16]
	pidparm.Ki=15;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <main+0x64>)
 8001408:	4a17      	ldr	r2, [pc, #92]	; (8001468 <main+0x6c>)
 800140a:	60da      	str	r2, [r3, #12]
	pidparm.Kp=500;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <main+0x64>)
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <main+0x68>)
 8001410:	609a      	str	r2, [r3, #8]
	pidparm.lr=0;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <main+0x64>)
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
	pidparm.sum=0;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <main+0x64>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001422:	f000 fcff 	bl	8001e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001426:	f000 f827 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142a:	f7ff feb7 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 800142e:	f7ff fe97 	bl	8001160 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001432:	f000 fbb7 	bl	8001ba4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001436:	f000 fbdf 	bl	8001bf8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800143a:	f000 fa69 	bl	8001910 <MX_TIM2_Init>
  MX_TIM3_Init();
 800143e:	f000 fab3 	bl	80019a8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001442:	f000 f9a1 	bl	8001788 <MX_TIM1_Init>
  HAL_TIM_Base_Start_IT(&htim2); // 使能定时器2
 8001446:	4809      	ldr	r0, [pc, #36]	; (800146c <main+0x70>)
 8001448:	f002 f85e 	bl	8003508 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // 使能定时器1的通道1，设定为PWM输出
 800144c:	2100      	movs	r1, #0
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <main+0x74>)
 8001450:	f002 f912 	bl	8003678 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //使能编码器时钟3
 8001454:	213c      	movs	r1, #60	; 0x3c
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <main+0x78>)
 8001458:	f002 fa6a 	bl	8003930 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800145c:	e7fe      	b.n	800145c <main+0x60>
 800145e:	bf00      	nop
 8001460:	200001f4 	.word	0x200001f4
 8001464:	43fa0000 	.word	0x43fa0000
 8001468:	41700000 	.word	0x41700000
 800146c:	20000254 	.word	0x20000254
 8001470:	2000020c 	.word	0x2000020c
 8001474:	2000029c 	.word	0x2000029c

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b090      	sub	sp, #64	; 0x40
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	2228      	movs	r2, #40	; 0x28
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f004 ff08 	bl	800629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ac:	2302      	movs	r3, #2
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fbc1 	bl	8002c48 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014cc:	f000 f819 	bl	8001502 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2302      	movs	r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2102      	movs	r1, #2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 fe2e 	bl	800314c <HAL_RCC_ClockConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014f6:	f000 f804 	bl	8001502 <Error_Handler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	3740      	adds	r7, #64	; 0x40
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001506:	b672      	cpsid	i
}
 8001508:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150a:	e7fe      	b.n	800150a <Error_Handler+0x8>

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_MspInit+0x5c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_MspInit+0x5c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6193      	str	r3, [r2, #24]
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x5c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x5c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_MspInit+0x60>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_MspInit+0x60>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000
 800156c:	40010000 	.word	0x40010000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 fc7b 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA1_Channel6_IRQHandler+0x10>)
 80015c6:	f000 ff57 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000374 	.word	0x20000374

080015d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM2_IRQHandler+0x10>)
 80015da:	f002 fa37 	bl	8003a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000254 	.word	0x20000254

080015e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <USART2_IRQHandler+0x10>)
 80015ee:	f003 f965 	bl	80048bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000032c 	.word	0x2000032c

080015fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <_kill>:

int _kill(int pid, int sig)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001614:	f004 fe94 	bl	8006340 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	2216      	movs	r2, #22
 800161c:	601a      	str	r2, [r3, #0]
  return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_exit>:

void _exit (int status)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001632:	f04f 31ff 	mov.w	r1, #4294967295
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffe7 	bl	800160a <_kill>
  while (1) {}    /* Make sure we hang here */
 800163c:	e7fe      	b.n	800163c <_exit+0x12>

0800163e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e00a      	b.n	8001666 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001650:	f3af 8000 	nop.w
 8001654:	4601      	mov	r1, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	60ba      	str	r2, [r7, #8]
 800165c:	b2ca      	uxtb	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	dbf0      	blt.n	8001650 <_read+0x12>
  }

  return len;
 800166e:	687b      	ldr	r3, [r7, #4]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e009      	b.n	800169e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	60ba      	str	r2, [r7, #8]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	dbf1      	blt.n	800168a <_write+0x12>
  }
  return len;
 80016a6:	687b      	ldr	r3, [r7, #4]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_close>:

int _close(int file)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	605a      	str	r2, [r3, #4]
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <_isatty>:

int _isatty(int file)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ec:	2301      	movs	r3, #1
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f004 fdfe 	bl	8006340 <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000c000 	.word	0x2000c000
 8001770:	00000400 	.word	0x00000400
 8001774:	20000208 	.word	0x20000208
 8001778:	20000508 	.word	0x20000508

0800177c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b096      	sub	sp, #88	; 0x58
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2220      	movs	r2, #32
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fd6b 	bl	800629c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c6:	4b50      	ldr	r3, [pc, #320]	; (8001908 <MX_TIM1_Init+0x180>)
 80017c8:	4a50      	ldr	r2, [pc, #320]	; (800190c <MX_TIM1_Init+0x184>)
 80017ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017cc:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <MX_TIM1_Init+0x180>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d2:	4b4d      	ldr	r3, [pc, #308]	; (8001908 <MX_TIM1_Init+0x180>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <MX_TIM1_Init+0x180>)
 80017da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e0:	4b49      	ldr	r3, [pc, #292]	; (8001908 <MX_TIM1_Init+0x180>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e6:	4b48      	ldr	r3, [pc, #288]	; (8001908 <MX_TIM1_Init+0x180>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b46      	ldr	r3, [pc, #280]	; (8001908 <MX_TIM1_Init+0x180>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f2:	4845      	ldr	r0, [pc, #276]	; (8001908 <MX_TIM1_Init+0x180>)
 80017f4:	f001 fe38 	bl	8003468 <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017fe:	f7ff fe80 	bl	8001502 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800180c:	4619      	mov	r1, r3
 800180e:	483e      	ldr	r0, [pc, #248]	; (8001908 <MX_TIM1_Init+0x180>)
 8001810:	f002 fae6 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800181a:	f7ff fe72 	bl	8001502 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800181e:	483a      	ldr	r0, [pc, #232]	; (8001908 <MX_TIM1_Init+0x180>)
 8001820:	f001 fed2 	bl	80035c8 <HAL_TIM_PWM_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800182a:	f7ff fe6a 	bl	8001502 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800183a:	4619      	mov	r1, r3
 800183c:	4832      	ldr	r0, [pc, #200]	; (8001908 <MX_TIM1_Init+0x180>)
 800183e:	f002 fe9b 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001848:	f7ff fe5b 	bl	8001502 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184c:	2360      	movs	r3, #96	; 0x60
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	4825      	ldr	r0, [pc, #148]	; (8001908 <MX_TIM1_Init+0x180>)
 8001872:	f002 f9f3 	bl	8003c5c <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800187c:	f7ff fe41 	bl	8001502 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001884:	2204      	movs	r2, #4
 8001886:	4619      	mov	r1, r3
 8001888:	481f      	ldr	r0, [pc, #124]	; (8001908 <MX_TIM1_Init+0x180>)
 800188a:	f002 f9e7 	bl	8003c5c <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001894:	f7ff fe35 	bl	8001502 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	2208      	movs	r2, #8
 800189e:	4619      	mov	r1, r3
 80018a0:	4819      	ldr	r0, [pc, #100]	; (8001908 <MX_TIM1_Init+0x180>)
 80018a2:	f002 f9db 	bl	8003c5c <HAL_TIM_PWM_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018ac:	f7ff fe29 	bl	8001502 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	220c      	movs	r2, #12
 80018b6:	4619      	mov	r1, r3
 80018b8:	4813      	ldr	r0, [pc, #76]	; (8001908 <MX_TIM1_Init+0x180>)
 80018ba:	f002 f9cf 	bl	8003c5c <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80018c4:	f7ff fe1d 	bl	8001502 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM1_Init+0x180>)
 80018ec:	f002 feb0 	bl	8004650 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80018f6:	f7ff fe04 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM1_Init+0x180>)
 80018fc:	f000 f91e 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 8001900:	bf00      	nop
 8001902:	3758      	adds	r7, #88	; 0x58
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000020c 	.word	0x2000020c
 800190c:	40012c00 	.word	0x40012c00

08001910 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	463b      	mov	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <MX_TIM2_Init+0x94>)
 800192e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_TIM2_Init+0x94>)
 8001936:	2247      	movs	r2, #71	; 0x47
 8001938:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_TIM2_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_TIM2_Init+0x94>)
 8001942:	f242 720f 	movw	r2, #9999	; 0x270f
 8001946:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_TIM2_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_TIM2_Init+0x94>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001954:	4813      	ldr	r0, [pc, #76]	; (80019a4 <MX_TIM2_Init+0x94>)
 8001956:	f001 fd87 	bl	8003468 <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001960:	f7ff fdcf 	bl	8001502 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4619      	mov	r1, r3
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <MX_TIM2_Init+0x94>)
 8001972:	f002 fa35 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800197c:	f7ff fdc1 	bl	8001502 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001988:	463b      	mov	r3, r7
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_TIM2_Init+0x94>)
 800198e:	f002 fdf3 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001998:	f7ff fdb3 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000254 	.word	0x20000254

080019a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2224      	movs	r2, #36	; 0x24
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 fc70 	bl	800629c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019c6:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <MX_TIM3_Init+0xa4>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ea:	2303      	movs	r3, #3
 80019ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <MX_TIM3_Init+0xa0>)
 8001a16:	f001 fee9 	bl	80037ec <HAL_TIM_Encoder_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a20:	f7ff fd6f 	bl	8001502 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_TIM3_Init+0xa0>)
 8001a32:	f002 fda1 	bl	8004578 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a3c:	f7ff fd61 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000029c 	.word	0x2000029c
 8001a4c:	40000400 	.word	0x40000400

08001a50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_TIM_Base_MspInit+0x68>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10c      	bne.n	8001a7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_TIM_Base_MspInit+0x6c>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_TIM_Base_MspInit+0x6c>)
 8001a68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a6c:	6193      	str	r3, [r2, #24]
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_TIM_Base_MspInit+0x6c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a7a:	e018      	b.n	8001aae <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a84:	d113      	bne.n	8001aae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_TIM_Base_MspInit+0x6c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_TIM_Base_MspInit+0x6c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_TIM_Base_MspInit+0x6c>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	201c      	movs	r0, #28
 8001aa4:	f000 faf7 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aa8:	201c      	movs	r0, #28
 8001aaa:	f000 fb10 	bl	80020ce <HAL_NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40012c00 	.word	0x40012c00
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <HAL_TIM_Encoder_MspInit+0x70>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d123      	bne.n	8001b28 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x74>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x74>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	61d3      	str	r3, [r2, #28]
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x74>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x74>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x74>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b10:	23c0      	movs	r3, #192	; 0xc0
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4619      	mov	r1, r3
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b24:	f000 fee4 	bl	80028f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010800 	.word	0x40010800

08001b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_TIM_MspPostInit+0x5c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d118      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_TIM_MspPostInit+0x60>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_TIM_MspPostInit+0x60>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_TIM_MspPostInit+0x60>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b74:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_TIM_MspPostInit+0x64>)
 8001b8a:	f000 feb1 	bl	80028f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40012c00 	.word	0x40012c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010800 	.word	0x40010800

08001ba4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <MX_USART1_UART_Init+0x50>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_USART1_UART_Init+0x4c>)
 8001bdc:	f002 fd9b 	bl	8004716 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001be6:	f7ff fc8c 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200002e4 	.word	0x200002e4
 8001bf4:	40013800 	.word	0x40013800

08001bf8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <MX_USART2_UART_Init+0x50>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_USART2_UART_Init+0x4c>)
 8001c30:	f002 fd71 	bl	8004716 <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c3a:	f7ff fc62 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000032c 	.word	0x2000032c
 8001c48:	40004400 	.word	0x40004400

08001c4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a54      	ldr	r2, [pc, #336]	; (8001db8 <HAL_UART_MspInit+0x16c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d13e      	bne.n	8001cea <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	4844      	ldr	r0, [pc, #272]	; (8001dc0 <HAL_UART_MspInit+0x174>)
 8001cb0:	f000 fe1e 	bl	80028f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	483e      	ldr	r0, [pc, #248]	; (8001dc0 <HAL_UART_MspInit+0x174>)
 8001cc8:	f000 fe12 	bl	80028f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_UART_MspInit+0x178>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce2:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <HAL_UART_MspInit+0x178>)
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ce8:	e062      	b.n	8001db0 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a36      	ldr	r2, [pc, #216]	; (8001dc8 <HAL_UART_MspInit+0x17c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d15d      	bne.n	8001db0 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a2a      	ldr	r2, [pc, #168]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_UART_MspInit+0x170>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d24:	2304      	movs	r3, #4
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4825      	ldr	r0, [pc, #148]	; (8001dcc <HAL_UART_MspInit+0x180>)
 8001d38:	f000 fdda 	bl	80028f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	481f      	ldr	r0, [pc, #124]	; (8001dcc <HAL_UART_MspInit+0x180>)
 8001d50:	f000 fdce 	bl	80028f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d56:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <HAL_UART_MspInit+0x188>)
 8001d58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d86:	f000 f9bd 	bl	8002104 <HAL_DMA_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001d90:	f7ff fbb7 	bl	8001502 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d98:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d9a:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_UART_MspInit+0x184>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2026      	movs	r0, #38	; 0x26
 8001da6:	f000 f976 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001daa:	2026      	movs	r0, #38	; 0x26
 8001dac:	f000 f98f 	bl	80020ce <HAL_NVIC_EnableIRQ>
}
 8001db0:	bf00      	nop
 8001db2:	3730      	adds	r7, #48	; 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	20000374 	.word	0x20000374
 8001dd4:	4002006c 	.word	0x4002006c

08001dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd8:	f7ff fcd0 	bl	800177c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dde:	490c      	ldr	r1, [pc, #48]	; (8001e10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001de0:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001df4:	4c09      	ldr	r4, [pc, #36]	; (8001e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f004 faa3 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e06:	f7ff faf9 	bl	80013fc <main>
  bx lr
 8001e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e14:	08009f60 	.word	0x08009f60
  ldr r2, =_sbss
 8001e18:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e1c:	20000508 	.word	0x20000508

08001e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC1_2_IRQHandler>
	...

08001e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x28>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x28>)
 8001e2e:	f043 0310 	orr.w	r3, r3, #16
 8001e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 f923 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fb64 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f93b 	bl	80020ea <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 f903 	bl	8002096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	2000000c 	.word	0x2000000c
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x1c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_IncTick+0x20>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_IncTick+0x20>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	200003b8 	.word	0x200003b8

08001ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_GetTick+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	200003b8 	.word	0x200003b8

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4906      	ldr	r1, [pc, #24]	; (8001f80 <__NVIC_EnableIRQ+0x34>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204c:	d301      	bcc.n	8002052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204e:	2301      	movs	r3, #1
 8002050:	e00f      	b.n	8002072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <SysTick_Config+0x40>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205a:	210f      	movs	r1, #15
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f7ff ff90 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SysTick_Config+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <SysTick_Config+0x40>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff2d 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff42 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff90 	bl	8001fd8 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5f 	bl	8001f84 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff35 	bl	8001f4c <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa2 	bl	800203c <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e059      	b.n	80021ce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_DMA_Init+0xd4>)
 8002122:	429a      	cmp	r2, r3
 8002124:	d80f      	bhi.n	8002146 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_DMA_Init+0xd8>)
 800212e:	4413      	add	r3, r2
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_DMA_Init+0xdc>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	009a      	lsls	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_DMA_Init+0xe0>)
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
 8002144:	e00e      	b.n	8002164 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_DMA_Init+0xe4>)
 800214e:	4413      	add	r3, r2
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <HAL_DMA_Init+0xdc>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	009a      	lsls	r2, r3, #2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <HAL_DMA_Init+0xe8>)
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800217a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800217e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	40020407 	.word	0x40020407
 80021dc:	bffdfff8 	.word	0xbffdfff8
 80021e0:	cccccccd 	.word	0xcccccccd
 80021e4:	40020000 	.word	0x40020000
 80021e8:	bffdfbf8 	.word	0xbffdfbf8
 80021ec:	40020400 	.word	0x40020400

080021f0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d008      	beq.n	800221a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2204      	movs	r2, #4
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e020      	b.n	800225c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 020e 	bic.w	r2, r2, #14
 8002228:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f202 	lsl.w	r2, r1, r2
 8002248:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d005      	beq.n	800228c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2204      	movs	r2, #4
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e0d6      	b.n	800243a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020e 	bic.w	r2, r2, #14
 800229a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_DMA_Abort_IT+0x1dc>)
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d958      	bls.n	800236a <HAL_DMA_Abort_IT+0x102>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a62      	ldr	r2, [pc, #392]	; (8002448 <HAL_DMA_Abort_IT+0x1e0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04f      	beq.n	8002362 <HAL_DMA_Abort_IT+0xfa>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <HAL_DMA_Abort_IT+0x1e4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d048      	beq.n	800235e <HAL_DMA_Abort_IT+0xf6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5f      	ldr	r2, [pc, #380]	; (8002450 <HAL_DMA_Abort_IT+0x1e8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_DMA_Abort_IT+0xf0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5e      	ldr	r2, [pc, #376]	; (8002454 <HAL_DMA_Abort_IT+0x1ec>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d038      	beq.n	8002352 <HAL_DMA_Abort_IT+0xea>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a5c      	ldr	r2, [pc, #368]	; (8002458 <HAL_DMA_Abort_IT+0x1f0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d030      	beq.n	800234c <HAL_DMA_Abort_IT+0xe4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5b      	ldr	r2, [pc, #364]	; (800245c <HAL_DMA_Abort_IT+0x1f4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d028      	beq.n	8002346 <HAL_DMA_Abort_IT+0xde>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a52      	ldr	r2, [pc, #328]	; (8002444 <HAL_DMA_Abort_IT+0x1dc>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d020      	beq.n	8002340 <HAL_DMA_Abort_IT+0xd8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a57      	ldr	r2, [pc, #348]	; (8002460 <HAL_DMA_Abort_IT+0x1f8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d019      	beq.n	800233c <HAL_DMA_Abort_IT+0xd4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a55      	ldr	r2, [pc, #340]	; (8002464 <HAL_DMA_Abort_IT+0x1fc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d012      	beq.n	8002338 <HAL_DMA_Abort_IT+0xd0>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a54      	ldr	r2, [pc, #336]	; (8002468 <HAL_DMA_Abort_IT+0x200>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00a      	beq.n	8002332 <HAL_DMA_Abort_IT+0xca>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_DMA_Abort_IT+0x204>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d102      	bne.n	800232c <HAL_DMA_Abort_IT+0xc4>
 8002326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232a:	e01b      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 800232c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002330:	e018      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 8002332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002336:	e015      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 8002338:	2310      	movs	r3, #16
 800233a:	e013      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 800233c:	2301      	movs	r3, #1
 800233e:	e011      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 8002340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002344:	e00e      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 8002346:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800234a:	e00b      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	e008      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 8002352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002356:	e005      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 8002358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235c:	e002      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 800235e:	2310      	movs	r3, #16
 8002360:	e000      	b.n	8002364 <HAL_DMA_Abort_IT+0xfc>
 8002362:	2301      	movs	r3, #1
 8002364:	4a42      	ldr	r2, [pc, #264]	; (8002470 <HAL_DMA_Abort_IT+0x208>)
 8002366:	6053      	str	r3, [r2, #4]
 8002368:	e057      	b.n	800241a <HAL_DMA_Abort_IT+0x1b2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a36      	ldr	r2, [pc, #216]	; (8002448 <HAL_DMA_Abort_IT+0x1e0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d04f      	beq.n	8002414 <HAL_DMA_Abort_IT+0x1ac>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	; (800244c <HAL_DMA_Abort_IT+0x1e4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d048      	beq.n	8002410 <HAL_DMA_Abort_IT+0x1a8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	; (8002450 <HAL_DMA_Abort_IT+0x1e8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d040      	beq.n	800240a <HAL_DMA_Abort_IT+0x1a2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	; (8002454 <HAL_DMA_Abort_IT+0x1ec>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d038      	beq.n	8002404 <HAL_DMA_Abort_IT+0x19c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	; (8002458 <HAL_DMA_Abort_IT+0x1f0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d030      	beq.n	80023fe <HAL_DMA_Abort_IT+0x196>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	; (800245c <HAL_DMA_Abort_IT+0x1f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d028      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x190>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a26      	ldr	r2, [pc, #152]	; (8002444 <HAL_DMA_Abort_IT+0x1dc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d020      	beq.n	80023f2 <HAL_DMA_Abort_IT+0x18a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2a      	ldr	r2, [pc, #168]	; (8002460 <HAL_DMA_Abort_IT+0x1f8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_DMA_Abort_IT+0x186>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a29      	ldr	r2, [pc, #164]	; (8002464 <HAL_DMA_Abort_IT+0x1fc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d012      	beq.n	80023ea <HAL_DMA_Abort_IT+0x182>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_DMA_Abort_IT+0x200>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00a      	beq.n	80023e4 <HAL_DMA_Abort_IT+0x17c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a26      	ldr	r2, [pc, #152]	; (800246c <HAL_DMA_Abort_IT+0x204>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d102      	bne.n	80023de <HAL_DMA_Abort_IT+0x176>
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	e01b      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 80023de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e2:	e018      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	e015      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 80023ea:	2310      	movs	r3, #16
 80023ec:	e013      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e011      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 80023f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f6:	e00e      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 80023f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023fc:	e00b      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 80023fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002402:	e008      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 8002404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002408:	e005      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 800240a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240e:	e002      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 8002410:	2310      	movs	r3, #16
 8002412:	e000      	b.n	8002416 <HAL_DMA_Abort_IT+0x1ae>
 8002414:	2301      	movs	r3, #1
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_DMA_Abort_IT+0x20c>)
 8002418:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
    } 
  }
  return status;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40020080 	.word	0x40020080
 8002448:	40020008 	.word	0x40020008
 800244c:	4002001c 	.word	0x4002001c
 8002450:	40020030 	.word	0x40020030
 8002454:	40020044 	.word	0x40020044
 8002458:	40020058 	.word	0x40020058
 800245c:	4002006c 	.word	0x4002006c
 8002460:	40020408 	.word	0x40020408
 8002464:	4002041c 	.word	0x4002041c
 8002468:	40020430 	.word	0x40020430
 800246c:	40020444 	.word	0x40020444
 8002470:	40020400 	.word	0x40020400
 8002474:	40020000 	.word	0x40020000

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2204      	movs	r2, #4
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80f1 	beq.w	8002684 <HAL_DMA_IRQHandler+0x20c>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80eb 	beq.w	8002684 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_DMA_IRQHandler+0x1d8>)
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d958      	bls.n	800258a <HAL_DMA_IRQHandler+0x112>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <HAL_DMA_IRQHandler+0x1dc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d04f      	beq.n	8002582 <HAL_DMA_IRQHandler+0x10a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5c      	ldr	r2, [pc, #368]	; (8002658 <HAL_DMA_IRQHandler+0x1e0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d048      	beq.n	800257e <HAL_DMA_IRQHandler+0x106>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_DMA_IRQHandler+0x1e4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d040      	beq.n	8002578 <HAL_DMA_IRQHandler+0x100>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a59      	ldr	r2, [pc, #356]	; (8002660 <HAL_DMA_IRQHandler+0x1e8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d038      	beq.n	8002572 <HAL_DMA_IRQHandler+0xfa>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_DMA_IRQHandler+0x1ec>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d030      	beq.n	800256c <HAL_DMA_IRQHandler+0xf4>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a56      	ldr	r2, [pc, #344]	; (8002668 <HAL_DMA_IRQHandler+0x1f0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d028      	beq.n	8002566 <HAL_DMA_IRQHandler+0xee>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4d      	ldr	r2, [pc, #308]	; (8002650 <HAL_DMA_IRQHandler+0x1d8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d020      	beq.n	8002560 <HAL_DMA_IRQHandler+0xe8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_DMA_IRQHandler+0x1f4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d019      	beq.n	800255c <HAL_DMA_IRQHandler+0xe4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a50      	ldr	r2, [pc, #320]	; (8002670 <HAL_DMA_IRQHandler+0x1f8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d012      	beq.n	8002558 <HAL_DMA_IRQHandler+0xe0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_DMA_IRQHandler+0x1fc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00a      	beq.n	8002552 <HAL_DMA_IRQHandler+0xda>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_DMA_IRQHandler+0x200>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d102      	bne.n	800254c <HAL_DMA_IRQHandler+0xd4>
 8002546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254a:	e01b      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 800254c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002550:	e018      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 8002552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002556:	e015      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	e013      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 800255c:	2304      	movs	r3, #4
 800255e:	e011      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 8002560:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002564:	e00e      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 8002566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800256a:	e00b      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 800256c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002570:	e008      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 8002572:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002576:	e005      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 8002578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257c:	e002      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 800257e:	2340      	movs	r3, #64	; 0x40
 8002580:	e000      	b.n	8002584 <HAL_DMA_IRQHandler+0x10c>
 8002582:	2304      	movs	r3, #4
 8002584:	4a3d      	ldr	r2, [pc, #244]	; (800267c <HAL_DMA_IRQHandler+0x204>)
 8002586:	6053      	str	r3, [r2, #4]
 8002588:	e057      	b.n	800263a <HAL_DMA_IRQHandler+0x1c2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a31      	ldr	r2, [pc, #196]	; (8002654 <HAL_DMA_IRQHandler+0x1dc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d04f      	beq.n	8002634 <HAL_DMA_IRQHandler+0x1bc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <HAL_DMA_IRQHandler+0x1e0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d048      	beq.n	8002630 <HAL_DMA_IRQHandler+0x1b8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2e      	ldr	r2, [pc, #184]	; (800265c <HAL_DMA_IRQHandler+0x1e4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d040      	beq.n	800262a <HAL_DMA_IRQHandler+0x1b2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <HAL_DMA_IRQHandler+0x1e8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d038      	beq.n	8002624 <HAL_DMA_IRQHandler+0x1ac>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <HAL_DMA_IRQHandler+0x1ec>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d030      	beq.n	800261e <HAL_DMA_IRQHandler+0x1a6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a29      	ldr	r2, [pc, #164]	; (8002668 <HAL_DMA_IRQHandler+0x1f0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d028      	beq.n	8002618 <HAL_DMA_IRQHandler+0x1a0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a21      	ldr	r2, [pc, #132]	; (8002650 <HAL_DMA_IRQHandler+0x1d8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d020      	beq.n	8002612 <HAL_DMA_IRQHandler+0x19a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <HAL_DMA_IRQHandler+0x1f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_DMA_IRQHandler+0x196>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a24      	ldr	r2, [pc, #144]	; (8002670 <HAL_DMA_IRQHandler+0x1f8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d012      	beq.n	800260a <HAL_DMA_IRQHandler+0x192>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_DMA_IRQHandler+0x1fc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00a      	beq.n	8002604 <HAL_DMA_IRQHandler+0x18c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	; (8002678 <HAL_DMA_IRQHandler+0x200>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d102      	bne.n	80025fe <HAL_DMA_IRQHandler+0x186>
 80025f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025fc:	e01b      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 80025fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002602:	e018      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 8002604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002608:	e015      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 800260a:	2340      	movs	r3, #64	; 0x40
 800260c:	e013      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 800260e:	2304      	movs	r3, #4
 8002610:	e011      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 8002612:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002616:	e00e      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 8002618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800261c:	e00b      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 800261e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002622:	e008      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 8002624:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002628:	e005      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 800262a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262e:	e002      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 8002630:	2340      	movs	r3, #64	; 0x40
 8002632:	e000      	b.n	8002636 <HAL_DMA_IRQHandler+0x1be>
 8002634:	2304      	movs	r3, #4
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <HAL_DMA_IRQHandler+0x208>)
 8002638:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8136 	beq.w	80028b0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800264c:	e130      	b.n	80028b0 <HAL_DMA_IRQHandler+0x438>
 800264e:	bf00      	nop
 8002650:	40020080 	.word	0x40020080
 8002654:	40020008 	.word	0x40020008
 8002658:	4002001c 	.word	0x4002001c
 800265c:	40020030 	.word	0x40020030
 8002660:	40020044 	.word	0x40020044
 8002664:	40020058 	.word	0x40020058
 8002668:	4002006c 	.word	0x4002006c
 800266c:	40020408 	.word	0x40020408
 8002670:	4002041c 	.word	0x4002041c
 8002674:	40020430 	.word	0x40020430
 8002678:	40020444 	.word	0x40020444
 800267c:	40020400 	.word	0x40020400
 8002680:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2202      	movs	r2, #2
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80dd 	beq.w	8002850 <HAL_DMA_IRQHandler+0x3d8>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80d7 	beq.w	8002850 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10b      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 020a 	bic.w	r2, r2, #10
 80026be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <HAL_DMA_IRQHandler+0x444>)
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d958      	bls.n	8002786 <HAL_DMA_IRQHandler+0x30e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a79      	ldr	r2, [pc, #484]	; (80028c0 <HAL_DMA_IRQHandler+0x448>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d04f      	beq.n	800277e <HAL_DMA_IRQHandler+0x306>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a78      	ldr	r2, [pc, #480]	; (80028c4 <HAL_DMA_IRQHandler+0x44c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d048      	beq.n	800277a <HAL_DMA_IRQHandler+0x302>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a76      	ldr	r2, [pc, #472]	; (80028c8 <HAL_DMA_IRQHandler+0x450>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d040      	beq.n	8002774 <HAL_DMA_IRQHandler+0x2fc>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	; (80028cc <HAL_DMA_IRQHandler+0x454>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d038      	beq.n	800276e <HAL_DMA_IRQHandler+0x2f6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a73      	ldr	r2, [pc, #460]	; (80028d0 <HAL_DMA_IRQHandler+0x458>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d030      	beq.n	8002768 <HAL_DMA_IRQHandler+0x2f0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a72      	ldr	r2, [pc, #456]	; (80028d4 <HAL_DMA_IRQHandler+0x45c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d028      	beq.n	8002762 <HAL_DMA_IRQHandler+0x2ea>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a69      	ldr	r2, [pc, #420]	; (80028bc <HAL_DMA_IRQHandler+0x444>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d020      	beq.n	800275c <HAL_DMA_IRQHandler+0x2e4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6e      	ldr	r2, [pc, #440]	; (80028d8 <HAL_DMA_IRQHandler+0x460>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d019      	beq.n	8002758 <HAL_DMA_IRQHandler+0x2e0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6c      	ldr	r2, [pc, #432]	; (80028dc <HAL_DMA_IRQHandler+0x464>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d012      	beq.n	8002754 <HAL_DMA_IRQHandler+0x2dc>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6b      	ldr	r2, [pc, #428]	; (80028e0 <HAL_DMA_IRQHandler+0x468>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00a      	beq.n	800274e <HAL_DMA_IRQHandler+0x2d6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a69      	ldr	r2, [pc, #420]	; (80028e4 <HAL_DMA_IRQHandler+0x46c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d102      	bne.n	8002748 <HAL_DMA_IRQHandler+0x2d0>
 8002742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002746:	e01b      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 8002748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274c:	e018      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 800274e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002752:	e015      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 8002754:	2320      	movs	r3, #32
 8002756:	e013      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 8002758:	2302      	movs	r3, #2
 800275a:	e011      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 800275c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002760:	e00e      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 8002762:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002766:	e00b      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 8002768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800276c:	e008      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 800276e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002772:	e005      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 8002774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002778:	e002      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 800277a:	2320      	movs	r3, #32
 800277c:	e000      	b.n	8002780 <HAL_DMA_IRQHandler+0x308>
 800277e:	2302      	movs	r3, #2
 8002780:	4a59      	ldr	r2, [pc, #356]	; (80028e8 <HAL_DMA_IRQHandler+0x470>)
 8002782:	6053      	str	r3, [r2, #4]
 8002784:	e057      	b.n	8002836 <HAL_DMA_IRQHandler+0x3be>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <HAL_DMA_IRQHandler+0x448>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04f      	beq.n	8002830 <HAL_DMA_IRQHandler+0x3b8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a4b      	ldr	r2, [pc, #300]	; (80028c4 <HAL_DMA_IRQHandler+0x44c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d048      	beq.n	800282c <HAL_DMA_IRQHandler+0x3b4>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HAL_DMA_IRQHandler+0x450>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3ae>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_DMA_IRQHandler+0x454>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d038      	beq.n	8002820 <HAL_DMA_IRQHandler+0x3a8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <HAL_DMA_IRQHandler+0x458>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d030      	beq.n	800281a <HAL_DMA_IRQHandler+0x3a2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a45      	ldr	r2, [pc, #276]	; (80028d4 <HAL_DMA_IRQHandler+0x45c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d028      	beq.n	8002814 <HAL_DMA_IRQHandler+0x39c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a3d      	ldr	r2, [pc, #244]	; (80028bc <HAL_DMA_IRQHandler+0x444>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d020      	beq.n	800280e <HAL_DMA_IRQHandler+0x396>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a41      	ldr	r2, [pc, #260]	; (80028d8 <HAL_DMA_IRQHandler+0x460>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_DMA_IRQHandler+0x392>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a40      	ldr	r2, [pc, #256]	; (80028dc <HAL_DMA_IRQHandler+0x464>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d012      	beq.n	8002806 <HAL_DMA_IRQHandler+0x38e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3e      	ldr	r2, [pc, #248]	; (80028e0 <HAL_DMA_IRQHandler+0x468>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00a      	beq.n	8002800 <HAL_DMA_IRQHandler+0x388>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3d      	ldr	r2, [pc, #244]	; (80028e4 <HAL_DMA_IRQHandler+0x46c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <HAL_DMA_IRQHandler+0x382>
 80027f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f8:	e01b      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 80027fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fe:	e018      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 8002800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002804:	e015      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 8002806:	2320      	movs	r3, #32
 8002808:	e013      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 800280a:	2302      	movs	r3, #2
 800280c:	e011      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 800280e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002812:	e00e      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 8002814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002818:	e00b      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 800281a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281e:	e008      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 8002820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002824:	e005      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 8002826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800282a:	e002      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 800282c:	2320      	movs	r3, #32
 800282e:	e000      	b.n	8002832 <HAL_DMA_IRQHandler+0x3ba>
 8002830:	2302      	movs	r3, #2
 8002832:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_DMA_IRQHandler+0x474>)
 8002834:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	2b00      	cmp	r3, #0
 8002844:	d034      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800284e:	e02f      	b.n	80028b0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2208      	movs	r2, #8
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d028      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x43a>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d023      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020e 	bic.w	r2, r2, #14
 8002878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
    }
  }
  return;
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
}
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40020080 	.word	0x40020080
 80028c0:	40020008 	.word	0x40020008
 80028c4:	4002001c 	.word	0x4002001c
 80028c8:	40020030 	.word	0x40020030
 80028cc:	40020044 	.word	0x40020044
 80028d0:	40020058 	.word	0x40020058
 80028d4:	4002006c 	.word	0x4002006c
 80028d8:	40020408 	.word	0x40020408
 80028dc:	4002041c 	.word	0x4002041c
 80028e0:	40020430 	.word	0x40020430
 80028e4:	40020444 	.word	0x40020444
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020000 	.word	0x40020000

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002902:	e179      	b.n	8002bf8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002904:	2201      	movs	r2, #1
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8168 	bne.w	8002bf2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a96      	ldr	r2, [pc, #600]	; (8002b80 <HAL_GPIO_Init+0x290>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d05e      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 800292c:	4a94      	ldr	r2, [pc, #592]	; (8002b80 <HAL_GPIO_Init+0x290>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d875      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002932:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <HAL_GPIO_Init+0x294>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d058      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002938:	4a92      	ldr	r2, [pc, #584]	; (8002b84 <HAL_GPIO_Init+0x294>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d86f      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800293e:	4a92      	ldr	r2, [pc, #584]	; (8002b88 <HAL_GPIO_Init+0x298>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d052      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002944:	4a90      	ldr	r2, [pc, #576]	; (8002b88 <HAL_GPIO_Init+0x298>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d869      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800294a:	4a90      	ldr	r2, [pc, #576]	; (8002b8c <HAL_GPIO_Init+0x29c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d04c      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 8002950:	4a8e      	ldr	r2, [pc, #568]	; (8002b8c <HAL_GPIO_Init+0x29c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d863      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002956:	4a8e      	ldr	r2, [pc, #568]	; (8002b90 <HAL_GPIO_Init+0x2a0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d046      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
 800295c:	4a8c      	ldr	r2, [pc, #560]	; (8002b90 <HAL_GPIO_Init+0x2a0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d85d      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 8002962:	2b12      	cmp	r3, #18
 8002964:	d82a      	bhi.n	80029bc <HAL_GPIO_Init+0xcc>
 8002966:	2b12      	cmp	r3, #18
 8002968:	d859      	bhi.n	8002a1e <HAL_GPIO_Init+0x12e>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <HAL_GPIO_Init+0x80>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	080029eb 	.word	0x080029eb
 8002974:	080029c5 	.word	0x080029c5
 8002978:	080029d7 	.word	0x080029d7
 800297c:	08002a19 	.word	0x08002a19
 8002980:	08002a1f 	.word	0x08002a1f
 8002984:	08002a1f 	.word	0x08002a1f
 8002988:	08002a1f 	.word	0x08002a1f
 800298c:	08002a1f 	.word	0x08002a1f
 8002990:	08002a1f 	.word	0x08002a1f
 8002994:	08002a1f 	.word	0x08002a1f
 8002998:	08002a1f 	.word	0x08002a1f
 800299c:	08002a1f 	.word	0x08002a1f
 80029a0:	08002a1f 	.word	0x08002a1f
 80029a4:	08002a1f 	.word	0x08002a1f
 80029a8:	08002a1f 	.word	0x08002a1f
 80029ac:	08002a1f 	.word	0x08002a1f
 80029b0:	08002a1f 	.word	0x08002a1f
 80029b4:	080029cd 	.word	0x080029cd
 80029b8:	080029e1 	.word	0x080029e1
 80029bc:	4a75      	ldr	r2, [pc, #468]	; (8002b94 <HAL_GPIO_Init+0x2a4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029c2:	e02c      	b.n	8002a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e029      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	3304      	adds	r3, #4
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e024      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	3308      	adds	r3, #8
 80029dc:	623b      	str	r3, [r7, #32]
          break;
 80029de:	e01f      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	330c      	adds	r3, #12
 80029e6:	623b      	str	r3, [r7, #32]
          break;
 80029e8:	e01a      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029f2:	2304      	movs	r3, #4
 80029f4:	623b      	str	r3, [r7, #32]
          break;
 80029f6:	e013      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a00:	2308      	movs	r3, #8
 8002a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	611a      	str	r2, [r3, #16]
          break;
 8002a0a:	e009      	b.n	8002a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	615a      	str	r2, [r3, #20]
          break;
 8002a16:	e003      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
          break;
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x130>
          break;
 8002a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2bff      	cmp	r3, #255	; 0xff
 8002a24:	d801      	bhi.n	8002a2a <HAL_GPIO_Init+0x13a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	e001      	b.n	8002a2e <HAL_GPIO_Init+0x13e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2bff      	cmp	r3, #255	; 0xff
 8002a34:	d802      	bhi.n	8002a3c <HAL_GPIO_Init+0x14c>
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	e002      	b.n	8002a42 <HAL_GPIO_Init+0x152>
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	3b08      	subs	r3, #8
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	210f      	movs	r1, #15
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80c1 	beq.w	8002bf2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_GPIO_Init+0x2a8>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_GPIO_Init+0x2a8>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_GPIO_Init+0x2a8>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a88:	4a44      	ldr	r2, [pc, #272]	; (8002b9c <HAL_GPIO_Init+0x2ac>)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3c      	ldr	r2, [pc, #240]	; (8002ba0 <HAL_GPIO_Init+0x2b0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01f      	beq.n	8002af4 <HAL_GPIO_Init+0x204>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_GPIO_Init+0x2b4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d019      	beq.n	8002af0 <HAL_GPIO_Init+0x200>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <HAL_GPIO_Init+0x2b8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_GPIO_Init+0x1fc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a39      	ldr	r2, [pc, #228]	; (8002bac <HAL_GPIO_Init+0x2bc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00d      	beq.n	8002ae8 <HAL_GPIO_Init+0x1f8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <HAL_GPIO_Init+0x2c0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <HAL_GPIO_Init+0x1f4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a37      	ldr	r2, [pc, #220]	; (8002bb4 <HAL_GPIO_Init+0x2c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <HAL_GPIO_Init+0x1f0>
 8002adc:	2305      	movs	r3, #5
 8002ade:	e00a      	b.n	8002af6 <HAL_GPIO_Init+0x206>
 8002ae0:	2306      	movs	r3, #6
 8002ae2:	e008      	b.n	8002af6 <HAL_GPIO_Init+0x206>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e006      	b.n	8002af6 <HAL_GPIO_Init+0x206>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e004      	b.n	8002af6 <HAL_GPIO_Init+0x206>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_Init+0x206>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_Init+0x206>
 8002af4:	2300      	movs	r3, #0
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	f002 0203 	and.w	r2, r2, #3
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b06:	4925      	ldr	r1, [pc, #148]	; (8002b9c <HAL_GPIO_Init+0x2ac>)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4924      	ldr	r1, [pc, #144]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	4920      	ldr	r1, [pc, #128]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	491a      	ldr	r1, [pc, #104]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60cb      	str	r3, [r1, #12]
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	4916      	ldr	r1, [pc, #88]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d025      	beq.n	8002bbc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4910      	ldr	r1, [pc, #64]	; (8002bb8 <HAL_GPIO_Init+0x2c8>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
 8002b7c:	e025      	b.n	8002bca <HAL_GPIO_Init+0x2da>
 8002b7e:	bf00      	nop
 8002b80:	10320000 	.word	0x10320000
 8002b84:	10310000 	.word	0x10310000
 8002b88:	10220000 	.word	0x10220000
 8002b8c:	10210000 	.word	0x10210000
 8002b90:	10120000 	.word	0x10120000
 8002b94:	10110000 	.word	0x10110000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40010800 	.word	0x40010800
 8002ba4:	40010c00 	.word	0x40010c00
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40011800 	.word	0x40011800
 8002bb4:	40011c00 	.word	0x40011c00
 8002bb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4913      	ldr	r1, [pc, #76]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
 8002be2:	e006      	b.n	8002bf2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <HAL_GPIO_Init+0x324>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f47f ae7e 	bne.w	8002904 <HAL_GPIO_Init+0x14>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	372c      	adds	r7, #44	; 0x2c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e272      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8087 	beq.w	8002d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c68:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d00c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c74:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d112      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5e>
 8002c80:	4b8c      	ldr	r3, [pc, #560]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8e:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d06c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x12c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d168      	bne.n	8002d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e24c      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x76>
 8002cb0:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a7f      	ldr	r2, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e02e      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0xbc>
 8002cea:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a71      	ldr	r2, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a67      	ldr	r2, [pc, #412]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7ff f8d6 	bl	8001ed4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7ff f8d2 	bl	8001ed4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e200      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe4>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f8c2 	bl	8001ed4 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7ff f8be 	bl	8001ed4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1ec      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x10c>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d063      	beq.n	8002e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d82:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x176>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c0      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4939      	ldr	r1, [pc, #228]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e03a      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_RCC_OscConfig+0x270>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7ff f877 	bl	8001ed4 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7ff f873 	bl	8001ed4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1a1      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x270>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f856 	bl	8001ed4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7ff f852 	bl	8001ed4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e180      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03a      	beq.n	8002ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d019      	beq.n	8002e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7ff f836 	bl	8001ed4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7ff f832 	bl	8001ed4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e160      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f000 face 	bl	800342c <RCC_Delay>
 8002e90:	e01c      	b.n	8002ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7ff f81c 	bl	8001ed4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7ff f818 	bl	8001ed4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e146      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	42420000 	.word	0x42420000
 8002ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec0:	4b92      	ldr	r3, [pc, #584]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e9      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a6 	beq.w	8003026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a87      	ldr	r2, [pc, #540]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b85      	ldr	r3, [pc, #532]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b7f      	ldr	r3, [pc, #508]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7e      	ldr	r2, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe ffd9 	bl	8001ed4 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe ffd5 	bl	8001ed4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e103      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b75      	ldr	r3, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x312>
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a6e      	ldr	r2, [pc, #440]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6213      	str	r3, [r2, #32]
 8002f58:	e02d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x334>
 8002f62:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6213      	str	r3, [r2, #32]
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a66      	ldr	r2, [pc, #408]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x356>
 8002f84:	4b61      	ldr	r3, [pc, #388]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a60      	ldr	r2, [pc, #384]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6213      	str	r3, [r2, #32]
 8002f90:	4b5e      	ldr	r3, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a5d      	ldr	r2, [pc, #372]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a5a      	ldr	r2, [pc, #360]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	4b58      	ldr	r3, [pc, #352]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe ff89 	bl	8001ed4 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe ff85 	bl	8001ed4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0b1      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x37e>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fe ff73 	bl	8001ed4 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe ff6f 	bl	8001ed4 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e09b      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b3c      	ldr	r3, [pc, #240]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4a3b      	ldr	r2, [pc, #236]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8087 	beq.w	800313e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d061      	beq.n	8003100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d146      	bne.n	80030d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe ff43 	bl	8001ed4 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe ff3f 	bl	8001ed4 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e06d      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d108      	bne.n	800308c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4921      	ldr	r1, [pc, #132]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a19      	ldr	r1, [r3, #32]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	430b      	orrs	r3, r1
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe ff13 	bl	8001ed4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe ff0f 	bl	8001ed4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e03d      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x46a>
 80030d0:	e035      	b.n	800313e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fefc 	bl	8001ed4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe fef8 	bl	8001ed4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e026      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x498>
 80030fe:	e01e      	b.n	800313e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e019      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
 8003114:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x500>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0d0      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d910      	bls.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4965      	ldr	r1, [pc, #404]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0b8      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a8:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	494d      	ldr	r1, [pc, #308]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d040      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d115      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07f      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e073      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f023 0203 	bic.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4936      	ldr	r1, [pc, #216]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe fe4a 	bl	8001ed4 <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	e00a      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003244:	f7fe fe46 	bl	8001ed4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e053      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 020c 	and.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1eb      	bne.n	8003244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d210      	bcs.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0207 	bic.w	r2, r3, #7
 8003282:	4922      	ldr	r1, [pc, #136]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e032      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4916      	ldr	r1, [pc, #88]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	490e      	ldr	r1, [pc, #56]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032da:	f000 f821 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032de:	4602      	mov	r2, r0
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	490a      	ldr	r1, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	5ccb      	ldrb	r3, [r1, r3]
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1cc>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fda8 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40022000 	.word	0x40022000
 8003310:	40021000 	.word	0x40021000
 8003314:	08009b00 	.word	0x08009b00
 8003318:	20000004 	.word	0x20000004
 800331c:	20000008 	.word	0x20000008

08003320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x30>
 800334a:	2b08      	cmp	r3, #8
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x36>
 800334e:	e027      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003352:	613b      	str	r3, [r7, #16]
      break;
 8003354:	e027      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d010      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0c5b      	lsrs	r3, r3, #17
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003382:	fb03 f202 	mul.w	r2, r3, r2
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e004      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	613b      	str	r3, [r7, #16]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80033a2:	613b      	str	r3, [r7, #16]
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	693b      	ldr	r3, [r7, #16]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	007a1200 	.word	0x007a1200
 80033bc:	08009b18 	.word	0x08009b18
 80033c0:	08009b28 	.word	0x08009b28
 80033c4:	003d0900 	.word	0x003d0900

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	20000004 	.word	0x20000004

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e0:	f7ff fff2 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	08009b10 	.word	0x08009b10

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003408:	f7ff ffde 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	0adb      	lsrs	r3, r3, #11
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	08009b10 	.word	0x08009b10

0800342c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <RCC_Delay+0x34>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <RCC_Delay+0x38>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0a5b      	lsrs	r3, r3, #9
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003448:	bf00      	nop
  }
  while (Delay --);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	60fa      	str	r2, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f9      	bne.n	8003448 <RCC_Delay+0x1c>
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	20000004 	.word	0x20000004
 8003464:	10624dd3 	.word	0x10624dd3

08003468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e041      	b.n	80034fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fade 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f000 fd86 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e044      	b.n	80035aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_TIM_Base_Start_IT+0xac>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x6c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x6c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d00e      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x6c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_TIM_Base_Start_IT+0xb4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x6c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x6c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d111      	bne.n	8003598 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d010      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003596:	e007      	b.n	80035a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40013400 	.word	0x40013400
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	40000c00 	.word	0x40000c00

080035c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e041      	b.n	800365e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f839 	bl	8003666 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 fcd6 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <HAL_TIM_PWM_Start+0x24>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e022      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d109      	bne.n	80036b6 <HAL_TIM_PWM_Start+0x3e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e015      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d109      	bne.n	80036d0 <HAL_TIM_PWM_Start+0x58>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e008      	b.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e072      	b.n	80037d0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_PWM_Start+0x82>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f8:	e013      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d104      	bne.n	800370a <HAL_TIM_PWM_Start+0x92>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003708:	e00b      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start+0xa2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003718:	e003      	b.n	8003722 <HAL_TIM_PWM_Start+0xaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2201      	movs	r2, #1
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 ff00 	bl	8004530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <HAL_TIM_PWM_Start+0x160>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <HAL_TIM_PWM_Start+0xcc>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a27      	ldr	r2, [pc, #156]	; (80037dc <HAL_TIM_PWM_Start+0x164>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_TIM_PWM_Start+0xd0>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <HAL_TIM_PWM_Start+0xd2>
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <HAL_TIM_PWM_Start+0x160>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <HAL_TIM_PWM_Start+0x122>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_TIM_PWM_Start+0x164>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_TIM_PWM_Start+0x122>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377a:	d00e      	beq.n	800379a <HAL_TIM_PWM_Start+0x122>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <HAL_TIM_PWM_Start+0x168>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_TIM_PWM_Start+0x122>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <HAL_TIM_PWM_Start+0x16c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIM_PWM_Start+0x122>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_TIM_PWM_Start+0x170>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d111      	bne.n	80037be <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d010      	beq.n	80037ce <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037bc:	e007      	b.n	80037ce <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00

080037ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e093      	b.n	8003928 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fe f953 	bl	8001ac0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003830:	f023 0307 	bic.w	r3, r3, #7
 8003834:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f000 fbb9 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	4313      	orrs	r3, r2
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800388c:	f023 030c 	bic.w	r3, r3, #12
 8003890:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	4313      	orrs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	011a      	lsls	r2, r3, #4
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	031b      	lsls	r3, r3, #12
 80038bc:	4313      	orrs	r3, r2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	4313      	orrs	r3, r2
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003940:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003948:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003950:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003958:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d110      	bne.n	8003982 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d102      	bne.n	800396c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003966:	7b7b      	ldrb	r3, [r7, #13]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d001      	beq.n	8003970 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e069      	b.n	8003a44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003980:	e031      	b.n	80039e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d110      	bne.n	80039aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003988:	7bbb      	ldrb	r3, [r7, #14]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d102      	bne.n	8003994 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800398e:	7b3b      	ldrb	r3, [r7, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e055      	b.n	8003a44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a8:	e01d      	b.n	80039e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d108      	bne.n	80039c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039b0:	7bbb      	ldrb	r3, [r7, #14]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d105      	bne.n	80039c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039b6:	7b7b      	ldrb	r3, [r7, #13]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d102      	bne.n	80039c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039bc:	7b3b      	ldrb	r3, [r7, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e03e      	b.n	8003a44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_TIM_Encoder_Start+0xc4>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d008      	beq.n	8003a04 <HAL_TIM_Encoder_Start+0xd4>
 80039f2:	e00f      	b.n	8003a14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2201      	movs	r2, #1
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fd97 	bl	8004530 <TIM_CCxChannelCmd>
      break;
 8003a02:	e016      	b.n	8003a32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fd8f 	bl	8004530 <TIM_CCxChannelCmd>
      break;
 8003a12:	e00e      	b.n	8003a32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fd87 	bl	8004530 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fd80 	bl	8004530 <TIM_CCxChannelCmd>
      break;
 8003a30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d122      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0202 	mvn.w	r2, #2
 8003a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa76 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa69 	bl	8003f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fa78 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d122      	bne.n	8003afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0204 	mvn.w	r2, #4
 8003acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa4c 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa3f 	bl	8003f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa4e 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0208 	mvn.w	r2, #8
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fa22 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa15 	bl	8003f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa24 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0210 	mvn.w	r2, #16
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9f8 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9eb 	bl	8003f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f9fa 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0201 	mvn.w	r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fb94 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b80      	cmp	r3, #128	; 0x80
 8003bdc:	d10e      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d107      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fd84 	bl	8004704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d10e      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d107      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9be 	bl	8003fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0220 	mvn.w	r2, #32
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fd4f 	bl	80046f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e0ae      	b.n	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	f200 809f 	bhi.w	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08003dc9 	.word	0x08003dc9
 8003c98:	08003dc9 	.word	0x08003dc9
 8003c9c:	08003dc9 	.word	0x08003dc9
 8003ca0:	08003d05 	.word	0x08003d05
 8003ca4:	08003dc9 	.word	0x08003dc9
 8003ca8:	08003dc9 	.word	0x08003dc9
 8003cac:	08003dc9 	.word	0x08003dc9
 8003cb0:	08003d47 	.word	0x08003d47
 8003cb4:	08003dc9 	.word	0x08003dc9
 8003cb8:	08003dc9 	.word	0x08003dc9
 8003cbc:	08003dc9 	.word	0x08003dc9
 8003cc0:	08003d87 	.word	0x08003d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f9ee 	bl	80040ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	619a      	str	r2, [r3, #24]
      break;
 8003d02:	e064      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fa3e 	bl	800418c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	619a      	str	r2, [r3, #24]
      break;
 8003d44:	e043      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fa91 	bl	8004274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0208 	orr.w	r2, r2, #8
 8003d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0204 	bic.w	r2, r2, #4
 8003d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69d9      	ldr	r1, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	61da      	str	r2, [r3, #28]
      break;
 8003d84:	e023      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fae5 	bl	800435c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	021a      	lsls	r2, r3, #8
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	61da      	str	r2, [r3, #28]
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_TIM_ConfigClockSource+0x1c>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0b4      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x186>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e34:	d03e      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3a:	f200 8087 	bhi.w	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	f000 8086 	beq.w	8003f52 <HAL_TIM_ConfigClockSource+0x172>
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	d87f      	bhi.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d01a      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0xa6>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d87b      	bhi.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b60      	cmp	r3, #96	; 0x60
 8003e56:	d050      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x11a>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d877      	bhi.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b50      	cmp	r3, #80	; 0x50
 8003e5e:	d03c      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0xfa>
 8003e60:	2b50      	cmp	r3, #80	; 0x50
 8003e62:	d873      	bhi.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d058      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x13a>
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d86f      	bhi.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b30      	cmp	r3, #48	; 0x30
 8003e6e:	d064      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x15a>
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	d86b      	bhi.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d060      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x15a>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d867      	bhi.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d05c      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x15a>
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d05a      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x15a>
 8003e84:	e062      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e96:	f000 fb2c 	bl	80044f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ea8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	609a      	str	r2, [r3, #8]
      break;
 8003eb2:	e04f      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ec4:	f000 fb15 	bl	80044f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed6:	609a      	str	r2, [r3, #8]
      break;
 8003ed8:	e03c      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f000 fa8c 	bl	8004404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2150      	movs	r1, #80	; 0x50
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fae3 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003ef8:	e02c      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f06:	461a      	mov	r2, r3
 8003f08:	f000 faaa 	bl	8004460 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2160      	movs	r1, #96	; 0x60
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fad3 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f18:	e01c      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f26:	461a      	mov	r2, r3
 8003f28:	f000 fa6c 	bl	8004404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fac3 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f38:	e00c      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f000 faba 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e003      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f50:	e000      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
	...

08003fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a33      	ldr	r2, [pc, #204]	; (8004098 <TIM_Base_SetConfig+0xe0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a32      	ldr	r2, [pc, #200]	; (800409c <TIM_Base_SetConfig+0xe4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d00b      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <TIM_Base_SetConfig+0xe8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a2e      	ldr	r2, [pc, #184]	; (80040a4 <TIM_Base_SetConfig+0xec>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <TIM_Base_SetConfig+0xf0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d108      	bne.n	800400a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a22      	ldr	r2, [pc, #136]	; (8004098 <TIM_Base_SetConfig+0xe0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <TIM_Base_SetConfig+0x82>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <TIM_Base_SetConfig+0xe4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00f      	beq.n	800403a <TIM_Base_SetConfig+0x82>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x82>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <TIM_Base_SetConfig+0xe8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x82>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <TIM_Base_SetConfig+0xec>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x82>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <TIM_Base_SetConfig+0xf0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <TIM_Base_SetConfig+0xe0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0xc8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <TIM_Base_SetConfig+0xe4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d103      	bne.n	8004088 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40013400 	.word	0x40013400
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00

080040ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f023 0201 	bic.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 0302 	bic.w	r3, r3, #2
 80040f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a20      	ldr	r2, [pc, #128]	; (8004184 <TIM_OC1_SetConfig+0xd8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_OC1_SetConfig+0x64>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <TIM_OC1_SetConfig+0xdc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10c      	bne.n	800412a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0308 	bic.w	r3, r3, #8
 8004116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 0304 	bic.w	r3, r3, #4
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <TIM_OC1_SetConfig+0xd8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC1_SetConfig+0x8e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a14      	ldr	r2, [pc, #80]	; (8004188 <TIM_OC1_SetConfig+0xdc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d111      	bne.n	800415e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	621a      	str	r2, [r3, #32]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40013400 	.word	0x40013400

0800418c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f023 0210 	bic.w	r2, r3, #16
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0320 	bic.w	r3, r3, #32
 80041d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a21      	ldr	r2, [pc, #132]	; (800426c <TIM_OC2_SetConfig+0xe0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC2_SetConfig+0x68>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a20      	ldr	r2, [pc, #128]	; (8004270 <TIM_OC2_SetConfig+0xe4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10d      	bne.n	8004210 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <TIM_OC2_SetConfig+0xe0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC2_SetConfig+0x94>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <TIM_OC2_SetConfig+0xe4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d113      	bne.n	8004248 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40013400 	.word	0x40013400

08004274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a21      	ldr	r2, [pc, #132]	; (8004354 <TIM_OC3_SetConfig+0xe0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_OC3_SetConfig+0x66>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a20      	ldr	r2, [pc, #128]	; (8004358 <TIM_OC3_SetConfig+0xe4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10d      	bne.n	80042f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a16      	ldr	r2, [pc, #88]	; (8004354 <TIM_OC3_SetConfig+0xe0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_OC3_SetConfig+0x92>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <TIM_OC3_SetConfig+0xe4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d113      	bne.n	800432e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800430c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40013400 	.word	0x40013400

0800435c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	031b      	lsls	r3, r3, #12
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a11      	ldr	r2, [pc, #68]	; (80043fc <TIM_OC4_SetConfig+0xa0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_OC4_SetConfig+0x68>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <TIM_OC4_SetConfig+0xa4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d109      	bne.n	80043d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40013400 	.word	0x40013400

08004404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f023 030a 	bic.w	r3, r3, #10
 8004440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0210 	bic.w	r2, r3, #16
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	031b      	lsls	r3, r3, #12
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	621a      	str	r2, [r3, #32]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 0307 	orr.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	431a      	orrs	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4313      	orrs	r3, r2
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	609a      	str	r2, [r3, #8]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2201      	movs	r2, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800458c:	2302      	movs	r3, #2
 800458e:	e050      	b.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a19      	ldr	r2, [pc, #100]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e6:	d00e      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10c      	bne.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800460c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4313      	orrs	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40013400 	.word	0x40013400
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00

08004650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004668:	2302      	movs	r3, #2
 800466a:	e03d      	b.n	80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e042      	b.n	80047ae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fd fa85 	bl	8001c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2224      	movs	r2, #36	; 0x24
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004758:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd70 	bl	8005240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800476e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800477e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800478e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b08a      	sub	sp, #40	; 0x28
 80047ba:	af02      	add	r7, sp, #8
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d16d      	bne.n	80048b2 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_UART_Transmit+0x2c>
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e066      	b.n	80048b4 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2221      	movs	r2, #33	; 0x21
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f4:	f7fd fb6e 	bl	8001ed4 <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480e:	d108      	bne.n	8004822 <HAL_UART_Transmit+0x6c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e003      	b.n	800482a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800482a:	e02a      	b.n	8004882 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 faf8 	bl	8004e2c <UART_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e036      	b.n	80048b4 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800485a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	3302      	adds	r3, #2
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e007      	b.n	8004874 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3301      	adds	r3, #1
 8004872:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1cf      	bne.n	800482c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2200      	movs	r2, #0
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fac8 	bl	8004e2c <UART_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e006      	b.n	80048b4 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b0ba      	sub	sp, #232	; 0xe8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_UART_IRQHandler+0x66>
 800490e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fbd1 	bl	80050c2 <UART_Receive_IT>
      return;
 8004920:	e25b      	b.n	8004dda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80de 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x22c>
 800492c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80d1 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <HAL_UART_IRQHandler+0xae>
 8004952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_UART_IRQHandler+0xd2>
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f043 0202 	orr.w	r2, r3, #2
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <HAL_UART_IRQHandler+0xf6>
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f043 0204 	orr.w	r2, r3, #4
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d011      	beq.n	80049e2 <HAL_UART_IRQHandler+0x126>
 80049be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f043 0208 	orr.w	r2, r3, #8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 81f2 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_UART_IRQHandler+0x14e>
 80049f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb5c 	bl	80050c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <HAL_UART_IRQHandler+0x17a>
 8004a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d04f      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa66 	bl	8004f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d041      	beq.n	8004ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3314      	adds	r3, #20
 8004a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3314      	adds	r3, #20
 8004a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1d9      	bne.n	8004a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d013      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	4a7e      	ldr	r2, [pc, #504]	; (8004c9c <HAL_UART_IRQHandler+0x3e0>)
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd fbdc 	bl	8002268 <HAL_DMA_Abort_IT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d016      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	e00e      	b.n	8004ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f99c 	bl	8004e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e00a      	b.n	8004ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f998 	bl	8004e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e006      	b.n	8004ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f994 	bl	8004e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004ae2:	e175      	b.n	8004dd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae4:	bf00      	nop
    return;
 8004ae6:	e173      	b.n	8004dd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f040 814f 	bne.w	8004d90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8148 	beq.w	8004d90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8141 	beq.w	8004d90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80b6 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8145 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b52:	429a      	cmp	r2, r3
 8004b54:	f080 813e 	bcs.w	8004dd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	f000 8088 	beq.w	8004c7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b98:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1d9      	bne.n	8004b6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bdc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004be0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004be4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e1      	bne.n	8004bb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3314      	adds	r3, #20
 8004c14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e3      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4c:	f023 0310 	bic.w	r3, r3, #16
 8004c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	330c      	adds	r3, #12
 8004c5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e3      	bne.n	8004c3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd faba 	bl	80021f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8bf 	bl	8004e16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c98:	e09c      	b.n	8004dd4 <HAL_UART_IRQHandler+0x518>
 8004c9a:	bf00      	nop
 8004c9c:	08004fcd 	.word	0x08004fcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 808e 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8089 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cea:	647a      	str	r2, [r7, #68]	; 0x44
 8004cec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e3      	bne.n	8004cc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3314      	adds	r3, #20
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d22:	633a      	str	r2, [r7, #48]	; 0x30
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e3      	bne.n	8004cfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0310 	bic.w	r3, r3, #16
 8004d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d68:	61fa      	str	r2, [r7, #28]
 8004d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	69b9      	ldr	r1, [r7, #24]
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	617b      	str	r3, [r7, #20]
   return(result);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e3      	bne.n	8004d44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f844 	bl	8004e16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d8e:	e023      	b.n	8004dd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <HAL_UART_IRQHandler+0x4f4>
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f923 	bl	8004ff4 <UART_Transmit_IT>
    return;
 8004dae:	e014      	b.n	8004dda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00e      	beq.n	8004dda <HAL_UART_IRQHandler+0x51e>
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f962 	bl	8005092 <UART_EndTransmit_IT>
    return;
 8004dce:	e004      	b.n	8004dda <HAL_UART_IRQHandler+0x51e>
    return;
 8004dd0:	bf00      	nop
 8004dd2:	e002      	b.n	8004dda <HAL_UART_IRQHandler+0x51e>
      return;
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <HAL_UART_IRQHandler+0x51e>
      return;
 8004dd8:	bf00      	nop
  }
}
 8004dda:	37e8      	adds	r7, #232	; 0xe8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b090      	sub	sp, #64	; 0x40
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3c:	e050      	b.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d04c      	beq.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e4c:	f7fd f842 	bl	8001ed4 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d241      	bcs.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e7c:	637a      	str	r2, [r7, #52]	; 0x34
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3314      	adds	r3, #20
 8004e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb0:	623a      	str	r2, [r7, #32]
 8004eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	69f9      	ldr	r1, [r7, #28]
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e5      	bne.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e00f      	b.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d09f      	beq.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3740      	adds	r7, #64	; 0x40
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b095      	sub	sp, #84	; 0x54
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f30:	643a      	str	r2, [r7, #64]	; 0x40
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d119      	bne.n	8004fb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f023 0310 	bic.w	r3, r3, #16
 8004f96:	647b      	str	r3, [r7, #68]	; 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fa0:	61ba      	str	r2, [r7, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6979      	ldr	r1, [r7, #20]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	613b      	str	r3, [r7, #16]
   return(result);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e5      	bne.n	8004f80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fc2:	bf00      	nop
 8004fc4:	3754      	adds	r7, #84	; 0x54
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ff0c 	bl	8004e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b21      	cmp	r3, #33	; 0x21
 8005006:	d13e      	bne.n	8005086 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005010:	d114      	bne.n	800503c <UART_Transmit_IT+0x48>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d110      	bne.n	800503c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	1c9a      	adds	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]
 800503a:	e008      	b.n	800504e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	1c59      	adds	r1, r3, #1
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6211      	str	r1, [r2, #32]
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29b      	uxth	r3, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4619      	mov	r1, r3
 800505c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005070:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005080:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr

08005092 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fe94 	bl	8004de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b08c      	sub	sp, #48	; 0x30
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b22      	cmp	r3, #34	; 0x22
 80050d4:	f040 80ae 	bne.w	8005234 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e0:	d117      	bne.n	8005112 <UART_Receive_IT+0x50>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d113      	bne.n	8005112 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005100:	b29a      	uxth	r2, r3
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	1c9a      	adds	r2, r3, #2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
 8005110:	e026      	b.n	8005160 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d007      	beq.n	8005136 <UART_Receive_IT+0x74>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <UART_Receive_IT+0x82>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e008      	b.n	8005156 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005150:	b2da      	uxtb	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29b      	uxth	r3, r3
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4619      	mov	r1, r3
 800516e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005170:	2b00      	cmp	r3, #0
 8005172:	d15d      	bne.n	8005230 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0220 	bic.w	r2, r2, #32
 8005182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d135      	bne.n	8005226 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	613b      	str	r3, [r7, #16]
   return(result);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 0310 	bic.w	r3, r3, #16
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	623a      	str	r2, [r7, #32]
 80051e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	69f9      	ldr	r1, [r7, #28]
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d10a      	bne.n	8005218 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fdf9 	bl	8004e16 <HAL_UARTEx_RxEventCallback>
 8005224:	e002      	b.n	800522c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fde3 	bl	8004df2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e002      	b.n	8005236 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	e000      	b.n	8005236 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005234:	2302      	movs	r3, #2
  }
}
 8005236:	4618      	mov	r0, r3
 8005238:	3730      	adds	r7, #48	; 0x30
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800527a:	f023 030c 	bic.w	r3, r3, #12
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	430b      	orrs	r3, r1
 8005286:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a2c      	ldr	r2, [pc, #176]	; (8005354 <UART_SetConfig+0x114>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d103      	bne.n	80052b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052a8:	f7fe f8ac 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	e002      	b.n	80052b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe f894 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 80052b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009a      	lsls	r2, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	4a22      	ldr	r2, [pc, #136]	; (8005358 <UART_SetConfig+0x118>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	0119      	lsls	r1, r3, #4
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009a      	lsls	r2, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <UART_SetConfig+0x118>)
 80052ee:	fba3 0302 	umull	r0, r3, r3, r2
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	2064      	movs	r0, #100	; 0x64
 80052f6:	fb00 f303 	mul.w	r3, r0, r3
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	3332      	adds	r3, #50	; 0x32
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <UART_SetConfig+0x118>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530c:	4419      	add	r1, r3
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009a      	lsls	r2, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	fbb2 f2f3 	udiv	r2, r2, r3
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <UART_SetConfig+0x118>)
 8005326:	fba3 0302 	umull	r0, r3, r3, r2
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	2064      	movs	r0, #100	; 0x64
 800532e:	fb00 f303 	mul.w	r3, r0, r3
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	3332      	adds	r3, #50	; 0x32
 8005338:	4a07      	ldr	r2, [pc, #28]	; (8005358 <UART_SetConfig+0x118>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	f003 020f 	and.w	r2, r3, #15
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	440a      	add	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40013800 	.word	0x40013800
 8005358:	51eb851f 	.word	0x51eb851f

0800535c <__cvt>:
 800535c:	2b00      	cmp	r3, #0
 800535e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005362:	461f      	mov	r7, r3
 8005364:	bfbb      	ittet	lt
 8005366:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800536a:	461f      	movlt	r7, r3
 800536c:	2300      	movge	r3, #0
 800536e:	232d      	movlt	r3, #45	; 0x2d
 8005370:	b088      	sub	sp, #32
 8005372:	4614      	mov	r4, r2
 8005374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005376:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005378:	7013      	strb	r3, [r2, #0]
 800537a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800537c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005380:	f023 0820 	bic.w	r8, r3, #32
 8005384:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005388:	d005      	beq.n	8005396 <__cvt+0x3a>
 800538a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800538e:	d100      	bne.n	8005392 <__cvt+0x36>
 8005390:	3501      	adds	r5, #1
 8005392:	2302      	movs	r3, #2
 8005394:	e000      	b.n	8005398 <__cvt+0x3c>
 8005396:	2303      	movs	r3, #3
 8005398:	aa07      	add	r2, sp, #28
 800539a:	9204      	str	r2, [sp, #16]
 800539c:	aa06      	add	r2, sp, #24
 800539e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80053a2:	e9cd 3500 	strd	r3, r5, [sp]
 80053a6:	4622      	mov	r2, r4
 80053a8:	463b      	mov	r3, r7
 80053aa:	f001 f891 	bl	80064d0 <_dtoa_r>
 80053ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053b2:	4606      	mov	r6, r0
 80053b4:	d102      	bne.n	80053bc <__cvt+0x60>
 80053b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053b8:	07db      	lsls	r3, r3, #31
 80053ba:	d522      	bpl.n	8005402 <__cvt+0xa6>
 80053bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053c0:	eb06 0905 	add.w	r9, r6, r5
 80053c4:	d110      	bne.n	80053e8 <__cvt+0x8c>
 80053c6:	7833      	ldrb	r3, [r6, #0]
 80053c8:	2b30      	cmp	r3, #48	; 0x30
 80053ca:	d10a      	bne.n	80053e2 <__cvt+0x86>
 80053cc:	2200      	movs	r2, #0
 80053ce:	2300      	movs	r3, #0
 80053d0:	4620      	mov	r0, r4
 80053d2:	4639      	mov	r1, r7
 80053d4:	f7fb fc08 	bl	8000be8 <__aeabi_dcmpeq>
 80053d8:	b918      	cbnz	r0, 80053e2 <__cvt+0x86>
 80053da:	f1c5 0501 	rsb	r5, r5, #1
 80053de:	f8ca 5000 	str.w	r5, [sl]
 80053e2:	f8da 3000 	ldr.w	r3, [sl]
 80053e6:	4499      	add	r9, r3
 80053e8:	2200      	movs	r2, #0
 80053ea:	2300      	movs	r3, #0
 80053ec:	4620      	mov	r0, r4
 80053ee:	4639      	mov	r1, r7
 80053f0:	f7fb fbfa 	bl	8000be8 <__aeabi_dcmpeq>
 80053f4:	b108      	cbz	r0, 80053fa <__cvt+0x9e>
 80053f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80053fa:	2230      	movs	r2, #48	; 0x30
 80053fc:	9b07      	ldr	r3, [sp, #28]
 80053fe:	454b      	cmp	r3, r9
 8005400:	d307      	bcc.n	8005412 <__cvt+0xb6>
 8005402:	4630      	mov	r0, r6
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005408:	1b9b      	subs	r3, r3, r6
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	b008      	add	sp, #32
 800540e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	9107      	str	r1, [sp, #28]
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	e7f0      	b.n	80053fc <__cvt+0xa0>

0800541a <__exponent>:
 800541a:	4603      	mov	r3, r0
 800541c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800541e:	2900      	cmp	r1, #0
 8005420:	f803 2b02 	strb.w	r2, [r3], #2
 8005424:	bfb6      	itet	lt
 8005426:	222d      	movlt	r2, #45	; 0x2d
 8005428:	222b      	movge	r2, #43	; 0x2b
 800542a:	4249      	neglt	r1, r1
 800542c:	2909      	cmp	r1, #9
 800542e:	7042      	strb	r2, [r0, #1]
 8005430:	dd2a      	ble.n	8005488 <__exponent+0x6e>
 8005432:	f10d 0207 	add.w	r2, sp, #7
 8005436:	4617      	mov	r7, r2
 8005438:	260a      	movs	r6, #10
 800543a:	fb91 f5f6 	sdiv	r5, r1, r6
 800543e:	4694      	mov	ip, r2
 8005440:	fb06 1415 	mls	r4, r6, r5, r1
 8005444:	3430      	adds	r4, #48	; 0x30
 8005446:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800544a:	460c      	mov	r4, r1
 800544c:	2c63      	cmp	r4, #99	; 0x63
 800544e:	4629      	mov	r1, r5
 8005450:	f102 32ff 	add.w	r2, r2, #4294967295
 8005454:	dcf1      	bgt.n	800543a <__exponent+0x20>
 8005456:	3130      	adds	r1, #48	; 0x30
 8005458:	f1ac 0402 	sub.w	r4, ip, #2
 800545c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005460:	4622      	mov	r2, r4
 8005462:	1c41      	adds	r1, r0, #1
 8005464:	42ba      	cmp	r2, r7
 8005466:	d30a      	bcc.n	800547e <__exponent+0x64>
 8005468:	f10d 0209 	add.w	r2, sp, #9
 800546c:	eba2 020c 	sub.w	r2, r2, ip
 8005470:	42bc      	cmp	r4, r7
 8005472:	bf88      	it	hi
 8005474:	2200      	movhi	r2, #0
 8005476:	4413      	add	r3, r2
 8005478:	1a18      	subs	r0, r3, r0
 800547a:	b003      	add	sp, #12
 800547c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800547e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005482:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005486:	e7ed      	b.n	8005464 <__exponent+0x4a>
 8005488:	2330      	movs	r3, #48	; 0x30
 800548a:	3130      	adds	r1, #48	; 0x30
 800548c:	7083      	strb	r3, [r0, #2]
 800548e:	70c1      	strb	r1, [r0, #3]
 8005490:	1d03      	adds	r3, r0, #4
 8005492:	e7f1      	b.n	8005478 <__exponent+0x5e>

08005494 <_printf_float>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	b091      	sub	sp, #68	; 0x44
 800549a:	460c      	mov	r4, r1
 800549c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80054a0:	4616      	mov	r6, r2
 80054a2:	461f      	mov	r7, r3
 80054a4:	4605      	mov	r5, r0
 80054a6:	f000 ff01 	bl	80062ac <_localeconv_r>
 80054aa:	6803      	ldr	r3, [r0, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	f7fa feba 	bl	8000228 <strlen>
 80054b4:	2300      	movs	r3, #0
 80054b6:	930e      	str	r3, [sp, #56]	; 0x38
 80054b8:	f8d8 3000 	ldr.w	r3, [r8]
 80054bc:	900a      	str	r0, [sp, #40]	; 0x28
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	f103 0208 	add.w	r2, r3, #8
 80054c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80054cc:	f8d4 b000 	ldr.w	fp, [r4]
 80054d0:	f8c8 2000 	str.w	r2, [r8]
 80054d4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80054d8:	4652      	mov	r2, sl
 80054da:	4643      	mov	r3, r8
 80054dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054e0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80054e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ea:	4650      	mov	r0, sl
 80054ec:	4b9c      	ldr	r3, [pc, #624]	; (8005760 <_printf_float+0x2cc>)
 80054ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054f0:	f7fb fbac 	bl	8000c4c <__aeabi_dcmpun>
 80054f4:	bb70      	cbnz	r0, 8005554 <_printf_float+0xc0>
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	4650      	mov	r0, sl
 80054fc:	4b98      	ldr	r3, [pc, #608]	; (8005760 <_printf_float+0x2cc>)
 80054fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005500:	f7fb fb86 	bl	8000c10 <__aeabi_dcmple>
 8005504:	bb30      	cbnz	r0, 8005554 <_printf_float+0xc0>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4650      	mov	r0, sl
 800550c:	4641      	mov	r1, r8
 800550e:	f7fb fb75 	bl	8000bfc <__aeabi_dcmplt>
 8005512:	b110      	cbz	r0, 800551a <_printf_float+0x86>
 8005514:	232d      	movs	r3, #45	; 0x2d
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551a:	4a92      	ldr	r2, [pc, #584]	; (8005764 <_printf_float+0x2d0>)
 800551c:	4b92      	ldr	r3, [pc, #584]	; (8005768 <_printf_float+0x2d4>)
 800551e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005522:	bf94      	ite	ls
 8005524:	4690      	movls	r8, r2
 8005526:	4698      	movhi	r8, r3
 8005528:	2303      	movs	r3, #3
 800552a:	f04f 0a00 	mov.w	sl, #0
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	f02b 0304 	bic.w	r3, fp, #4
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	4633      	mov	r3, r6
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	9700      	str	r7, [sp, #0]
 800553e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005540:	f000 f9d6 	bl	80058f0 <_printf_common>
 8005544:	3001      	adds	r0, #1
 8005546:	f040 8090 	bne.w	800566a <_printf_float+0x1d6>
 800554a:	f04f 30ff 	mov.w	r0, #4294967295
 800554e:	b011      	add	sp, #68	; 0x44
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005554:	4652      	mov	r2, sl
 8005556:	4643      	mov	r3, r8
 8005558:	4650      	mov	r0, sl
 800555a:	4641      	mov	r1, r8
 800555c:	f7fb fb76 	bl	8000c4c <__aeabi_dcmpun>
 8005560:	b148      	cbz	r0, 8005576 <_printf_float+0xe2>
 8005562:	f1b8 0f00 	cmp.w	r8, #0
 8005566:	bfb8      	it	lt
 8005568:	232d      	movlt	r3, #45	; 0x2d
 800556a:	4a80      	ldr	r2, [pc, #512]	; (800576c <_printf_float+0x2d8>)
 800556c:	bfb8      	it	lt
 800556e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005572:	4b7f      	ldr	r3, [pc, #508]	; (8005770 <_printf_float+0x2dc>)
 8005574:	e7d3      	b.n	800551e <_printf_float+0x8a>
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	d142      	bne.n	8005606 <_printf_float+0x172>
 8005580:	2306      	movs	r3, #6
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	9206      	str	r2, [sp, #24]
 8005588:	aa0e      	add	r2, sp, #56	; 0x38
 800558a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800558e:	aa0d      	add	r2, sp, #52	; 0x34
 8005590:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005594:	9203      	str	r2, [sp, #12]
 8005596:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800559a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	6863      	ldr	r3, [r4, #4]
 80055a2:	4652      	mov	r2, sl
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4628      	mov	r0, r5
 80055a8:	4643      	mov	r3, r8
 80055aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80055ac:	f7ff fed6 	bl	800535c <__cvt>
 80055b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055b2:	4680      	mov	r8, r0
 80055b4:	2947      	cmp	r1, #71	; 0x47
 80055b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055b8:	d108      	bne.n	80055cc <_printf_float+0x138>
 80055ba:	1cc8      	adds	r0, r1, #3
 80055bc:	db02      	blt.n	80055c4 <_printf_float+0x130>
 80055be:	6863      	ldr	r3, [r4, #4]
 80055c0:	4299      	cmp	r1, r3
 80055c2:	dd40      	ble.n	8005646 <_printf_float+0x1b2>
 80055c4:	f1a9 0902 	sub.w	r9, r9, #2
 80055c8:	fa5f f989 	uxtb.w	r9, r9
 80055cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055d0:	d81f      	bhi.n	8005612 <_printf_float+0x17e>
 80055d2:	464a      	mov	r2, r9
 80055d4:	3901      	subs	r1, #1
 80055d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055da:	910d      	str	r1, [sp, #52]	; 0x34
 80055dc:	f7ff ff1d 	bl	800541a <__exponent>
 80055e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e2:	4682      	mov	sl, r0
 80055e4:	1813      	adds	r3, r2, r0
 80055e6:	2a01      	cmp	r2, #1
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	dc02      	bgt.n	80055f2 <_printf_float+0x15e>
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	07d2      	lsls	r2, r2, #31
 80055f0:	d501      	bpl.n	80055f6 <_printf_float+0x162>
 80055f2:	3301      	adds	r3, #1
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d09b      	beq.n	8005536 <_printf_float+0xa2>
 80055fe:	232d      	movs	r3, #45	; 0x2d
 8005600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005604:	e797      	b.n	8005536 <_printf_float+0xa2>
 8005606:	2947      	cmp	r1, #71	; 0x47
 8005608:	d1bc      	bne.n	8005584 <_printf_float+0xf0>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ba      	bne.n	8005584 <_printf_float+0xf0>
 800560e:	2301      	movs	r3, #1
 8005610:	e7b7      	b.n	8005582 <_printf_float+0xee>
 8005612:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005616:	d118      	bne.n	800564a <_printf_float+0x1b6>
 8005618:	2900      	cmp	r1, #0
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	dd0b      	ble.n	8005636 <_printf_float+0x1a2>
 800561e:	6121      	str	r1, [r4, #16]
 8005620:	b913      	cbnz	r3, 8005628 <_printf_float+0x194>
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	07d0      	lsls	r0, r2, #31
 8005626:	d502      	bpl.n	800562e <_printf_float+0x19a>
 8005628:	3301      	adds	r3, #1
 800562a:	440b      	add	r3, r1
 800562c:	6123      	str	r3, [r4, #16]
 800562e:	f04f 0a00 	mov.w	sl, #0
 8005632:	65a1      	str	r1, [r4, #88]	; 0x58
 8005634:	e7df      	b.n	80055f6 <_printf_float+0x162>
 8005636:	b913      	cbnz	r3, 800563e <_printf_float+0x1aa>
 8005638:	6822      	ldr	r2, [r4, #0]
 800563a:	07d2      	lsls	r2, r2, #31
 800563c:	d501      	bpl.n	8005642 <_printf_float+0x1ae>
 800563e:	3302      	adds	r3, #2
 8005640:	e7f4      	b.n	800562c <_printf_float+0x198>
 8005642:	2301      	movs	r3, #1
 8005644:	e7f2      	b.n	800562c <_printf_float+0x198>
 8005646:	f04f 0967 	mov.w	r9, #103	; 0x67
 800564a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564c:	4299      	cmp	r1, r3
 800564e:	db05      	blt.n	800565c <_printf_float+0x1c8>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	6121      	str	r1, [r4, #16]
 8005654:	07d8      	lsls	r0, r3, #31
 8005656:	d5ea      	bpl.n	800562e <_printf_float+0x19a>
 8005658:	1c4b      	adds	r3, r1, #1
 800565a:	e7e7      	b.n	800562c <_printf_float+0x198>
 800565c:	2900      	cmp	r1, #0
 800565e:	bfcc      	ite	gt
 8005660:	2201      	movgt	r2, #1
 8005662:	f1c1 0202 	rsble	r2, r1, #2
 8005666:	4413      	add	r3, r2
 8005668:	e7e0      	b.n	800562c <_printf_float+0x198>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	055a      	lsls	r2, r3, #21
 800566e:	d407      	bmi.n	8005680 <_printf_float+0x1ec>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	4642      	mov	r2, r8
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	d12b      	bne.n	80056d6 <_printf_float+0x242>
 800567e:	e764      	b.n	800554a <_printf_float+0xb6>
 8005680:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005684:	f240 80dd 	bls.w	8005842 <_printf_float+0x3ae>
 8005688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800568c:	2200      	movs	r2, #0
 800568e:	2300      	movs	r3, #0
 8005690:	f7fb faaa 	bl	8000be8 <__aeabi_dcmpeq>
 8005694:	2800      	cmp	r0, #0
 8005696:	d033      	beq.n	8005700 <_printf_float+0x26c>
 8005698:	2301      	movs	r3, #1
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	4a35      	ldr	r2, [pc, #212]	; (8005774 <_printf_float+0x2e0>)
 80056a0:	47b8      	blx	r7
 80056a2:	3001      	adds	r0, #1
 80056a4:	f43f af51 	beq.w	800554a <_printf_float+0xb6>
 80056a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056ac:	429a      	cmp	r2, r3
 80056ae:	db02      	blt.n	80056b6 <_printf_float+0x222>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	07d8      	lsls	r0, r3, #31
 80056b4:	d50f      	bpl.n	80056d6 <_printf_float+0x242>
 80056b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	f43f af42 	beq.w	800554a <_printf_float+0xb6>
 80056c6:	f04f 0800 	mov.w	r8, #0
 80056ca:	f104 091a 	add.w	r9, r4, #26
 80056ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4543      	cmp	r3, r8
 80056d4:	dc09      	bgt.n	80056ea <_printf_float+0x256>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	079b      	lsls	r3, r3, #30
 80056da:	f100 8104 	bmi.w	80058e6 <_printf_float+0x452>
 80056de:	68e0      	ldr	r0, [r4, #12]
 80056e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056e2:	4298      	cmp	r0, r3
 80056e4:	bfb8      	it	lt
 80056e6:	4618      	movlt	r0, r3
 80056e8:	e731      	b.n	800554e <_printf_float+0xba>
 80056ea:	2301      	movs	r3, #1
 80056ec:	464a      	mov	r2, r9
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	f43f af28 	beq.w	800554a <_printf_float+0xb6>
 80056fa:	f108 0801 	add.w	r8, r8, #1
 80056fe:	e7e6      	b.n	80056ce <_printf_float+0x23a>
 8005700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005702:	2b00      	cmp	r3, #0
 8005704:	dc38      	bgt.n	8005778 <_printf_float+0x2e4>
 8005706:	2301      	movs	r3, #1
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <_printf_float+0x2e0>)
 800570e:	47b8      	blx	r7
 8005710:	3001      	adds	r0, #1
 8005712:	f43f af1a 	beq.w	800554a <_printf_float+0xb6>
 8005716:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800571a:	4313      	orrs	r3, r2
 800571c:	d102      	bne.n	8005724 <_printf_float+0x290>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	07d9      	lsls	r1, r3, #31
 8005722:	d5d8      	bpl.n	80056d6 <_printf_float+0x242>
 8005724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f af0b 	beq.w	800554a <_printf_float+0xb6>
 8005734:	f04f 0900 	mov.w	r9, #0
 8005738:	f104 0a1a 	add.w	sl, r4, #26
 800573c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800573e:	425b      	negs	r3, r3
 8005740:	454b      	cmp	r3, r9
 8005742:	dc01      	bgt.n	8005748 <_printf_float+0x2b4>
 8005744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005746:	e794      	b.n	8005672 <_printf_float+0x1de>
 8005748:	2301      	movs	r3, #1
 800574a:	4652      	mov	r2, sl
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f aef9 	beq.w	800554a <_printf_float+0xb6>
 8005758:	f109 0901 	add.w	r9, r9, #1
 800575c:	e7ee      	b.n	800573c <_printf_float+0x2a8>
 800575e:	bf00      	nop
 8005760:	7fefffff 	.word	0x7fefffff
 8005764:	08009b2a 	.word	0x08009b2a
 8005768:	08009b2e 	.word	0x08009b2e
 800576c:	08009b32 	.word	0x08009b32
 8005770:	08009b36 	.word	0x08009b36
 8005774:	08009b3a 	.word	0x08009b3a
 8005778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800577a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800577c:	429a      	cmp	r2, r3
 800577e:	bfa8      	it	ge
 8005780:	461a      	movge	r2, r3
 8005782:	2a00      	cmp	r2, #0
 8005784:	4691      	mov	r9, r2
 8005786:	dc37      	bgt.n	80057f8 <_printf_float+0x364>
 8005788:	f04f 0b00 	mov.w	fp, #0
 800578c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005790:	f104 021a 	add.w	r2, r4, #26
 8005794:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005798:	ebaa 0309 	sub.w	r3, sl, r9
 800579c:	455b      	cmp	r3, fp
 800579e:	dc33      	bgt.n	8005808 <_printf_float+0x374>
 80057a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057a4:	429a      	cmp	r2, r3
 80057a6:	db3b      	blt.n	8005820 <_printf_float+0x38c>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07da      	lsls	r2, r3, #31
 80057ac:	d438      	bmi.n	8005820 <_printf_float+0x38c>
 80057ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80057b2:	eba2 0903 	sub.w	r9, r2, r3
 80057b6:	eba2 020a 	sub.w	r2, r2, sl
 80057ba:	4591      	cmp	r9, r2
 80057bc:	bfa8      	it	ge
 80057be:	4691      	movge	r9, r2
 80057c0:	f1b9 0f00 	cmp.w	r9, #0
 80057c4:	dc34      	bgt.n	8005830 <_printf_float+0x39c>
 80057c6:	f04f 0800 	mov.w	r8, #0
 80057ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ce:	f104 0a1a 	add.w	sl, r4, #26
 80057d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	eba3 0309 	sub.w	r3, r3, r9
 80057dc:	4543      	cmp	r3, r8
 80057de:	f77f af7a 	ble.w	80056d6 <_printf_float+0x242>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4652      	mov	r2, sl
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f aeac 	beq.w	800554a <_printf_float+0xb6>
 80057f2:	f108 0801 	add.w	r8, r8, #1
 80057f6:	e7ec      	b.n	80057d2 <_printf_float+0x33e>
 80057f8:	4613      	mov	r3, r2
 80057fa:	4631      	mov	r1, r6
 80057fc:	4642      	mov	r2, r8
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	d1c0      	bne.n	8005788 <_printf_float+0x2f4>
 8005806:	e6a0      	b.n	800554a <_printf_float+0xb6>
 8005808:	2301      	movs	r3, #1
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f ae99 	beq.w	800554a <_printf_float+0xb6>
 8005818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800581a:	f10b 0b01 	add.w	fp, fp, #1
 800581e:	e7b9      	b.n	8005794 <_printf_float+0x300>
 8005820:	4631      	mov	r1, r6
 8005822:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005826:	4628      	mov	r0, r5
 8005828:	47b8      	blx	r7
 800582a:	3001      	adds	r0, #1
 800582c:	d1bf      	bne.n	80057ae <_printf_float+0x31a>
 800582e:	e68c      	b.n	800554a <_printf_float+0xb6>
 8005830:	464b      	mov	r3, r9
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	eb08 020a 	add.w	r2, r8, sl
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	d1c2      	bne.n	80057c6 <_printf_float+0x332>
 8005840:	e683      	b.n	800554a <_printf_float+0xb6>
 8005842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005844:	2a01      	cmp	r2, #1
 8005846:	dc01      	bgt.n	800584c <_printf_float+0x3b8>
 8005848:	07db      	lsls	r3, r3, #31
 800584a:	d539      	bpl.n	80058c0 <_printf_float+0x42c>
 800584c:	2301      	movs	r3, #1
 800584e:	4642      	mov	r2, r8
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f ae77 	beq.w	800554a <_printf_float+0xb6>
 800585c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	f43f ae6f 	beq.w	800554a <_printf_float+0xb6>
 800586c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005878:	f7fb f9b6 	bl	8000be8 <__aeabi_dcmpeq>
 800587c:	b9d8      	cbnz	r0, 80058b6 <_printf_float+0x422>
 800587e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005882:	f108 0201 	add.w	r2, r8, #1
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	d10e      	bne.n	80058ae <_printf_float+0x41a>
 8005890:	e65b      	b.n	800554a <_printf_float+0xb6>
 8005892:	2301      	movs	r3, #1
 8005894:	464a      	mov	r2, r9
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f ae54 	beq.w	800554a <_printf_float+0xb6>
 80058a2:	f108 0801 	add.w	r8, r8, #1
 80058a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a8:	3b01      	subs	r3, #1
 80058aa:	4543      	cmp	r3, r8
 80058ac:	dcf1      	bgt.n	8005892 <_printf_float+0x3fe>
 80058ae:	4653      	mov	r3, sl
 80058b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058b4:	e6de      	b.n	8005674 <_printf_float+0x1e0>
 80058b6:	f04f 0800 	mov.w	r8, #0
 80058ba:	f104 091a 	add.w	r9, r4, #26
 80058be:	e7f2      	b.n	80058a6 <_printf_float+0x412>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4642      	mov	r2, r8
 80058c4:	e7df      	b.n	8005886 <_printf_float+0x3f2>
 80058c6:	2301      	movs	r3, #1
 80058c8:	464a      	mov	r2, r9
 80058ca:	4631      	mov	r1, r6
 80058cc:	4628      	mov	r0, r5
 80058ce:	47b8      	blx	r7
 80058d0:	3001      	adds	r0, #1
 80058d2:	f43f ae3a 	beq.w	800554a <_printf_float+0xb6>
 80058d6:	f108 0801 	add.w	r8, r8, #1
 80058da:	68e3      	ldr	r3, [r4, #12]
 80058dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058de:	1a5b      	subs	r3, r3, r1
 80058e0:	4543      	cmp	r3, r8
 80058e2:	dcf0      	bgt.n	80058c6 <_printf_float+0x432>
 80058e4:	e6fb      	b.n	80056de <_printf_float+0x24a>
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	f104 0919 	add.w	r9, r4, #25
 80058ee:	e7f4      	b.n	80058da <_printf_float+0x446>

080058f0 <_printf_common>:
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	4616      	mov	r6, r2
 80058f6:	4699      	mov	r9, r3
 80058f8:	688a      	ldr	r2, [r1, #8]
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	4607      	mov	r7, r0
 80058fe:	4293      	cmp	r3, r2
 8005900:	bfb8      	it	lt
 8005902:	4613      	movlt	r3, r2
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800590a:	460c      	mov	r4, r1
 800590c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005910:	b10a      	cbz	r2, 8005916 <_printf_common+0x26>
 8005912:	3301      	adds	r3, #1
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	0699      	lsls	r1, r3, #26
 800591a:	bf42      	ittt	mi
 800591c:	6833      	ldrmi	r3, [r6, #0]
 800591e:	3302      	addmi	r3, #2
 8005920:	6033      	strmi	r3, [r6, #0]
 8005922:	6825      	ldr	r5, [r4, #0]
 8005924:	f015 0506 	ands.w	r5, r5, #6
 8005928:	d106      	bne.n	8005938 <_printf_common+0x48>
 800592a:	f104 0a19 	add.w	sl, r4, #25
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	6832      	ldr	r2, [r6, #0]
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	42ab      	cmp	r3, r5
 8005936:	dc2b      	bgt.n	8005990 <_printf_common+0xa0>
 8005938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800593c:	1e13      	subs	r3, r2, #0
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	bf18      	it	ne
 8005942:	2301      	movne	r3, #1
 8005944:	0692      	lsls	r2, r2, #26
 8005946:	d430      	bmi.n	80059aa <_printf_common+0xba>
 8005948:	4649      	mov	r1, r9
 800594a:	4638      	mov	r0, r7
 800594c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005950:	47c0      	blx	r8
 8005952:	3001      	adds	r0, #1
 8005954:	d023      	beq.n	800599e <_printf_common+0xae>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	f003 0306 	and.w	r3, r3, #6
 800595e:	2b04      	cmp	r3, #4
 8005960:	bf14      	ite	ne
 8005962:	2500      	movne	r5, #0
 8005964:	6833      	ldreq	r3, [r6, #0]
 8005966:	f04f 0600 	mov.w	r6, #0
 800596a:	bf08      	it	eq
 800596c:	68e5      	ldreq	r5, [r4, #12]
 800596e:	f104 041a 	add.w	r4, r4, #26
 8005972:	bf08      	it	eq
 8005974:	1aed      	subeq	r5, r5, r3
 8005976:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800597a:	bf08      	it	eq
 800597c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005980:	4293      	cmp	r3, r2
 8005982:	bfc4      	itt	gt
 8005984:	1a9b      	subgt	r3, r3, r2
 8005986:	18ed      	addgt	r5, r5, r3
 8005988:	42b5      	cmp	r5, r6
 800598a:	d11a      	bne.n	80059c2 <_printf_common+0xd2>
 800598c:	2000      	movs	r0, #0
 800598e:	e008      	b.n	80059a2 <_printf_common+0xb2>
 8005990:	2301      	movs	r3, #1
 8005992:	4652      	mov	r2, sl
 8005994:	4649      	mov	r1, r9
 8005996:	4638      	mov	r0, r7
 8005998:	47c0      	blx	r8
 800599a:	3001      	adds	r0, #1
 800599c:	d103      	bne.n	80059a6 <_printf_common+0xb6>
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	3501      	adds	r5, #1
 80059a8:	e7c1      	b.n	800592e <_printf_common+0x3e>
 80059aa:	2030      	movs	r0, #48	; 0x30
 80059ac:	18e1      	adds	r1, r4, r3
 80059ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059b8:	4422      	add	r2, r4
 80059ba:	3302      	adds	r3, #2
 80059bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059c0:	e7c2      	b.n	8005948 <_printf_common+0x58>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4622      	mov	r2, r4
 80059c6:	4649      	mov	r1, r9
 80059c8:	4638      	mov	r0, r7
 80059ca:	47c0      	blx	r8
 80059cc:	3001      	adds	r0, #1
 80059ce:	d0e6      	beq.n	800599e <_printf_common+0xae>
 80059d0:	3601      	adds	r6, #1
 80059d2:	e7d9      	b.n	8005988 <_printf_common+0x98>

080059d4 <_printf_i>:
 80059d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	7e0f      	ldrb	r7, [r1, #24]
 80059da:	4691      	mov	r9, r2
 80059dc:	2f78      	cmp	r7, #120	; 0x78
 80059de:	4680      	mov	r8, r0
 80059e0:	460c      	mov	r4, r1
 80059e2:	469a      	mov	sl, r3
 80059e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ea:	d807      	bhi.n	80059fc <_printf_i+0x28>
 80059ec:	2f62      	cmp	r7, #98	; 0x62
 80059ee:	d80a      	bhi.n	8005a06 <_printf_i+0x32>
 80059f0:	2f00      	cmp	r7, #0
 80059f2:	f000 80d5 	beq.w	8005ba0 <_printf_i+0x1cc>
 80059f6:	2f58      	cmp	r7, #88	; 0x58
 80059f8:	f000 80c1 	beq.w	8005b7e <_printf_i+0x1aa>
 80059fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a04:	e03a      	b.n	8005a7c <_printf_i+0xa8>
 8005a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a0a:	2b15      	cmp	r3, #21
 8005a0c:	d8f6      	bhi.n	80059fc <_printf_i+0x28>
 8005a0e:	a101      	add	r1, pc, #4	; (adr r1, 8005a14 <_printf_i+0x40>)
 8005a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	080059fd 	.word	0x080059fd
 8005a20:	080059fd 	.word	0x080059fd
 8005a24:	080059fd 	.word	0x080059fd
 8005a28:	080059fd 	.word	0x080059fd
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	080059fd 	.word	0x080059fd
 8005a34:	080059fd 	.word	0x080059fd
 8005a38:	080059fd 	.word	0x080059fd
 8005a3c:	080059fd 	.word	0x080059fd
 8005a40:	08005b87 	.word	0x08005b87
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005b41 	.word	0x08005b41
 8005a4c:	080059fd 	.word	0x080059fd
 8005a50:	080059fd 	.word	0x080059fd
 8005a54:	08005ba9 	.word	0x08005ba9
 8005a58:	080059fd 	.word	0x080059fd
 8005a5c:	08005aad 	.word	0x08005aad
 8005a60:	080059fd 	.word	0x080059fd
 8005a64:	080059fd 	.word	0x080059fd
 8005a68:	08005b49 	.word	0x08005b49
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	602a      	str	r2, [r5, #0]
 8005a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0a0      	b.n	8005bc2 <_printf_i+0x1ee>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	682b      	ldr	r3, [r5, #0]
 8005a84:	0607      	lsls	r7, r0, #24
 8005a86:	f103 0104 	add.w	r1, r3, #4
 8005a8a:	6029      	str	r1, [r5, #0]
 8005a8c:	d501      	bpl.n	8005a92 <_printf_i+0xbe>
 8005a8e:	681e      	ldr	r6, [r3, #0]
 8005a90:	e003      	b.n	8005a9a <_printf_i+0xc6>
 8005a92:	0646      	lsls	r6, r0, #25
 8005a94:	d5fb      	bpl.n	8005a8e <_printf_i+0xba>
 8005a96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	da03      	bge.n	8005aa6 <_printf_i+0xd2>
 8005a9e:	232d      	movs	r3, #45	; 0x2d
 8005aa0:	4276      	negs	r6, r6
 8005aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa6:	230a      	movs	r3, #10
 8005aa8:	4859      	ldr	r0, [pc, #356]	; (8005c10 <_printf_i+0x23c>)
 8005aaa:	e012      	b.n	8005ad2 <_printf_i+0xfe>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	6820      	ldr	r0, [r4, #0]
 8005ab0:	1d19      	adds	r1, r3, #4
 8005ab2:	6029      	str	r1, [r5, #0]
 8005ab4:	0605      	lsls	r5, r0, #24
 8005ab6:	d501      	bpl.n	8005abc <_printf_i+0xe8>
 8005ab8:	681e      	ldr	r6, [r3, #0]
 8005aba:	e002      	b.n	8005ac2 <_printf_i+0xee>
 8005abc:	0641      	lsls	r1, r0, #25
 8005abe:	d5fb      	bpl.n	8005ab8 <_printf_i+0xe4>
 8005ac0:	881e      	ldrh	r6, [r3, #0]
 8005ac2:	2f6f      	cmp	r7, #111	; 0x6f
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2308      	moveq	r3, #8
 8005ac8:	230a      	movne	r3, #10
 8005aca:	4851      	ldr	r0, [pc, #324]	; (8005c10 <_printf_i+0x23c>)
 8005acc:	2100      	movs	r1, #0
 8005ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ad2:	6865      	ldr	r5, [r4, #4]
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	bfa8      	it	ge
 8005ad8:	6821      	ldrge	r1, [r4, #0]
 8005ada:	60a5      	str	r5, [r4, #8]
 8005adc:	bfa4      	itt	ge
 8005ade:	f021 0104 	bicge.w	r1, r1, #4
 8005ae2:	6021      	strge	r1, [r4, #0]
 8005ae4:	b90e      	cbnz	r6, 8005aea <_printf_i+0x116>
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	d04b      	beq.n	8005b82 <_printf_i+0x1ae>
 8005aea:	4615      	mov	r5, r2
 8005aec:	fbb6 f1f3 	udiv	r1, r6, r3
 8005af0:	fb03 6711 	mls	r7, r3, r1, r6
 8005af4:	5dc7      	ldrb	r7, [r0, r7]
 8005af6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005afa:	4637      	mov	r7, r6
 8005afc:	42bb      	cmp	r3, r7
 8005afe:	460e      	mov	r6, r1
 8005b00:	d9f4      	bls.n	8005aec <_printf_i+0x118>
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d10b      	bne.n	8005b1e <_printf_i+0x14a>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	07de      	lsls	r6, r3, #31
 8005b0a:	d508      	bpl.n	8005b1e <_printf_i+0x14a>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	6861      	ldr	r1, [r4, #4]
 8005b10:	4299      	cmp	r1, r3
 8005b12:	bfde      	ittt	le
 8005b14:	2330      	movle	r3, #48	; 0x30
 8005b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b1e:	1b52      	subs	r2, r2, r5
 8005b20:	6122      	str	r2, [r4, #16]
 8005b22:	464b      	mov	r3, r9
 8005b24:	4621      	mov	r1, r4
 8005b26:	4640      	mov	r0, r8
 8005b28:	f8cd a000 	str.w	sl, [sp]
 8005b2c:	aa03      	add	r2, sp, #12
 8005b2e:	f7ff fedf 	bl	80058f0 <_printf_common>
 8005b32:	3001      	adds	r0, #1
 8005b34:	d14a      	bne.n	8005bcc <_printf_i+0x1f8>
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	b004      	add	sp, #16
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	f043 0320 	orr.w	r3, r3, #32
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	2778      	movs	r7, #120	; 0x78
 8005b4a:	4832      	ldr	r0, [pc, #200]	; (8005c14 <_printf_i+0x240>)
 8005b4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	6829      	ldr	r1, [r5, #0]
 8005b54:	061f      	lsls	r7, r3, #24
 8005b56:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b5a:	d402      	bmi.n	8005b62 <_printf_i+0x18e>
 8005b5c:	065f      	lsls	r7, r3, #25
 8005b5e:	bf48      	it	mi
 8005b60:	b2b6      	uxthmi	r6, r6
 8005b62:	07df      	lsls	r7, r3, #31
 8005b64:	bf48      	it	mi
 8005b66:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6a:	6029      	str	r1, [r5, #0]
 8005b6c:	bf48      	it	mi
 8005b6e:	6023      	strmi	r3, [r4, #0]
 8005b70:	b91e      	cbnz	r6, 8005b7a <_printf_i+0x1a6>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f023 0320 	bic.w	r3, r3, #32
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	e7a6      	b.n	8005acc <_printf_i+0xf8>
 8005b7e:	4824      	ldr	r0, [pc, #144]	; (8005c10 <_printf_i+0x23c>)
 8005b80:	e7e4      	b.n	8005b4c <_printf_i+0x178>
 8005b82:	4615      	mov	r5, r2
 8005b84:	e7bd      	b.n	8005b02 <_printf_i+0x12e>
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	6826      	ldr	r6, [r4, #0]
 8005b8a:	1d18      	adds	r0, r3, #4
 8005b8c:	6961      	ldr	r1, [r4, #20]
 8005b8e:	6028      	str	r0, [r5, #0]
 8005b90:	0635      	lsls	r5, r6, #24
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	d501      	bpl.n	8005b9a <_printf_i+0x1c6>
 8005b96:	6019      	str	r1, [r3, #0]
 8005b98:	e002      	b.n	8005ba0 <_printf_i+0x1cc>
 8005b9a:	0670      	lsls	r0, r6, #25
 8005b9c:	d5fb      	bpl.n	8005b96 <_printf_i+0x1c2>
 8005b9e:	8019      	strh	r1, [r3, #0]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4615      	mov	r5, r2
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	e7bc      	b.n	8005b22 <_printf_i+0x14e>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	2100      	movs	r1, #0
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	602a      	str	r2, [r5, #0]
 8005bb0:	681d      	ldr	r5, [r3, #0]
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 fbef 	bl	8006398 <memchr>
 8005bba:	b108      	cbz	r0, 8005bc0 <_printf_i+0x1ec>
 8005bbc:	1b40      	subs	r0, r0, r5
 8005bbe:	6060      	str	r0, [r4, #4]
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bca:	e7aa      	b.n	8005b22 <_printf_i+0x14e>
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	47d0      	blx	sl
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d0ad      	beq.n	8005b36 <_printf_i+0x162>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	079b      	lsls	r3, r3, #30
 8005bde:	d413      	bmi.n	8005c08 <_printf_i+0x234>
 8005be0:	68e0      	ldr	r0, [r4, #12]
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	4298      	cmp	r0, r3
 8005be6:	bfb8      	it	lt
 8005be8:	4618      	movlt	r0, r3
 8005bea:	e7a6      	b.n	8005b3a <_printf_i+0x166>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	47d0      	blx	sl
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d09d      	beq.n	8005b36 <_printf_i+0x162>
 8005bfa:	3501      	adds	r5, #1
 8005bfc:	68e3      	ldr	r3, [r4, #12]
 8005bfe:	9903      	ldr	r1, [sp, #12]
 8005c00:	1a5b      	subs	r3, r3, r1
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	dcf2      	bgt.n	8005bec <_printf_i+0x218>
 8005c06:	e7eb      	b.n	8005be0 <_printf_i+0x20c>
 8005c08:	2500      	movs	r5, #0
 8005c0a:	f104 0619 	add.w	r6, r4, #25
 8005c0e:	e7f5      	b.n	8005bfc <_printf_i+0x228>
 8005c10:	08009b3c 	.word	0x08009b3c
 8005c14:	08009b4d 	.word	0x08009b4d

08005c18 <_scanf_float>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	9303      	str	r3, [sp, #12]
 8005c20:	688b      	ldr	r3, [r1, #8]
 8005c22:	4617      	mov	r7, r2
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c2a:	bf85      	ittet	hi
 8005c2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c30:	195b      	addhi	r3, r3, r5
 8005c32:	2300      	movls	r3, #0
 8005c34:	9302      	strhi	r3, [sp, #8]
 8005c36:	bf88      	it	hi
 8005c38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c3c:	468b      	mov	fp, r1
 8005c3e:	f04f 0500 	mov.w	r5, #0
 8005c42:	bf8c      	ite	hi
 8005c44:	608b      	strhi	r3, [r1, #8]
 8005c46:	9302      	strls	r3, [sp, #8]
 8005c48:	680b      	ldr	r3, [r1, #0]
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005c50:	f84b 3b1c 	str.w	r3, [fp], #28
 8005c54:	460c      	mov	r4, r1
 8005c56:	465e      	mov	r6, fp
 8005c58:	46aa      	mov	sl, r5
 8005c5a:	46a9      	mov	r9, r5
 8005c5c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c60:	9501      	str	r5, [sp, #4]
 8005c62:	68a2      	ldr	r2, [r4, #8]
 8005c64:	b152      	cbz	r2, 8005c7c <_scanf_float+0x64>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b4e      	cmp	r3, #78	; 0x4e
 8005c6c:	d864      	bhi.n	8005d38 <_scanf_float+0x120>
 8005c6e:	2b40      	cmp	r3, #64	; 0x40
 8005c70:	d83c      	bhi.n	8005cec <_scanf_float+0xd4>
 8005c72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005c76:	b2c8      	uxtb	r0, r1
 8005c78:	280e      	cmp	r0, #14
 8005c7a:	d93a      	bls.n	8005cf2 <_scanf_float+0xda>
 8005c7c:	f1b9 0f00 	cmp.w	r9, #0
 8005c80:	d003      	beq.n	8005c8a <_scanf_float+0x72>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c8e:	f1ba 0f01 	cmp.w	sl, #1
 8005c92:	f200 8113 	bhi.w	8005ebc <_scanf_float+0x2a4>
 8005c96:	455e      	cmp	r6, fp
 8005c98:	f200 8105 	bhi.w	8005ea6 <_scanf_float+0x28e>
 8005c9c:	2501      	movs	r5, #1
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	b007      	add	sp, #28
 8005ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005caa:	2a0d      	cmp	r2, #13
 8005cac:	d8e6      	bhi.n	8005c7c <_scanf_float+0x64>
 8005cae:	a101      	add	r1, pc, #4	; (adr r1, 8005cb4 <_scanf_float+0x9c>)
 8005cb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005cb4:	08005df3 	.word	0x08005df3
 8005cb8:	08005c7d 	.word	0x08005c7d
 8005cbc:	08005c7d 	.word	0x08005c7d
 8005cc0:	08005c7d 	.word	0x08005c7d
 8005cc4:	08005e53 	.word	0x08005e53
 8005cc8:	08005e2b 	.word	0x08005e2b
 8005ccc:	08005c7d 	.word	0x08005c7d
 8005cd0:	08005c7d 	.word	0x08005c7d
 8005cd4:	08005e01 	.word	0x08005e01
 8005cd8:	08005c7d 	.word	0x08005c7d
 8005cdc:	08005c7d 	.word	0x08005c7d
 8005ce0:	08005c7d 	.word	0x08005c7d
 8005ce4:	08005c7d 	.word	0x08005c7d
 8005ce8:	08005db9 	.word	0x08005db9
 8005cec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005cf0:	e7db      	b.n	8005caa <_scanf_float+0x92>
 8005cf2:	290e      	cmp	r1, #14
 8005cf4:	d8c2      	bhi.n	8005c7c <_scanf_float+0x64>
 8005cf6:	a001      	add	r0, pc, #4	; (adr r0, 8005cfc <_scanf_float+0xe4>)
 8005cf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005cfc:	08005dab 	.word	0x08005dab
 8005d00:	08005c7d 	.word	0x08005c7d
 8005d04:	08005dab 	.word	0x08005dab
 8005d08:	08005e3f 	.word	0x08005e3f
 8005d0c:	08005c7d 	.word	0x08005c7d
 8005d10:	08005d59 	.word	0x08005d59
 8005d14:	08005d95 	.word	0x08005d95
 8005d18:	08005d95 	.word	0x08005d95
 8005d1c:	08005d95 	.word	0x08005d95
 8005d20:	08005d95 	.word	0x08005d95
 8005d24:	08005d95 	.word	0x08005d95
 8005d28:	08005d95 	.word	0x08005d95
 8005d2c:	08005d95 	.word	0x08005d95
 8005d30:	08005d95 	.word	0x08005d95
 8005d34:	08005d95 	.word	0x08005d95
 8005d38:	2b6e      	cmp	r3, #110	; 0x6e
 8005d3a:	d809      	bhi.n	8005d50 <_scanf_float+0x138>
 8005d3c:	2b60      	cmp	r3, #96	; 0x60
 8005d3e:	d8b2      	bhi.n	8005ca6 <_scanf_float+0x8e>
 8005d40:	2b54      	cmp	r3, #84	; 0x54
 8005d42:	d077      	beq.n	8005e34 <_scanf_float+0x21c>
 8005d44:	2b59      	cmp	r3, #89	; 0x59
 8005d46:	d199      	bne.n	8005c7c <_scanf_float+0x64>
 8005d48:	2d07      	cmp	r5, #7
 8005d4a:	d197      	bne.n	8005c7c <_scanf_float+0x64>
 8005d4c:	2508      	movs	r5, #8
 8005d4e:	e029      	b.n	8005da4 <_scanf_float+0x18c>
 8005d50:	2b74      	cmp	r3, #116	; 0x74
 8005d52:	d06f      	beq.n	8005e34 <_scanf_float+0x21c>
 8005d54:	2b79      	cmp	r3, #121	; 0x79
 8005d56:	e7f6      	b.n	8005d46 <_scanf_float+0x12e>
 8005d58:	6821      	ldr	r1, [r4, #0]
 8005d5a:	05c8      	lsls	r0, r1, #23
 8005d5c:	d51a      	bpl.n	8005d94 <_scanf_float+0x17c>
 8005d5e:	9b02      	ldr	r3, [sp, #8]
 8005d60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005d64:	6021      	str	r1, [r4, #0]
 8005d66:	f109 0901 	add.w	r9, r9, #1
 8005d6a:	b11b      	cbz	r3, 8005d74 <_scanf_float+0x15c>
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	3201      	adds	r2, #1
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	60a2      	str	r2, [r4, #8]
 8005d74:	68a3      	ldr	r3, [r4, #8]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	60a3      	str	r3, [r4, #8]
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	607b      	str	r3, [r7, #4]
 8005d88:	f340 8084 	ble.w	8005e94 <_scanf_float+0x27c>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	e766      	b.n	8005c62 <_scanf_float+0x4a>
 8005d94:	eb1a 0f05 	cmn.w	sl, r5
 8005d98:	f47f af70 	bne.w	8005c7c <_scanf_float+0x64>
 8005d9c:	6822      	ldr	r2, [r4, #0]
 8005d9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005da2:	6022      	str	r2, [r4, #0]
 8005da4:	f806 3b01 	strb.w	r3, [r6], #1
 8005da8:	e7e4      	b.n	8005d74 <_scanf_float+0x15c>
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	0610      	lsls	r0, r2, #24
 8005dae:	f57f af65 	bpl.w	8005c7c <_scanf_float+0x64>
 8005db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005db6:	e7f4      	b.n	8005da2 <_scanf_float+0x18a>
 8005db8:	f1ba 0f00 	cmp.w	sl, #0
 8005dbc:	d10e      	bne.n	8005ddc <_scanf_float+0x1c4>
 8005dbe:	f1b9 0f00 	cmp.w	r9, #0
 8005dc2:	d10e      	bne.n	8005de2 <_scanf_float+0x1ca>
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005dca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005dce:	d108      	bne.n	8005de2 <_scanf_float+0x1ca>
 8005dd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005dd4:	f04f 0a01 	mov.w	sl, #1
 8005dd8:	6022      	str	r2, [r4, #0]
 8005dda:	e7e3      	b.n	8005da4 <_scanf_float+0x18c>
 8005ddc:	f1ba 0f02 	cmp.w	sl, #2
 8005de0:	d055      	beq.n	8005e8e <_scanf_float+0x276>
 8005de2:	2d01      	cmp	r5, #1
 8005de4:	d002      	beq.n	8005dec <_scanf_float+0x1d4>
 8005de6:	2d04      	cmp	r5, #4
 8005de8:	f47f af48 	bne.w	8005c7c <_scanf_float+0x64>
 8005dec:	3501      	adds	r5, #1
 8005dee:	b2ed      	uxtb	r5, r5
 8005df0:	e7d8      	b.n	8005da4 <_scanf_float+0x18c>
 8005df2:	f1ba 0f01 	cmp.w	sl, #1
 8005df6:	f47f af41 	bne.w	8005c7c <_scanf_float+0x64>
 8005dfa:	f04f 0a02 	mov.w	sl, #2
 8005dfe:	e7d1      	b.n	8005da4 <_scanf_float+0x18c>
 8005e00:	b97d      	cbnz	r5, 8005e22 <_scanf_float+0x20a>
 8005e02:	f1b9 0f00 	cmp.w	r9, #0
 8005e06:	f47f af3c 	bne.w	8005c82 <_scanf_float+0x6a>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e14:	f47f af39 	bne.w	8005c8a <_scanf_float+0x72>
 8005e18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e1c:	2501      	movs	r5, #1
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	e7c0      	b.n	8005da4 <_scanf_float+0x18c>
 8005e22:	2d03      	cmp	r5, #3
 8005e24:	d0e2      	beq.n	8005dec <_scanf_float+0x1d4>
 8005e26:	2d05      	cmp	r5, #5
 8005e28:	e7de      	b.n	8005de8 <_scanf_float+0x1d0>
 8005e2a:	2d02      	cmp	r5, #2
 8005e2c:	f47f af26 	bne.w	8005c7c <_scanf_float+0x64>
 8005e30:	2503      	movs	r5, #3
 8005e32:	e7b7      	b.n	8005da4 <_scanf_float+0x18c>
 8005e34:	2d06      	cmp	r5, #6
 8005e36:	f47f af21 	bne.w	8005c7c <_scanf_float+0x64>
 8005e3a:	2507      	movs	r5, #7
 8005e3c:	e7b2      	b.n	8005da4 <_scanf_float+0x18c>
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	0591      	lsls	r1, r2, #22
 8005e42:	f57f af1b 	bpl.w	8005c7c <_scanf_float+0x64>
 8005e46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005e4a:	6022      	str	r2, [r4, #0]
 8005e4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e50:	e7a8      	b.n	8005da4 <_scanf_float+0x18c>
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005e58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005e5c:	d006      	beq.n	8005e6c <_scanf_float+0x254>
 8005e5e:	0550      	lsls	r0, r2, #21
 8005e60:	f57f af0c 	bpl.w	8005c7c <_scanf_float+0x64>
 8005e64:	f1b9 0f00 	cmp.w	r9, #0
 8005e68:	f43f af0f 	beq.w	8005c8a <_scanf_float+0x72>
 8005e6c:	0591      	lsls	r1, r2, #22
 8005e6e:	bf58      	it	pl
 8005e70:	9901      	ldrpl	r1, [sp, #4]
 8005e72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e76:	bf58      	it	pl
 8005e78:	eba9 0101 	subpl.w	r1, r9, r1
 8005e7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005e80:	f04f 0900 	mov.w	r9, #0
 8005e84:	bf58      	it	pl
 8005e86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e8a:	6022      	str	r2, [r4, #0]
 8005e8c:	e78a      	b.n	8005da4 <_scanf_float+0x18c>
 8005e8e:	f04f 0a03 	mov.w	sl, #3
 8005e92:	e787      	b.n	8005da4 <_scanf_float+0x18c>
 8005e94:	4639      	mov	r1, r7
 8005e96:	4640      	mov	r0, r8
 8005e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e9c:	4798      	blx	r3
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f43f aedf 	beq.w	8005c62 <_scanf_float+0x4a>
 8005ea4:	e6ea      	b.n	8005c7c <_scanf_float+0x64>
 8005ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005eaa:	463a      	mov	r2, r7
 8005eac:	4640      	mov	r0, r8
 8005eae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005eb2:	4798      	blx	r3
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	e6ec      	b.n	8005c96 <_scanf_float+0x7e>
 8005ebc:	1e6b      	subs	r3, r5, #1
 8005ebe:	2b06      	cmp	r3, #6
 8005ec0:	d825      	bhi.n	8005f0e <_scanf_float+0x2f6>
 8005ec2:	2d02      	cmp	r5, #2
 8005ec4:	d836      	bhi.n	8005f34 <_scanf_float+0x31c>
 8005ec6:	455e      	cmp	r6, fp
 8005ec8:	f67f aee8 	bls.w	8005c9c <_scanf_float+0x84>
 8005ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ed0:	463a      	mov	r2, r7
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ed8:	4798      	blx	r3
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	e7f1      	b.n	8005ec6 <_scanf_float+0x2ae>
 8005ee2:	9802      	ldr	r0, [sp, #8]
 8005ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ee8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005eec:	463a      	mov	r2, r7
 8005eee:	9002      	str	r0, [sp, #8]
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4798      	blx	r3
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005efe:	fa5f fa8a 	uxtb.w	sl, sl
 8005f02:	f1ba 0f02 	cmp.w	sl, #2
 8005f06:	d1ec      	bne.n	8005ee2 <_scanf_float+0x2ca>
 8005f08:	3d03      	subs	r5, #3
 8005f0a:	b2ed      	uxtb	r5, r5
 8005f0c:	1b76      	subs	r6, r6, r5
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	05da      	lsls	r2, r3, #23
 8005f12:	d52f      	bpl.n	8005f74 <_scanf_float+0x35c>
 8005f14:	055b      	lsls	r3, r3, #21
 8005f16:	d510      	bpl.n	8005f3a <_scanf_float+0x322>
 8005f18:	455e      	cmp	r6, fp
 8005f1a:	f67f aebf 	bls.w	8005c9c <_scanf_float+0x84>
 8005f1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f22:	463a      	mov	r2, r7
 8005f24:	4640      	mov	r0, r8
 8005f26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f2a:	4798      	blx	r3
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	6123      	str	r3, [r4, #16]
 8005f32:	e7f1      	b.n	8005f18 <_scanf_float+0x300>
 8005f34:	46aa      	mov	sl, r5
 8005f36:	9602      	str	r6, [sp, #8]
 8005f38:	e7df      	b.n	8005efa <_scanf_float+0x2e2>
 8005f3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	2965      	cmp	r1, #101	; 0x65
 8005f42:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f46:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f4a:	6123      	str	r3, [r4, #16]
 8005f4c:	d00c      	beq.n	8005f68 <_scanf_float+0x350>
 8005f4e:	2945      	cmp	r1, #69	; 0x45
 8005f50:	d00a      	beq.n	8005f68 <_scanf_float+0x350>
 8005f52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f56:	463a      	mov	r2, r7
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4798      	blx	r3
 8005f5c:	6923      	ldr	r3, [r4, #16]
 8005f5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	1eb5      	subs	r5, r6, #2
 8005f66:	6123      	str	r3, [r4, #16]
 8005f68:	463a      	mov	r2, r7
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f70:	4798      	blx	r3
 8005f72:	462e      	mov	r6, r5
 8005f74:	6825      	ldr	r5, [r4, #0]
 8005f76:	f015 0510 	ands.w	r5, r5, #16
 8005f7a:	d155      	bne.n	8006028 <_scanf_float+0x410>
 8005f7c:	7035      	strb	r5, [r6, #0]
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f88:	d11d      	bne.n	8005fc6 <_scanf_float+0x3ae>
 8005f8a:	9b01      	ldr	r3, [sp, #4]
 8005f8c:	454b      	cmp	r3, r9
 8005f8e:	eba3 0209 	sub.w	r2, r3, r9
 8005f92:	d125      	bne.n	8005fe0 <_scanf_float+0x3c8>
 8005f94:	2200      	movs	r2, #0
 8005f96:	4659      	mov	r1, fp
 8005f98:	4640      	mov	r0, r8
 8005f9a:	f002 fc2d 	bl	80087f8 <_strtod_r>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	f8d4 c000 	ldr.w	ip, [r4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f01c 0f02 	tst.w	ip, #2
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	f103 0204 	add.w	r2, r3, #4
 8005fb2:	d020      	beq.n	8005ff6 <_scanf_float+0x3de>
 8005fb4:	9903      	ldr	r1, [sp, #12]
 8005fb6:	600a      	str	r2, [r1, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	e9c3 6700 	strd	r6, r7, [r3]
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60e3      	str	r3, [r4, #12]
 8005fc4:	e66b      	b.n	8005c9e <_scanf_float+0x86>
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0e3      	beq.n	8005f94 <_scanf_float+0x37c>
 8005fcc:	9905      	ldr	r1, [sp, #20]
 8005fce:	230a      	movs	r3, #10
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	f002 fc93 	bl	8008900 <_strtol_r>
 8005fda:	9b04      	ldr	r3, [sp, #16]
 8005fdc:	9e05      	ldr	r6, [sp, #20]
 8005fde:	1ac2      	subs	r2, r0, r3
 8005fe0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005fe4:	429e      	cmp	r6, r3
 8005fe6:	bf28      	it	cs
 8005fe8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005fec:	4630      	mov	r0, r6
 8005fee:	490f      	ldr	r1, [pc, #60]	; (800602c <_scanf_float+0x414>)
 8005ff0:	f000 f8d0 	bl	8006194 <siprintf>
 8005ff4:	e7ce      	b.n	8005f94 <_scanf_float+0x37c>
 8005ff6:	f01c 0f04 	tst.w	ip, #4
 8005ffa:	d1db      	bne.n	8005fb4 <_scanf_float+0x39c>
 8005ffc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006000:	f8cc 2000 	str.w	r2, [ip]
 8006004:	f8d3 8000 	ldr.w	r8, [r3]
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	f7fa fe1e 	bl	8000c4c <__aeabi_dcmpun>
 8006010:	b128      	cbz	r0, 800601e <_scanf_float+0x406>
 8006012:	4807      	ldr	r0, [pc, #28]	; (8006030 <_scanf_float+0x418>)
 8006014:	f000 f9ce 	bl	80063b4 <nanf>
 8006018:	f8c8 0000 	str.w	r0, [r8]
 800601c:	e7cf      	b.n	8005fbe <_scanf_float+0x3a6>
 800601e:	4630      	mov	r0, r6
 8006020:	4639      	mov	r1, r7
 8006022:	f7fa fe71 	bl	8000d08 <__aeabi_d2f>
 8006026:	e7f7      	b.n	8006018 <_scanf_float+0x400>
 8006028:	2500      	movs	r5, #0
 800602a:	e638      	b.n	8005c9e <_scanf_float+0x86>
 800602c:	08009b5e 	.word	0x08009b5e
 8006030:	08009ef5 	.word	0x08009ef5

08006034 <std>:
 8006034:	2300      	movs	r3, #0
 8006036:	b510      	push	{r4, lr}
 8006038:	4604      	mov	r4, r0
 800603a:	e9c0 3300 	strd	r3, r3, [r0]
 800603e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006042:	6083      	str	r3, [r0, #8]
 8006044:	8181      	strh	r1, [r0, #12]
 8006046:	6643      	str	r3, [r0, #100]	; 0x64
 8006048:	81c2      	strh	r2, [r0, #14]
 800604a:	6183      	str	r3, [r0, #24]
 800604c:	4619      	mov	r1, r3
 800604e:	2208      	movs	r2, #8
 8006050:	305c      	adds	r0, #92	; 0x5c
 8006052:	f000 f923 	bl	800629c <memset>
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <std+0x38>)
 8006058:	6224      	str	r4, [r4, #32]
 800605a:	6263      	str	r3, [r4, #36]	; 0x24
 800605c:	4b04      	ldr	r3, [pc, #16]	; (8006070 <std+0x3c>)
 800605e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006060:	4b04      	ldr	r3, [pc, #16]	; (8006074 <std+0x40>)
 8006062:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <std+0x44>)
 8006066:	6323      	str	r3, [r4, #48]	; 0x30
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	080061d5 	.word	0x080061d5
 8006070:	080061f7 	.word	0x080061f7
 8006074:	0800622f 	.word	0x0800622f
 8006078:	08006253 	.word	0x08006253

0800607c <stdio_exit_handler>:
 800607c:	4a02      	ldr	r2, [pc, #8]	; (8006088 <stdio_exit_handler+0xc>)
 800607e:	4903      	ldr	r1, [pc, #12]	; (800608c <stdio_exit_handler+0x10>)
 8006080:	4803      	ldr	r0, [pc, #12]	; (8006090 <stdio_exit_handler+0x14>)
 8006082:	f000 b869 	b.w	8006158 <_fwalk_sglue>
 8006086:	bf00      	nop
 8006088:	20000010 	.word	0x20000010
 800608c:	08008cb9 	.word	0x08008cb9
 8006090:	2000001c 	.word	0x2000001c

08006094 <cleanup_stdio>:
 8006094:	6841      	ldr	r1, [r0, #4]
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <cleanup_stdio+0x34>)
 8006098:	b510      	push	{r4, lr}
 800609a:	4299      	cmp	r1, r3
 800609c:	4604      	mov	r4, r0
 800609e:	d001      	beq.n	80060a4 <cleanup_stdio+0x10>
 80060a0:	f002 fe0a 	bl	8008cb8 <_fflush_r>
 80060a4:	68a1      	ldr	r1, [r4, #8]
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <cleanup_stdio+0x38>)
 80060a8:	4299      	cmp	r1, r3
 80060aa:	d002      	beq.n	80060b2 <cleanup_stdio+0x1e>
 80060ac:	4620      	mov	r0, r4
 80060ae:	f002 fe03 	bl	8008cb8 <_fflush_r>
 80060b2:	68e1      	ldr	r1, [r4, #12]
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <cleanup_stdio+0x3c>)
 80060b6:	4299      	cmp	r1, r3
 80060b8:	d004      	beq.n	80060c4 <cleanup_stdio+0x30>
 80060ba:	4620      	mov	r0, r4
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	f002 bdfa 	b.w	8008cb8 <_fflush_r>
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	bf00      	nop
 80060c8:	200003bc 	.word	0x200003bc
 80060cc:	20000424 	.word	0x20000424
 80060d0:	2000048c 	.word	0x2000048c

080060d4 <global_stdio_init.part.0>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <global_stdio_init.part.0+0x30>)
 80060d8:	4c0b      	ldr	r4, [pc, #44]	; (8006108 <global_stdio_init.part.0+0x34>)
 80060da:	4a0c      	ldr	r2, [pc, #48]	; (800610c <global_stdio_init.part.0+0x38>)
 80060dc:	4620      	mov	r0, r4
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	2104      	movs	r1, #4
 80060e2:	2200      	movs	r2, #0
 80060e4:	f7ff ffa6 	bl	8006034 <std>
 80060e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80060ec:	2201      	movs	r2, #1
 80060ee:	2109      	movs	r1, #9
 80060f0:	f7ff ffa0 	bl	8006034 <std>
 80060f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80060f8:	2202      	movs	r2, #2
 80060fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fe:	2112      	movs	r1, #18
 8006100:	f7ff bf98 	b.w	8006034 <std>
 8006104:	200004f4 	.word	0x200004f4
 8006108:	200003bc 	.word	0x200003bc
 800610c:	0800607d 	.word	0x0800607d

08006110 <__sfp_lock_acquire>:
 8006110:	4801      	ldr	r0, [pc, #4]	; (8006118 <__sfp_lock_acquire+0x8>)
 8006112:	f000 b93f 	b.w	8006394 <__retarget_lock_acquire_recursive>
 8006116:	bf00      	nop
 8006118:	200004fd 	.word	0x200004fd

0800611c <__sfp_lock_release>:
 800611c:	4801      	ldr	r0, [pc, #4]	; (8006124 <__sfp_lock_release+0x8>)
 800611e:	f000 b93a 	b.w	8006396 <__retarget_lock_release_recursive>
 8006122:	bf00      	nop
 8006124:	200004fd 	.word	0x200004fd

08006128 <__sinit>:
 8006128:	b510      	push	{r4, lr}
 800612a:	4604      	mov	r4, r0
 800612c:	f7ff fff0 	bl	8006110 <__sfp_lock_acquire>
 8006130:	6a23      	ldr	r3, [r4, #32]
 8006132:	b11b      	cbz	r3, 800613c <__sinit+0x14>
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f7ff bff0 	b.w	800611c <__sfp_lock_release>
 800613c:	4b04      	ldr	r3, [pc, #16]	; (8006150 <__sinit+0x28>)
 800613e:	6223      	str	r3, [r4, #32]
 8006140:	4b04      	ldr	r3, [pc, #16]	; (8006154 <__sinit+0x2c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f5      	bne.n	8006134 <__sinit+0xc>
 8006148:	f7ff ffc4 	bl	80060d4 <global_stdio_init.part.0>
 800614c:	e7f2      	b.n	8006134 <__sinit+0xc>
 800614e:	bf00      	nop
 8006150:	08006095 	.word	0x08006095
 8006154:	200004f4 	.word	0x200004f4

08006158 <_fwalk_sglue>:
 8006158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800615c:	4607      	mov	r7, r0
 800615e:	4688      	mov	r8, r1
 8006160:	4614      	mov	r4, r2
 8006162:	2600      	movs	r6, #0
 8006164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006168:	f1b9 0901 	subs.w	r9, r9, #1
 800616c:	d505      	bpl.n	800617a <_fwalk_sglue+0x22>
 800616e:	6824      	ldr	r4, [r4, #0]
 8006170:	2c00      	cmp	r4, #0
 8006172:	d1f7      	bne.n	8006164 <_fwalk_sglue+0xc>
 8006174:	4630      	mov	r0, r6
 8006176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617a:	89ab      	ldrh	r3, [r5, #12]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d907      	bls.n	8006190 <_fwalk_sglue+0x38>
 8006180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006184:	3301      	adds	r3, #1
 8006186:	d003      	beq.n	8006190 <_fwalk_sglue+0x38>
 8006188:	4629      	mov	r1, r5
 800618a:	4638      	mov	r0, r7
 800618c:	47c0      	blx	r8
 800618e:	4306      	orrs	r6, r0
 8006190:	3568      	adds	r5, #104	; 0x68
 8006192:	e7e9      	b.n	8006168 <_fwalk_sglue+0x10>

08006194 <siprintf>:
 8006194:	b40e      	push	{r1, r2, r3}
 8006196:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800619a:	b500      	push	{lr}
 800619c:	b09c      	sub	sp, #112	; 0x70
 800619e:	ab1d      	add	r3, sp, #116	; 0x74
 80061a0:	9002      	str	r0, [sp, #8]
 80061a2:	9006      	str	r0, [sp, #24]
 80061a4:	9107      	str	r1, [sp, #28]
 80061a6:	9104      	str	r1, [sp, #16]
 80061a8:	4808      	ldr	r0, [pc, #32]	; (80061cc <siprintf+0x38>)
 80061aa:	4909      	ldr	r1, [pc, #36]	; (80061d0 <siprintf+0x3c>)
 80061ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b0:	9105      	str	r1, [sp, #20]
 80061b2:	6800      	ldr	r0, [r0, #0]
 80061b4:	a902      	add	r1, sp, #8
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	f002 fbfe 	bl	80089b8 <_svfiprintf_r>
 80061bc:	2200      	movs	r2, #0
 80061be:	9b02      	ldr	r3, [sp, #8]
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	b01c      	add	sp, #112	; 0x70
 80061c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061c8:	b003      	add	sp, #12
 80061ca:	4770      	bx	lr
 80061cc:	20000068 	.word	0x20000068
 80061d0:	ffff0208 	.word	0xffff0208

080061d4 <__sread>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	460c      	mov	r4, r1
 80061d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061dc:	f000 f88c 	bl	80062f8 <_read_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	bfab      	itete	ge
 80061e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061e6:	89a3      	ldrhlt	r3, [r4, #12]
 80061e8:	181b      	addge	r3, r3, r0
 80061ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ee:	bfac      	ite	ge
 80061f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80061f2:	81a3      	strhlt	r3, [r4, #12]
 80061f4:	bd10      	pop	{r4, pc}

080061f6 <__swrite>:
 80061f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fa:	461f      	mov	r7, r3
 80061fc:	898b      	ldrh	r3, [r1, #12]
 80061fe:	4605      	mov	r5, r0
 8006200:	05db      	lsls	r3, r3, #23
 8006202:	460c      	mov	r4, r1
 8006204:	4616      	mov	r6, r2
 8006206:	d505      	bpl.n	8006214 <__swrite+0x1e>
 8006208:	2302      	movs	r3, #2
 800620a:	2200      	movs	r2, #0
 800620c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006210:	f000 f860 	bl	80062d4 <_lseek_r>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	4632      	mov	r2, r6
 8006218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800621c:	81a3      	strh	r3, [r4, #12]
 800621e:	4628      	mov	r0, r5
 8006220:	463b      	mov	r3, r7
 8006222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800622a:	f000 b877 	b.w	800631c <_write_r>

0800622e <__sseek>:
 800622e:	b510      	push	{r4, lr}
 8006230:	460c      	mov	r4, r1
 8006232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006236:	f000 f84d 	bl	80062d4 <_lseek_r>
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	bf15      	itete	ne
 8006240:	6560      	strne	r0, [r4, #84]	; 0x54
 8006242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800624a:	81a3      	strheq	r3, [r4, #12]
 800624c:	bf18      	it	ne
 800624e:	81a3      	strhne	r3, [r4, #12]
 8006250:	bd10      	pop	{r4, pc}

08006252 <__sclose>:
 8006252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006256:	f000 b82d 	b.w	80062b4 <_close_r>
	...

0800625c <_vsiprintf_r>:
 800625c:	b500      	push	{lr}
 800625e:	b09b      	sub	sp, #108	; 0x6c
 8006260:	9100      	str	r1, [sp, #0]
 8006262:	9104      	str	r1, [sp, #16]
 8006264:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006268:	9105      	str	r1, [sp, #20]
 800626a:	9102      	str	r1, [sp, #8]
 800626c:	4905      	ldr	r1, [pc, #20]	; (8006284 <_vsiprintf_r+0x28>)
 800626e:	9103      	str	r1, [sp, #12]
 8006270:	4669      	mov	r1, sp
 8006272:	f002 fba1 	bl	80089b8 <_svfiprintf_r>
 8006276:	2200      	movs	r2, #0
 8006278:	9b00      	ldr	r3, [sp, #0]
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	b01b      	add	sp, #108	; 0x6c
 800627e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006282:	bf00      	nop
 8006284:	ffff0208 	.word	0xffff0208

08006288 <vsiprintf>:
 8006288:	4613      	mov	r3, r2
 800628a:	460a      	mov	r2, r1
 800628c:	4601      	mov	r1, r0
 800628e:	4802      	ldr	r0, [pc, #8]	; (8006298 <vsiprintf+0x10>)
 8006290:	6800      	ldr	r0, [r0, #0]
 8006292:	f7ff bfe3 	b.w	800625c <_vsiprintf_r>
 8006296:	bf00      	nop
 8006298:	20000068 	.word	0x20000068

0800629c <memset>:
 800629c:	4603      	mov	r3, r0
 800629e:	4402      	add	r2, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	f803 1b01 	strb.w	r1, [r3], #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <_localeconv_r>:
 80062ac:	4800      	ldr	r0, [pc, #0]	; (80062b0 <_localeconv_r+0x4>)
 80062ae:	4770      	bx	lr
 80062b0:	2000015c 	.word	0x2000015c

080062b4 <_close_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	2300      	movs	r3, #0
 80062b8:	4d05      	ldr	r5, [pc, #20]	; (80062d0 <_close_r+0x1c>)
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fb f9f6 	bl	80016b0 <_close>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_close_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_close_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	200004f8 	.word	0x200004f8

080062d4 <_lseek_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4604      	mov	r4, r0
 80062d8:	4608      	mov	r0, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	2200      	movs	r2, #0
 80062de:	4d05      	ldr	r5, [pc, #20]	; (80062f4 <_lseek_r+0x20>)
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fb fa08 	bl	80016f8 <_lseek>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_lseek_r+0x1e>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_lseek_r+0x1e>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	200004f8 	.word	0x200004f8

080062f8 <_read_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4604      	mov	r4, r0
 80062fc:	4608      	mov	r0, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	2200      	movs	r2, #0
 8006302:	4d05      	ldr	r5, [pc, #20]	; (8006318 <_read_r+0x20>)
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fb f999 	bl	800163e <_read>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_read_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_read_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	200004f8 	.word	0x200004f8

0800631c <_write_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	2200      	movs	r2, #0
 8006326:	4d05      	ldr	r5, [pc, #20]	; (800633c <_write_r+0x20>)
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fb f9a4 	bl	8001678 <_write>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_write_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_write_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	200004f8 	.word	0x200004f8

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000068 	.word	0x20000068

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	2600      	movs	r6, #0
 8006350:	4d0c      	ldr	r5, [pc, #48]	; (8006384 <__libc_init_array+0x38>)
 8006352:	4c0d      	ldr	r4, [pc, #52]	; (8006388 <__libc_init_array+0x3c>)
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	f003 fbbe 	bl	8009adc <_init>
 8006360:	2600      	movs	r6, #0
 8006362:	4d0a      	ldr	r5, [pc, #40]	; (800638c <__libc_init_array+0x40>)
 8006364:	4c0a      	ldr	r4, [pc, #40]	; (8006390 <__libc_init_array+0x44>)
 8006366:	1b64      	subs	r4, r4, r5
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	08009f58 	.word	0x08009f58
 8006388:	08009f58 	.word	0x08009f58
 800638c:	08009f58 	.word	0x08009f58
 8006390:	08009f5c 	.word	0x08009f5c

08006394 <__retarget_lock_acquire_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_release_recursive>:
 8006396:	4770      	bx	lr

08006398 <memchr>:
 8006398:	4603      	mov	r3, r0
 800639a:	b510      	push	{r4, lr}
 800639c:	b2c9      	uxtb	r1, r1
 800639e:	4402      	add	r2, r0
 80063a0:	4293      	cmp	r3, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	d101      	bne.n	80063aa <memchr+0x12>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e003      	b.n	80063b2 <memchr+0x1a>
 80063aa:	7804      	ldrb	r4, [r0, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	428c      	cmp	r4, r1
 80063b0:	d1f6      	bne.n	80063a0 <memchr+0x8>
 80063b2:	bd10      	pop	{r4, pc}

080063b4 <nanf>:
 80063b4:	4800      	ldr	r0, [pc, #0]	; (80063b8 <nanf+0x4>)
 80063b6:	4770      	bx	lr
 80063b8:	7fc00000 	.word	0x7fc00000

080063bc <quorem>:
 80063bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	6903      	ldr	r3, [r0, #16]
 80063c2:	690c      	ldr	r4, [r1, #16]
 80063c4:	4607      	mov	r7, r0
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	db7f      	blt.n	80064ca <quorem+0x10e>
 80063ca:	3c01      	subs	r4, #1
 80063cc:	f100 0514 	add.w	r5, r0, #20
 80063d0:	f101 0814 	add.w	r8, r1, #20
 80063d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063e2:	3301      	adds	r3, #1
 80063e4:	429a      	cmp	r2, r3
 80063e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80063ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063f2:	d331      	bcc.n	8006458 <quorem+0x9c>
 80063f4:	f04f 0e00 	mov.w	lr, #0
 80063f8:	4640      	mov	r0, r8
 80063fa:	46ac      	mov	ip, r5
 80063fc:	46f2      	mov	sl, lr
 80063fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8006402:	b293      	uxth	r3, r2
 8006404:	fb06 e303 	mla	r3, r6, r3, lr
 8006408:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800640c:	0c1a      	lsrs	r2, r3, #16
 800640e:	b29b      	uxth	r3, r3
 8006410:	fb06 220e 	mla	r2, r6, lr, r2
 8006414:	ebaa 0303 	sub.w	r3, sl, r3
 8006418:	f8dc a000 	ldr.w	sl, [ip]
 800641c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006420:	fa1f fa8a 	uxth.w	sl, sl
 8006424:	4453      	add	r3, sl
 8006426:	f8dc a000 	ldr.w	sl, [ip]
 800642a:	b292      	uxth	r2, r2
 800642c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006434:	b29b      	uxth	r3, r3
 8006436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800643a:	4581      	cmp	r9, r0
 800643c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006440:	f84c 3b04 	str.w	r3, [ip], #4
 8006444:	d2db      	bcs.n	80063fe <quorem+0x42>
 8006446:	f855 300b 	ldr.w	r3, [r5, fp]
 800644a:	b92b      	cbnz	r3, 8006458 <quorem+0x9c>
 800644c:	9b01      	ldr	r3, [sp, #4]
 800644e:	3b04      	subs	r3, #4
 8006450:	429d      	cmp	r5, r3
 8006452:	461a      	mov	r2, r3
 8006454:	d32d      	bcc.n	80064b2 <quorem+0xf6>
 8006456:	613c      	str	r4, [r7, #16]
 8006458:	4638      	mov	r0, r7
 800645a:	f001 f9dd 	bl	8007818 <__mcmp>
 800645e:	2800      	cmp	r0, #0
 8006460:	db23      	blt.n	80064aa <quorem+0xee>
 8006462:	4629      	mov	r1, r5
 8006464:	2000      	movs	r0, #0
 8006466:	3601      	adds	r6, #1
 8006468:	f858 2b04 	ldr.w	r2, [r8], #4
 800646c:	f8d1 c000 	ldr.w	ip, [r1]
 8006470:	b293      	uxth	r3, r2
 8006472:	1ac3      	subs	r3, r0, r3
 8006474:	0c12      	lsrs	r2, r2, #16
 8006476:	fa1f f08c 	uxth.w	r0, ip
 800647a:	4403      	add	r3, r0
 800647c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006484:	b29b      	uxth	r3, r3
 8006486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800648a:	45c1      	cmp	r9, r8
 800648c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006490:	f841 3b04 	str.w	r3, [r1], #4
 8006494:	d2e8      	bcs.n	8006468 <quorem+0xac>
 8006496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800649a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800649e:	b922      	cbnz	r2, 80064aa <quorem+0xee>
 80064a0:	3b04      	subs	r3, #4
 80064a2:	429d      	cmp	r5, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	d30a      	bcc.n	80064be <quorem+0x102>
 80064a8:	613c      	str	r4, [r7, #16]
 80064aa:	4630      	mov	r0, r6
 80064ac:	b003      	add	sp, #12
 80064ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	3b04      	subs	r3, #4
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	d1cd      	bne.n	8006456 <quorem+0x9a>
 80064ba:	3c01      	subs	r4, #1
 80064bc:	e7c8      	b.n	8006450 <quorem+0x94>
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	3b04      	subs	r3, #4
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	d1f0      	bne.n	80064a8 <quorem+0xec>
 80064c6:	3c01      	subs	r4, #1
 80064c8:	e7eb      	b.n	80064a2 <quorem+0xe6>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e7ee      	b.n	80064ac <quorem+0xf0>
	...

080064d0 <_dtoa_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	4616      	mov	r6, r2
 80064d6:	461f      	mov	r7, r3
 80064d8:	69c4      	ldr	r4, [r0, #28]
 80064da:	b099      	sub	sp, #100	; 0x64
 80064dc:	4605      	mov	r5, r0
 80064de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80064e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80064e6:	b974      	cbnz	r4, 8006506 <_dtoa_r+0x36>
 80064e8:	2010      	movs	r0, #16
 80064ea:	f000 fe1d 	bl	8007128 <malloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	61e8      	str	r0, [r5, #28]
 80064f2:	b920      	cbnz	r0, 80064fe <_dtoa_r+0x2e>
 80064f4:	21ef      	movs	r1, #239	; 0xef
 80064f6:	4bac      	ldr	r3, [pc, #688]	; (80067a8 <_dtoa_r+0x2d8>)
 80064f8:	48ac      	ldr	r0, [pc, #688]	; (80067ac <_dtoa_r+0x2dc>)
 80064fa:	f002 fc55 	bl	8008da8 <__assert_func>
 80064fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006502:	6004      	str	r4, [r0, #0]
 8006504:	60c4      	str	r4, [r0, #12]
 8006506:	69eb      	ldr	r3, [r5, #28]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	b151      	cbz	r1, 8006522 <_dtoa_r+0x52>
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	2301      	movs	r3, #1
 8006510:	4093      	lsls	r3, r2
 8006512:	604a      	str	r2, [r1, #4]
 8006514:	608b      	str	r3, [r1, #8]
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fefa 	bl	8007310 <_Bfree>
 800651c:	2200      	movs	r2, #0
 800651e:	69eb      	ldr	r3, [r5, #28]
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	1e3b      	subs	r3, r7, #0
 8006524:	bfaf      	iteee	ge
 8006526:	2300      	movge	r3, #0
 8006528:	2201      	movlt	r2, #1
 800652a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800652e:	9305      	strlt	r3, [sp, #20]
 8006530:	bfa8      	it	ge
 8006532:	f8c8 3000 	strge.w	r3, [r8]
 8006536:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800653a:	4b9d      	ldr	r3, [pc, #628]	; (80067b0 <_dtoa_r+0x2e0>)
 800653c:	bfb8      	it	lt
 800653e:	f8c8 2000 	strlt.w	r2, [r8]
 8006542:	ea33 0309 	bics.w	r3, r3, r9
 8006546:	d119      	bne.n	800657c <_dtoa_r+0xac>
 8006548:	f242 730f 	movw	r3, #9999	; 0x270f
 800654c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006554:	4333      	orrs	r3, r6
 8006556:	f000 8589 	beq.w	800706c <_dtoa_r+0xb9c>
 800655a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800655c:	b953      	cbnz	r3, 8006574 <_dtoa_r+0xa4>
 800655e:	4b95      	ldr	r3, [pc, #596]	; (80067b4 <_dtoa_r+0x2e4>)
 8006560:	e023      	b.n	80065aa <_dtoa_r+0xda>
 8006562:	4b95      	ldr	r3, [pc, #596]	; (80067b8 <_dtoa_r+0x2e8>)
 8006564:	9303      	str	r3, [sp, #12]
 8006566:	3308      	adds	r3, #8
 8006568:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	9803      	ldr	r0, [sp, #12]
 800656e:	b019      	add	sp, #100	; 0x64
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	4b8f      	ldr	r3, [pc, #572]	; (80067b4 <_dtoa_r+0x2e4>)
 8006576:	9303      	str	r3, [sp, #12]
 8006578:	3303      	adds	r3, #3
 800657a:	e7f5      	b.n	8006568 <_dtoa_r+0x98>
 800657c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006580:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006588:	2200      	movs	r2, #0
 800658a:	2300      	movs	r3, #0
 800658c:	f7fa fb2c 	bl	8000be8 <__aeabi_dcmpeq>
 8006590:	4680      	mov	r8, r0
 8006592:	b160      	cbz	r0, 80065ae <_dtoa_r+0xde>
 8006594:	2301      	movs	r3, #1
 8006596:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8562 	beq.w	8007066 <_dtoa_r+0xb96>
 80065a2:	4b86      	ldr	r3, [pc, #536]	; (80067bc <_dtoa_r+0x2ec>)
 80065a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	9303      	str	r3, [sp, #12]
 80065ac:	e7de      	b.n	800656c <_dtoa_r+0x9c>
 80065ae:	ab16      	add	r3, sp, #88	; 0x58
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	ab17      	add	r3, sp, #92	; 0x5c
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4628      	mov	r0, r5
 80065b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065bc:	f001 fa3c 	bl	8007a38 <__d2b>
 80065c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80065c4:	4682      	mov	sl, r0
 80065c6:	2c00      	cmp	r4, #0
 80065c8:	d07e      	beq.n	80066c8 <_dtoa_r+0x1f8>
 80065ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80065d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80065dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065e0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80065e4:	4619      	mov	r1, r3
 80065e6:	2200      	movs	r2, #0
 80065e8:	4b75      	ldr	r3, [pc, #468]	; (80067c0 <_dtoa_r+0x2f0>)
 80065ea:	f7f9 fedd 	bl	80003a8 <__aeabi_dsub>
 80065ee:	a368      	add	r3, pc, #416	; (adr r3, 8006790 <_dtoa_r+0x2c0>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f7fa f890 	bl	8000718 <__aeabi_dmul>
 80065f8:	a367      	add	r3, pc, #412	; (adr r3, 8006798 <_dtoa_r+0x2c8>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f7f9 fed5 	bl	80003ac <__adddf3>
 8006602:	4606      	mov	r6, r0
 8006604:	4620      	mov	r0, r4
 8006606:	460f      	mov	r7, r1
 8006608:	f7fa f81c 	bl	8000644 <__aeabi_i2d>
 800660c:	a364      	add	r3, pc, #400	; (adr r3, 80067a0 <_dtoa_r+0x2d0>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7fa f881 	bl	8000718 <__aeabi_dmul>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	f7f9 fec5 	bl	80003ac <__adddf3>
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	f7fa fb27 	bl	8000c78 <__aeabi_d2iz>
 800662a:	2200      	movs	r2, #0
 800662c:	4683      	mov	fp, r0
 800662e:	2300      	movs	r3, #0
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	f7fa fae2 	bl	8000bfc <__aeabi_dcmplt>
 8006638:	b148      	cbz	r0, 800664e <_dtoa_r+0x17e>
 800663a:	4658      	mov	r0, fp
 800663c:	f7fa f802 	bl	8000644 <__aeabi_i2d>
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	f7fa fad0 	bl	8000be8 <__aeabi_dcmpeq>
 8006648:	b908      	cbnz	r0, 800664e <_dtoa_r+0x17e>
 800664a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800664e:	f1bb 0f16 	cmp.w	fp, #22
 8006652:	d857      	bhi.n	8006704 <_dtoa_r+0x234>
 8006654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006658:	4b5a      	ldr	r3, [pc, #360]	; (80067c4 <_dtoa_r+0x2f4>)
 800665a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7fa facb 	bl	8000bfc <__aeabi_dcmplt>
 8006666:	2800      	cmp	r0, #0
 8006668:	d04e      	beq.n	8006708 <_dtoa_r+0x238>
 800666a:	2300      	movs	r3, #0
 800666c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006670:	930f      	str	r3, [sp, #60]	; 0x3c
 8006672:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006674:	1b1b      	subs	r3, r3, r4
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	bf46      	itte	mi
 800667a:	f1c3 0901 	rsbmi	r9, r3, #1
 800667e:	2300      	movmi	r3, #0
 8006680:	f04f 0900 	movpl.w	r9, #0
 8006684:	9209      	str	r2, [sp, #36]	; 0x24
 8006686:	bf48      	it	mi
 8006688:	9309      	strmi	r3, [sp, #36]	; 0x24
 800668a:	f1bb 0f00 	cmp.w	fp, #0
 800668e:	db3d      	blt.n	800670c <_dtoa_r+0x23c>
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006696:	445b      	add	r3, fp
 8006698:	9309      	str	r3, [sp, #36]	; 0x24
 800669a:	2300      	movs	r3, #0
 800669c:	930a      	str	r3, [sp, #40]	; 0x28
 800669e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066a0:	2b09      	cmp	r3, #9
 80066a2:	d867      	bhi.n	8006774 <_dtoa_r+0x2a4>
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	bfc4      	itt	gt
 80066a8:	3b04      	subgt	r3, #4
 80066aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80066ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ae:	bfc8      	it	gt
 80066b0:	2400      	movgt	r4, #0
 80066b2:	f1a3 0302 	sub.w	r3, r3, #2
 80066b6:	bfd8      	it	le
 80066b8:	2401      	movle	r4, #1
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	f200 8086 	bhi.w	80067cc <_dtoa_r+0x2fc>
 80066c0:	e8df f003 	tbb	[pc, r3]
 80066c4:	5637392c 	.word	0x5637392c
 80066c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80066cc:	441c      	add	r4, r3
 80066ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	bfc1      	itttt	gt
 80066d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066da:	fa09 f903 	lslgt.w	r9, r9, r3
 80066de:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80066e2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80066e6:	bfd6      	itet	le
 80066e8:	f1c3 0320 	rsble	r3, r3, #32
 80066ec:	ea49 0003 	orrgt.w	r0, r9, r3
 80066f0:	fa06 f003 	lslle.w	r0, r6, r3
 80066f4:	f7f9 ff96 	bl	8000624 <__aeabi_ui2d>
 80066f8:	2201      	movs	r2, #1
 80066fa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066fe:	3c01      	subs	r4, #1
 8006700:	9213      	str	r2, [sp, #76]	; 0x4c
 8006702:	e76f      	b.n	80065e4 <_dtoa_r+0x114>
 8006704:	2301      	movs	r3, #1
 8006706:	e7b3      	b.n	8006670 <_dtoa_r+0x1a0>
 8006708:	900f      	str	r0, [sp, #60]	; 0x3c
 800670a:	e7b2      	b.n	8006672 <_dtoa_r+0x1a2>
 800670c:	f1cb 0300 	rsb	r3, fp, #0
 8006710:	930a      	str	r3, [sp, #40]	; 0x28
 8006712:	2300      	movs	r3, #0
 8006714:	eba9 090b 	sub.w	r9, r9, fp
 8006718:	930e      	str	r3, [sp, #56]	; 0x38
 800671a:	e7c0      	b.n	800669e <_dtoa_r+0x1ce>
 800671c:	2300      	movs	r3, #0
 800671e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006720:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006722:	2b00      	cmp	r3, #0
 8006724:	dc55      	bgt.n	80067d2 <_dtoa_r+0x302>
 8006726:	2301      	movs	r3, #1
 8006728:	461a      	mov	r2, r3
 800672a:	9306      	str	r3, [sp, #24]
 800672c:	9308      	str	r3, [sp, #32]
 800672e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006730:	e00b      	b.n	800674a <_dtoa_r+0x27a>
 8006732:	2301      	movs	r3, #1
 8006734:	e7f3      	b.n	800671e <_dtoa_r+0x24e>
 8006736:	2300      	movs	r3, #0
 8006738:	930b      	str	r3, [sp, #44]	; 0x2c
 800673a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800673c:	445b      	add	r3, fp
 800673e:	9306      	str	r3, [sp, #24]
 8006740:	3301      	adds	r3, #1
 8006742:	2b01      	cmp	r3, #1
 8006744:	9308      	str	r3, [sp, #32]
 8006746:	bfb8      	it	lt
 8006748:	2301      	movlt	r3, #1
 800674a:	2100      	movs	r1, #0
 800674c:	2204      	movs	r2, #4
 800674e:	69e8      	ldr	r0, [r5, #28]
 8006750:	f102 0614 	add.w	r6, r2, #20
 8006754:	429e      	cmp	r6, r3
 8006756:	d940      	bls.n	80067da <_dtoa_r+0x30a>
 8006758:	6041      	str	r1, [r0, #4]
 800675a:	4628      	mov	r0, r5
 800675c:	f000 fd98 	bl	8007290 <_Balloc>
 8006760:	9003      	str	r0, [sp, #12]
 8006762:	2800      	cmp	r0, #0
 8006764:	d13c      	bne.n	80067e0 <_dtoa_r+0x310>
 8006766:	4602      	mov	r2, r0
 8006768:	f240 11af 	movw	r1, #431	; 0x1af
 800676c:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <_dtoa_r+0x2f8>)
 800676e:	e6c3      	b.n	80064f8 <_dtoa_r+0x28>
 8006770:	2301      	movs	r3, #1
 8006772:	e7e1      	b.n	8006738 <_dtoa_r+0x268>
 8006774:	2401      	movs	r4, #1
 8006776:	2300      	movs	r3, #0
 8006778:	940b      	str	r4, [sp, #44]	; 0x2c
 800677a:	9322      	str	r3, [sp, #136]	; 0x88
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	2200      	movs	r2, #0
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	9308      	str	r3, [sp, #32]
 8006786:	2312      	movs	r3, #18
 8006788:	e7d1      	b.n	800672e <_dtoa_r+0x25e>
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w
 8006790:	636f4361 	.word	0x636f4361
 8006794:	3fd287a7 	.word	0x3fd287a7
 8006798:	8b60c8b3 	.word	0x8b60c8b3
 800679c:	3fc68a28 	.word	0x3fc68a28
 80067a0:	509f79fb 	.word	0x509f79fb
 80067a4:	3fd34413 	.word	0x3fd34413
 80067a8:	08009b70 	.word	0x08009b70
 80067ac:	08009b87 	.word	0x08009b87
 80067b0:	7ff00000 	.word	0x7ff00000
 80067b4:	08009b6c 	.word	0x08009b6c
 80067b8:	08009b63 	.word	0x08009b63
 80067bc:	08009b3b 	.word	0x08009b3b
 80067c0:	3ff80000 	.word	0x3ff80000
 80067c4:	08009c78 	.word	0x08009c78
 80067c8:	08009bdf 	.word	0x08009bdf
 80067cc:	2301      	movs	r3, #1
 80067ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d0:	e7d4      	b.n	800677c <_dtoa_r+0x2ac>
 80067d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067d4:	9306      	str	r3, [sp, #24]
 80067d6:	9308      	str	r3, [sp, #32]
 80067d8:	e7b7      	b.n	800674a <_dtoa_r+0x27a>
 80067da:	3101      	adds	r1, #1
 80067dc:	0052      	lsls	r2, r2, #1
 80067de:	e7b7      	b.n	8006750 <_dtoa_r+0x280>
 80067e0:	69eb      	ldr	r3, [r5, #28]
 80067e2:	9a03      	ldr	r2, [sp, #12]
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	9b08      	ldr	r3, [sp, #32]
 80067e8:	2b0e      	cmp	r3, #14
 80067ea:	f200 80a8 	bhi.w	800693e <_dtoa_r+0x46e>
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	f000 80a5 	beq.w	800693e <_dtoa_r+0x46e>
 80067f4:	f1bb 0f00 	cmp.w	fp, #0
 80067f8:	dd34      	ble.n	8006864 <_dtoa_r+0x394>
 80067fa:	4b9a      	ldr	r3, [pc, #616]	; (8006a64 <_dtoa_r+0x594>)
 80067fc:	f00b 020f 	and.w	r2, fp, #15
 8006800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006804:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006808:	e9d3 3400 	ldrd	r3, r4, [r3]
 800680c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006810:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006814:	d016      	beq.n	8006844 <_dtoa_r+0x374>
 8006816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800681a:	4b93      	ldr	r3, [pc, #588]	; (8006a68 <_dtoa_r+0x598>)
 800681c:	2703      	movs	r7, #3
 800681e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006822:	f7fa f8a3 	bl	800096c <__aeabi_ddiv>
 8006826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800682a:	f004 040f 	and.w	r4, r4, #15
 800682e:	4e8e      	ldr	r6, [pc, #568]	; (8006a68 <_dtoa_r+0x598>)
 8006830:	b954      	cbnz	r4, 8006848 <_dtoa_r+0x378>
 8006832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800683a:	f7fa f897 	bl	800096c <__aeabi_ddiv>
 800683e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006842:	e029      	b.n	8006898 <_dtoa_r+0x3c8>
 8006844:	2702      	movs	r7, #2
 8006846:	e7f2      	b.n	800682e <_dtoa_r+0x35e>
 8006848:	07e1      	lsls	r1, r4, #31
 800684a:	d508      	bpl.n	800685e <_dtoa_r+0x38e>
 800684c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006850:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006854:	f7f9 ff60 	bl	8000718 <__aeabi_dmul>
 8006858:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800685c:	3701      	adds	r7, #1
 800685e:	1064      	asrs	r4, r4, #1
 8006860:	3608      	adds	r6, #8
 8006862:	e7e5      	b.n	8006830 <_dtoa_r+0x360>
 8006864:	f000 80a5 	beq.w	80069b2 <_dtoa_r+0x4e2>
 8006868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800686c:	f1cb 0400 	rsb	r4, fp, #0
 8006870:	4b7c      	ldr	r3, [pc, #496]	; (8006a64 <_dtoa_r+0x594>)
 8006872:	f004 020f 	and.w	r2, r4, #15
 8006876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f7f9 ff4b 	bl	8000718 <__aeabi_dmul>
 8006882:	2702      	movs	r7, #2
 8006884:	2300      	movs	r3, #0
 8006886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800688a:	4e77      	ldr	r6, [pc, #476]	; (8006a68 <_dtoa_r+0x598>)
 800688c:	1124      	asrs	r4, r4, #4
 800688e:	2c00      	cmp	r4, #0
 8006890:	f040 8084 	bne.w	800699c <_dtoa_r+0x4cc>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1d2      	bne.n	800683e <_dtoa_r+0x36e>
 8006898:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800689c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8087 	beq.w	80069b6 <_dtoa_r+0x4e6>
 80068a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ac:	2200      	movs	r2, #0
 80068ae:	4b6f      	ldr	r3, [pc, #444]	; (8006a6c <_dtoa_r+0x59c>)
 80068b0:	f7fa f9a4 	bl	8000bfc <__aeabi_dcmplt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d07e      	beq.n	80069b6 <_dtoa_r+0x4e6>
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d07b      	beq.n	80069b6 <_dtoa_r+0x4e6>
 80068be:	9b06      	ldr	r3, [sp, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dd38      	ble.n	8006936 <_dtoa_r+0x466>
 80068c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068c8:	2200      	movs	r2, #0
 80068ca:	4b69      	ldr	r3, [pc, #420]	; (8006a70 <_dtoa_r+0x5a0>)
 80068cc:	f7f9 ff24 	bl	8000718 <__aeabi_dmul>
 80068d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068d4:	9c06      	ldr	r4, [sp, #24]
 80068d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80068da:	3701      	adds	r7, #1
 80068dc:	4638      	mov	r0, r7
 80068de:	f7f9 feb1 	bl	8000644 <__aeabi_i2d>
 80068e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068e6:	f7f9 ff17 	bl	8000718 <__aeabi_dmul>
 80068ea:	2200      	movs	r2, #0
 80068ec:	4b61      	ldr	r3, [pc, #388]	; (8006a74 <_dtoa_r+0x5a4>)
 80068ee:	f7f9 fd5d 	bl	80003ac <__adddf3>
 80068f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80068f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068fa:	9611      	str	r6, [sp, #68]	; 0x44
 80068fc:	2c00      	cmp	r4, #0
 80068fe:	d15d      	bne.n	80069bc <_dtoa_r+0x4ec>
 8006900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006904:	2200      	movs	r2, #0
 8006906:	4b5c      	ldr	r3, [pc, #368]	; (8006a78 <_dtoa_r+0x5a8>)
 8006908:	f7f9 fd4e 	bl	80003a8 <__aeabi_dsub>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006914:	4633      	mov	r3, r6
 8006916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006918:	f7fa f98e 	bl	8000c38 <__aeabi_dcmpgt>
 800691c:	2800      	cmp	r0, #0
 800691e:	f040 8295 	bne.w	8006e4c <_dtoa_r+0x97c>
 8006922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006926:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006928:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800692c:	f7fa f966 	bl	8000bfc <__aeabi_dcmplt>
 8006930:	2800      	cmp	r0, #0
 8006932:	f040 8289 	bne.w	8006e48 <_dtoa_r+0x978>
 8006936:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800693a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800693e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006940:	2b00      	cmp	r3, #0
 8006942:	f2c0 8151 	blt.w	8006be8 <_dtoa_r+0x718>
 8006946:	f1bb 0f0e 	cmp.w	fp, #14
 800694a:	f300 814d 	bgt.w	8006be8 <_dtoa_r+0x718>
 800694e:	4b45      	ldr	r3, [pc, #276]	; (8006a64 <_dtoa_r+0x594>)
 8006950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006954:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006958:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800695c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800695e:	2b00      	cmp	r3, #0
 8006960:	f280 80da 	bge.w	8006b18 <_dtoa_r+0x648>
 8006964:	9b08      	ldr	r3, [sp, #32]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f300 80d6 	bgt.w	8006b18 <_dtoa_r+0x648>
 800696c:	f040 826b 	bne.w	8006e46 <_dtoa_r+0x976>
 8006970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006974:	2200      	movs	r2, #0
 8006976:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <_dtoa_r+0x5a8>)
 8006978:	f7f9 fece 	bl	8000718 <__aeabi_dmul>
 800697c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006980:	f7fa f950 	bl	8000c24 <__aeabi_dcmpge>
 8006984:	9c08      	ldr	r4, [sp, #32]
 8006986:	4626      	mov	r6, r4
 8006988:	2800      	cmp	r0, #0
 800698a:	f040 8241 	bne.w	8006e10 <_dtoa_r+0x940>
 800698e:	2331      	movs	r3, #49	; 0x31
 8006990:	9f03      	ldr	r7, [sp, #12]
 8006992:	f10b 0b01 	add.w	fp, fp, #1
 8006996:	f807 3b01 	strb.w	r3, [r7], #1
 800699a:	e23d      	b.n	8006e18 <_dtoa_r+0x948>
 800699c:	07e2      	lsls	r2, r4, #31
 800699e:	d505      	bpl.n	80069ac <_dtoa_r+0x4dc>
 80069a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069a4:	f7f9 feb8 	bl	8000718 <__aeabi_dmul>
 80069a8:	2301      	movs	r3, #1
 80069aa:	3701      	adds	r7, #1
 80069ac:	1064      	asrs	r4, r4, #1
 80069ae:	3608      	adds	r6, #8
 80069b0:	e76d      	b.n	800688e <_dtoa_r+0x3be>
 80069b2:	2702      	movs	r7, #2
 80069b4:	e770      	b.n	8006898 <_dtoa_r+0x3c8>
 80069b6:	46d8      	mov	r8, fp
 80069b8:	9c08      	ldr	r4, [sp, #32]
 80069ba:	e78f      	b.n	80068dc <_dtoa_r+0x40c>
 80069bc:	9903      	ldr	r1, [sp, #12]
 80069be:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <_dtoa_r+0x594>)
 80069c0:	4421      	add	r1, r4
 80069c2:	9112      	str	r1, [sp, #72]	; 0x48
 80069c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d054      	beq.n	8006a80 <_dtoa_r+0x5b0>
 80069d6:	2000      	movs	r0, #0
 80069d8:	4928      	ldr	r1, [pc, #160]	; (8006a7c <_dtoa_r+0x5ac>)
 80069da:	f7f9 ffc7 	bl	800096c <__aeabi_ddiv>
 80069de:	463b      	mov	r3, r7
 80069e0:	4632      	mov	r2, r6
 80069e2:	f7f9 fce1 	bl	80003a8 <__aeabi_dsub>
 80069e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069ea:	9f03      	ldr	r7, [sp, #12]
 80069ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f0:	f7fa f942 	bl	8000c78 <__aeabi_d2iz>
 80069f4:	4604      	mov	r4, r0
 80069f6:	f7f9 fe25 	bl	8000644 <__aeabi_i2d>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a02:	f7f9 fcd1 	bl	80003a8 <__aeabi_dsub>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	3430      	adds	r4, #48	; 0x30
 8006a0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a14:	f807 4b01 	strb.w	r4, [r7], #1
 8006a18:	f7fa f8f0 	bl	8000bfc <__aeabi_dcmplt>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d173      	bne.n	8006b08 <_dtoa_r+0x638>
 8006a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a24:	2000      	movs	r0, #0
 8006a26:	4911      	ldr	r1, [pc, #68]	; (8006a6c <_dtoa_r+0x59c>)
 8006a28:	f7f9 fcbe 	bl	80003a8 <__aeabi_dsub>
 8006a2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a30:	f7fa f8e4 	bl	8000bfc <__aeabi_dcmplt>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f040 80b6 	bne.w	8006ba6 <_dtoa_r+0x6d6>
 8006a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a3c:	429f      	cmp	r7, r3
 8006a3e:	f43f af7a 	beq.w	8006936 <_dtoa_r+0x466>
 8006a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a46:	2200      	movs	r2, #0
 8006a48:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <_dtoa_r+0x5a0>)
 8006a4a:	f7f9 fe65 	bl	8000718 <__aeabi_dmul>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <_dtoa_r+0x5a0>)
 8006a5a:	f7f9 fe5d 	bl	8000718 <__aeabi_dmul>
 8006a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a62:	e7c3      	b.n	80069ec <_dtoa_r+0x51c>
 8006a64:	08009c78 	.word	0x08009c78
 8006a68:	08009c50 	.word	0x08009c50
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	40240000 	.word	0x40240000
 8006a74:	401c0000 	.word	0x401c0000
 8006a78:	40140000 	.word	0x40140000
 8006a7c:	3fe00000 	.word	0x3fe00000
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7f9 fe48 	bl	8000718 <__aeabi_dmul>
 8006a88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a8e:	9c03      	ldr	r4, [sp, #12]
 8006a90:	9314      	str	r3, [sp, #80]	; 0x50
 8006a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a96:	f7fa f8ef 	bl	8000c78 <__aeabi_d2iz>
 8006a9a:	9015      	str	r0, [sp, #84]	; 0x54
 8006a9c:	f7f9 fdd2 	bl	8000644 <__aeabi_i2d>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa8:	f7f9 fc7e 	bl	80003a8 <__aeabi_dsub>
 8006aac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aae:	4606      	mov	r6, r0
 8006ab0:	3330      	adds	r3, #48	; 0x30
 8006ab2:	f804 3b01 	strb.w	r3, [r4], #1
 8006ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ab8:	460f      	mov	r7, r1
 8006aba:	429c      	cmp	r4, r3
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	d124      	bne.n	8006b0c <_dtoa_r+0x63c>
 8006ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ac6:	4baf      	ldr	r3, [pc, #700]	; (8006d84 <_dtoa_r+0x8b4>)
 8006ac8:	f7f9 fc70 	bl	80003ac <__adddf3>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7fa f8b0 	bl	8000c38 <__aeabi_dcmpgt>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d163      	bne.n	8006ba4 <_dtoa_r+0x6d4>
 8006adc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	49a8      	ldr	r1, [pc, #672]	; (8006d84 <_dtoa_r+0x8b4>)
 8006ae4:	f7f9 fc60 	bl	80003a8 <__aeabi_dsub>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7fa f884 	bl	8000bfc <__aeabi_dcmplt>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f43f af1e 	beq.w	8006936 <_dtoa_r+0x466>
 8006afa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006afc:	1e7b      	subs	r3, r7, #1
 8006afe:	9314      	str	r3, [sp, #80]	; 0x50
 8006b00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006b04:	2b30      	cmp	r3, #48	; 0x30
 8006b06:	d0f8      	beq.n	8006afa <_dtoa_r+0x62a>
 8006b08:	46c3      	mov	fp, r8
 8006b0a:	e03b      	b.n	8006b84 <_dtoa_r+0x6b4>
 8006b0c:	4b9e      	ldr	r3, [pc, #632]	; (8006d88 <_dtoa_r+0x8b8>)
 8006b0e:	f7f9 fe03 	bl	8000718 <__aeabi_dmul>
 8006b12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b16:	e7bc      	b.n	8006a92 <_dtoa_r+0x5c2>
 8006b18:	9f03      	ldr	r7, [sp, #12]
 8006b1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b22:	4640      	mov	r0, r8
 8006b24:	4649      	mov	r1, r9
 8006b26:	f7f9 ff21 	bl	800096c <__aeabi_ddiv>
 8006b2a:	f7fa f8a5 	bl	8000c78 <__aeabi_d2iz>
 8006b2e:	4604      	mov	r4, r0
 8006b30:	f7f9 fd88 	bl	8000644 <__aeabi_i2d>
 8006b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b38:	f7f9 fdee 	bl	8000718 <__aeabi_dmul>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4640      	mov	r0, r8
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7f9 fc30 	bl	80003a8 <__aeabi_dsub>
 8006b48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006b4c:	f807 6b01 	strb.w	r6, [r7], #1
 8006b50:	9e03      	ldr	r6, [sp, #12]
 8006b52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006b56:	1bbe      	subs	r6, r7, r6
 8006b58:	45b4      	cmp	ip, r6
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	d136      	bne.n	8006bce <_dtoa_r+0x6fe>
 8006b60:	f7f9 fc24 	bl	80003ac <__adddf3>
 8006b64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b68:	4680      	mov	r8, r0
 8006b6a:	4689      	mov	r9, r1
 8006b6c:	f7fa f864 	bl	8000c38 <__aeabi_dcmpgt>
 8006b70:	bb58      	cbnz	r0, 8006bca <_dtoa_r+0x6fa>
 8006b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7fa f835 	bl	8000be8 <__aeabi_dcmpeq>
 8006b7e:	b108      	cbz	r0, 8006b84 <_dtoa_r+0x6b4>
 8006b80:	07e3      	lsls	r3, r4, #31
 8006b82:	d422      	bmi.n	8006bca <_dtoa_r+0x6fa>
 8006b84:	4651      	mov	r1, sl
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 fbc2 	bl	8007310 <_Bfree>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b90:	703b      	strb	r3, [r7, #0]
 8006b92:	f10b 0301 	add.w	r3, fp, #1
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f43f ace6 	beq.w	800656c <_dtoa_r+0x9c>
 8006ba0:	601f      	str	r7, [r3, #0]
 8006ba2:	e4e3      	b.n	800656c <_dtoa_r+0x9c>
 8006ba4:	4627      	mov	r7, r4
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	461f      	mov	r7, r3
 8006baa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bae:	2a39      	cmp	r2, #57	; 0x39
 8006bb0:	d107      	bne.n	8006bc2 <_dtoa_r+0x6f2>
 8006bb2:	9a03      	ldr	r2, [sp, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d1f7      	bne.n	8006ba8 <_dtoa_r+0x6d8>
 8006bb8:	2230      	movs	r2, #48	; 0x30
 8006bba:	9903      	ldr	r1, [sp, #12]
 8006bbc:	f108 0801 	add.w	r8, r8, #1
 8006bc0:	700a      	strb	r2, [r1, #0]
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	e79e      	b.n	8006b08 <_dtoa_r+0x638>
 8006bca:	46d8      	mov	r8, fp
 8006bcc:	e7eb      	b.n	8006ba6 <_dtoa_r+0x6d6>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4b6d      	ldr	r3, [pc, #436]	; (8006d88 <_dtoa_r+0x8b8>)
 8006bd2:	f7f9 fda1 	bl	8000718 <__aeabi_dmul>
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4689      	mov	r9, r1
 8006bde:	f7fa f803 	bl	8000be8 <__aeabi_dcmpeq>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d09b      	beq.n	8006b1e <_dtoa_r+0x64e>
 8006be6:	e7cd      	b.n	8006b84 <_dtoa_r+0x6b4>
 8006be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	f000 80c4 	beq.w	8006d78 <_dtoa_r+0x8a8>
 8006bf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bf2:	2a01      	cmp	r2, #1
 8006bf4:	f300 80a8 	bgt.w	8006d48 <_dtoa_r+0x878>
 8006bf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	f000 80a0 	beq.w	8006d40 <_dtoa_r+0x870>
 8006c00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c04:	464f      	mov	r7, r9
 8006c06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4499      	add	r9, r3
 8006c12:	9209      	str	r2, [sp, #36]	; 0x24
 8006c14:	f000 fc7c 	bl	8007510 <__i2b>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	b15f      	cbz	r7, 8006c34 <_dtoa_r+0x764>
 8006c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dd08      	ble.n	8006c34 <_dtoa_r+0x764>
 8006c22:	42bb      	cmp	r3, r7
 8006c24:	bfa8      	it	ge
 8006c26:	463b      	movge	r3, r7
 8006c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2a:	eba9 0903 	sub.w	r9, r9, r3
 8006c2e:	1aff      	subs	r7, r7, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	9309      	str	r3, [sp, #36]	; 0x24
 8006c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c36:	b1f3      	cbz	r3, 8006c76 <_dtoa_r+0x7a6>
 8006c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80a0 	beq.w	8006d80 <_dtoa_r+0x8b0>
 8006c40:	2c00      	cmp	r4, #0
 8006c42:	dd10      	ble.n	8006c66 <_dtoa_r+0x796>
 8006c44:	4631      	mov	r1, r6
 8006c46:	4622      	mov	r2, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fd1f 	bl	800768c <__pow5mult>
 8006c4e:	4652      	mov	r2, sl
 8006c50:	4601      	mov	r1, r0
 8006c52:	4606      	mov	r6, r0
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 fc71 	bl	800753c <__multiply>
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fb56 	bl	8007310 <_Bfree>
 8006c64:	46c2      	mov	sl, r8
 8006c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c68:	1b1a      	subs	r2, r3, r4
 8006c6a:	d004      	beq.n	8006c76 <_dtoa_r+0x7a6>
 8006c6c:	4651      	mov	r1, sl
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fd0c 	bl	800768c <__pow5mult>
 8006c74:	4682      	mov	sl, r0
 8006c76:	2101      	movs	r1, #1
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 fc49 	bl	8007510 <__i2b>
 8006c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c80:	4604      	mov	r4, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f340 8082 	ble.w	8006d8c <_dtoa_r+0x8bc>
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 fcfd 	bl	800768c <__pow5mult>
 8006c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c94:	4604      	mov	r4, r0
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	dd7b      	ble.n	8006d92 <_dtoa_r+0x8c2>
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ca4:	6918      	ldr	r0, [r3, #16]
 8006ca6:	f000 fbe5 	bl	8007474 <__hi0bits>
 8006caa:	f1c0 0020 	rsb	r0, r0, #32
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	4418      	add	r0, r3
 8006cb2:	f010 001f 	ands.w	r0, r0, #31
 8006cb6:	f000 8092 	beq.w	8006dde <_dtoa_r+0x90e>
 8006cba:	f1c0 0320 	rsb	r3, r0, #32
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	f340 8085 	ble.w	8006dce <_dtoa_r+0x8fe>
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	f1c0 001c 	rsb	r0, r0, #28
 8006cca:	4403      	add	r3, r0
 8006ccc:	4481      	add	r9, r0
 8006cce:	4407      	add	r7, r0
 8006cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd2:	f1b9 0f00 	cmp.w	r9, #0
 8006cd6:	dd05      	ble.n	8006ce4 <_dtoa_r+0x814>
 8006cd8:	4651      	mov	r1, sl
 8006cda:	464a      	mov	r2, r9
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 fd2f 	bl	8007740 <__lshift>
 8006ce2:	4682      	mov	sl, r0
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dd05      	ble.n	8006cf6 <_dtoa_r+0x826>
 8006cea:	4621      	mov	r1, r4
 8006cec:	461a      	mov	r2, r3
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 fd26 	bl	8007740 <__lshift>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d072      	beq.n	8006de2 <_dtoa_r+0x912>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4650      	mov	r0, sl
 8006d00:	f000 fd8a 	bl	8007818 <__mcmp>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	da6c      	bge.n	8006de2 <_dtoa_r+0x912>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 fb20 	bl	8007354 <__multadd>
 8006d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d16:	4682      	mov	sl, r0
 8006d18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 81ac 	beq.w	800707a <_dtoa_r+0xbaa>
 8006d22:	2300      	movs	r3, #0
 8006d24:	4631      	mov	r1, r6
 8006d26:	220a      	movs	r2, #10
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 fb13 	bl	8007354 <__multadd>
 8006d2e:	9b06      	ldr	r3, [sp, #24]
 8006d30:	4606      	mov	r6, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f300 8093 	bgt.w	8006e5e <_dtoa_r+0x98e>
 8006d38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	dc59      	bgt.n	8006df2 <_dtoa_r+0x922>
 8006d3e:	e08e      	b.n	8006e5e <_dtoa_r+0x98e>
 8006d40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d46:	e75d      	b.n	8006c04 <_dtoa_r+0x734>
 8006d48:	9b08      	ldr	r3, [sp, #32]
 8006d4a:	1e5c      	subs	r4, r3, #1
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	bfbf      	itttt	lt
 8006d52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006d56:	1ae3      	sublt	r3, r4, r3
 8006d58:	18d2      	addlt	r2, r2, r3
 8006d5a:	bfa8      	it	ge
 8006d5c:	1b1c      	subge	r4, r3, r4
 8006d5e:	9b08      	ldr	r3, [sp, #32]
 8006d60:	bfbe      	ittt	lt
 8006d62:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d64:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006d66:	2400      	movlt	r4, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bfb5      	itete	lt
 8006d6c:	eba9 0703 	sublt.w	r7, r9, r3
 8006d70:	464f      	movge	r7, r9
 8006d72:	2300      	movlt	r3, #0
 8006d74:	9b08      	ldrge	r3, [sp, #32]
 8006d76:	e747      	b.n	8006c08 <_dtoa_r+0x738>
 8006d78:	464f      	mov	r7, r9
 8006d7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d7e:	e74c      	b.n	8006c1a <_dtoa_r+0x74a>
 8006d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d82:	e773      	b.n	8006c6c <_dtoa_r+0x79c>
 8006d84:	3fe00000 	.word	0x3fe00000
 8006d88:	40240000 	.word	0x40240000
 8006d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	dc18      	bgt.n	8006dc4 <_dtoa_r+0x8f4>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	b9b3      	cbnz	r3, 8006dc4 <_dtoa_r+0x8f4>
 8006d96:	9b05      	ldr	r3, [sp, #20]
 8006d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d9c:	b993      	cbnz	r3, 8006dc4 <_dtoa_r+0x8f4>
 8006d9e:	9b05      	ldr	r3, [sp, #20]
 8006da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	0d1b      	lsrs	r3, r3, #20
 8006da6:	051b      	lsls	r3, r3, #20
 8006da8:	b17b      	cbz	r3, 8006dca <_dtoa_r+0x8fa>
 8006daa:	f04f 0801 	mov.w	r8, #1
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	f109 0901 	add.w	r9, r9, #1
 8006db4:	3301      	adds	r3, #1
 8006db6:	9309      	str	r3, [sp, #36]	; 0x24
 8006db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f47f af6f 	bne.w	8006c9e <_dtoa_r+0x7ce>
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	e774      	b.n	8006cae <_dtoa_r+0x7de>
 8006dc4:	f04f 0800 	mov.w	r8, #0
 8006dc8:	e7f6      	b.n	8006db8 <_dtoa_r+0x8e8>
 8006dca:	4698      	mov	r8, r3
 8006dcc:	e7f4      	b.n	8006db8 <_dtoa_r+0x8e8>
 8006dce:	d080      	beq.n	8006cd2 <_dtoa_r+0x802>
 8006dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dd2:	331c      	adds	r3, #28
 8006dd4:	441a      	add	r2, r3
 8006dd6:	4499      	add	r9, r3
 8006dd8:	441f      	add	r7, r3
 8006dda:	9209      	str	r2, [sp, #36]	; 0x24
 8006ddc:	e779      	b.n	8006cd2 <_dtoa_r+0x802>
 8006dde:	4603      	mov	r3, r0
 8006de0:	e7f6      	b.n	8006dd0 <_dtoa_r+0x900>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dc34      	bgt.n	8006e52 <_dtoa_r+0x982>
 8006de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	dd31      	ble.n	8006e52 <_dtoa_r+0x982>
 8006dee:	9b08      	ldr	r3, [sp, #32]
 8006df0:	9306      	str	r3, [sp, #24]
 8006df2:	9b06      	ldr	r3, [sp, #24]
 8006df4:	b963      	cbnz	r3, 8006e10 <_dtoa_r+0x940>
 8006df6:	4621      	mov	r1, r4
 8006df8:	2205      	movs	r2, #5
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 faaa 	bl	8007354 <__multadd>
 8006e00:	4601      	mov	r1, r0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4650      	mov	r0, sl
 8006e06:	f000 fd07 	bl	8007818 <__mcmp>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f73f adbf 	bgt.w	800698e <_dtoa_r+0x4be>
 8006e10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e12:	9f03      	ldr	r7, [sp, #12]
 8006e14:	ea6f 0b03 	mvn.w	fp, r3
 8006e18:	f04f 0800 	mov.w	r8, #0
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 fa76 	bl	8007310 <_Bfree>
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	f43f aead 	beq.w	8006b84 <_dtoa_r+0x6b4>
 8006e2a:	f1b8 0f00 	cmp.w	r8, #0
 8006e2e:	d005      	beq.n	8006e3c <_dtoa_r+0x96c>
 8006e30:	45b0      	cmp	r8, r6
 8006e32:	d003      	beq.n	8006e3c <_dtoa_r+0x96c>
 8006e34:	4641      	mov	r1, r8
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fa6a 	bl	8007310 <_Bfree>
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 fa66 	bl	8007310 <_Bfree>
 8006e44:	e69e      	b.n	8006b84 <_dtoa_r+0x6b4>
 8006e46:	2400      	movs	r4, #0
 8006e48:	4626      	mov	r6, r4
 8006e4a:	e7e1      	b.n	8006e10 <_dtoa_r+0x940>
 8006e4c:	46c3      	mov	fp, r8
 8006e4e:	4626      	mov	r6, r4
 8006e50:	e59d      	b.n	800698e <_dtoa_r+0x4be>
 8006e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80c8 	beq.w	8006fea <_dtoa_r+0xb1a>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	9306      	str	r3, [sp, #24]
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	dd05      	ble.n	8006e6e <_dtoa_r+0x99e>
 8006e62:	4631      	mov	r1, r6
 8006e64:	463a      	mov	r2, r7
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 fc6a 	bl	8007740 <__lshift>
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	f1b8 0f00 	cmp.w	r8, #0
 8006e72:	d05b      	beq.n	8006f2c <_dtoa_r+0xa5c>
 8006e74:	4628      	mov	r0, r5
 8006e76:	6871      	ldr	r1, [r6, #4]
 8006e78:	f000 fa0a 	bl	8007290 <_Balloc>
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	b928      	cbnz	r0, 8006e8c <_dtoa_r+0x9bc>
 8006e80:	4602      	mov	r2, r0
 8006e82:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e86:	4b81      	ldr	r3, [pc, #516]	; (800708c <_dtoa_r+0xbbc>)
 8006e88:	f7ff bb36 	b.w	80064f8 <_dtoa_r+0x28>
 8006e8c:	6932      	ldr	r2, [r6, #16]
 8006e8e:	f106 010c 	add.w	r1, r6, #12
 8006e92:	3202      	adds	r2, #2
 8006e94:	0092      	lsls	r2, r2, #2
 8006e96:	300c      	adds	r0, #12
 8006e98:	f001 ff72 	bl	8008d80 <memcpy>
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 fc4d 	bl	8007740 <__lshift>
 8006ea6:	46b0      	mov	r8, r6
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	9a03      	ldr	r2, [sp, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	f7ff fa77 	bl	80063bc <quorem>
 8006ece:	4641      	mov	r1, r8
 8006ed0:	9006      	str	r0, [sp, #24]
 8006ed2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	f000 fc9e 	bl	8007818 <__mcmp>
 8006edc:	4632      	mov	r2, r6
 8006ede:	9009      	str	r0, [sp, #36]	; 0x24
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 fcb4 	bl	8007850 <__mdiff>
 8006ee8:	68c2      	ldr	r2, [r0, #12]
 8006eea:	4607      	mov	r7, r0
 8006eec:	bb02      	cbnz	r2, 8006f30 <_dtoa_r+0xa60>
 8006eee:	4601      	mov	r1, r0
 8006ef0:	4650      	mov	r0, sl
 8006ef2:	f000 fc91 	bl	8007818 <__mcmp>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	4639      	mov	r1, r7
 8006efa:	4628      	mov	r0, r5
 8006efc:	920c      	str	r2, [sp, #48]	; 0x30
 8006efe:	f000 fa07 	bl	8007310 <_Bfree>
 8006f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f06:	9f08      	ldr	r7, [sp, #32]
 8006f08:	ea43 0102 	orr.w	r1, r3, r2
 8006f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0e:	4319      	orrs	r1, r3
 8006f10:	d110      	bne.n	8006f34 <_dtoa_r+0xa64>
 8006f12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f16:	d029      	beq.n	8006f6c <_dtoa_r+0xa9c>
 8006f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dd02      	ble.n	8006f24 <_dtoa_r+0xa54>
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f24:	9b04      	ldr	r3, [sp, #16]
 8006f26:	f883 9000 	strb.w	r9, [r3]
 8006f2a:	e777      	b.n	8006e1c <_dtoa_r+0x94c>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	e7ba      	b.n	8006ea6 <_dtoa_r+0x9d6>
 8006f30:	2201      	movs	r2, #1
 8006f32:	e7e1      	b.n	8006ef8 <_dtoa_r+0xa28>
 8006f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db04      	blt.n	8006f44 <_dtoa_r+0xa74>
 8006f3a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f40:	430b      	orrs	r3, r1
 8006f42:	d120      	bne.n	8006f86 <_dtoa_r+0xab6>
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	dded      	ble.n	8006f24 <_dtoa_r+0xa54>
 8006f48:	4651      	mov	r1, sl
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 fbf7 	bl	8007740 <__lshift>
 8006f52:	4621      	mov	r1, r4
 8006f54:	4682      	mov	sl, r0
 8006f56:	f000 fc5f 	bl	8007818 <__mcmp>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	dc03      	bgt.n	8006f66 <_dtoa_r+0xa96>
 8006f5e:	d1e1      	bne.n	8006f24 <_dtoa_r+0xa54>
 8006f60:	f019 0f01 	tst.w	r9, #1
 8006f64:	d0de      	beq.n	8006f24 <_dtoa_r+0xa54>
 8006f66:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f6a:	d1d8      	bne.n	8006f1e <_dtoa_r+0xa4e>
 8006f6c:	2339      	movs	r3, #57	; 0x39
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	7013      	strb	r3, [r2, #0]
 8006f72:	463b      	mov	r3, r7
 8006f74:	461f      	mov	r7, r3
 8006f76:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2a39      	cmp	r2, #57	; 0x39
 8006f7e:	d06b      	beq.n	8007058 <_dtoa_r+0xb88>
 8006f80:	3201      	adds	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e74a      	b.n	8006e1c <_dtoa_r+0x94c>
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	dd07      	ble.n	8006f9a <_dtoa_r+0xaca>
 8006f8a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f8e:	d0ed      	beq.n	8006f6c <_dtoa_r+0xa9c>
 8006f90:	9a04      	ldr	r2, [sp, #16]
 8006f92:	f109 0301 	add.w	r3, r9, #1
 8006f96:	7013      	strb	r3, [r2, #0]
 8006f98:	e740      	b.n	8006e1c <_dtoa_r+0x94c>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f9e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d042      	beq.n	800702c <_dtoa_r+0xb5c>
 8006fa6:	4651      	mov	r1, sl
 8006fa8:	2300      	movs	r3, #0
 8006faa:	220a      	movs	r2, #10
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 f9d1 	bl	8007354 <__multadd>
 8006fb2:	45b0      	cmp	r8, r6
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	f04f 020a 	mov.w	r2, #10
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	d107      	bne.n	8006fd4 <_dtoa_r+0xb04>
 8006fc4:	f000 f9c6 	bl	8007354 <__multadd>
 8006fc8:	4680      	mov	r8, r0
 8006fca:	4606      	mov	r6, r0
 8006fcc:	9b08      	ldr	r3, [sp, #32]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	9308      	str	r3, [sp, #32]
 8006fd2:	e775      	b.n	8006ec0 <_dtoa_r+0x9f0>
 8006fd4:	f000 f9be 	bl	8007354 <__multadd>
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4680      	mov	r8, r0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	220a      	movs	r2, #10
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 f9b7 	bl	8007354 <__multadd>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	e7f0      	b.n	8006fcc <_dtoa_r+0xafc>
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	9306      	str	r3, [sp, #24]
 8006fee:	9f03      	ldr	r7, [sp, #12]
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f7ff f9e2 	bl	80063bc <quorem>
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ffe:	f807 9b01 	strb.w	r9, [r7], #1
 8007002:	1afa      	subs	r2, r7, r3
 8007004:	9b06      	ldr	r3, [sp, #24]
 8007006:	4293      	cmp	r3, r2
 8007008:	dd07      	ble.n	800701a <_dtoa_r+0xb4a>
 800700a:	4651      	mov	r1, sl
 800700c:	2300      	movs	r3, #0
 800700e:	220a      	movs	r2, #10
 8007010:	4628      	mov	r0, r5
 8007012:	f000 f99f 	bl	8007354 <__multadd>
 8007016:	4682      	mov	sl, r0
 8007018:	e7ea      	b.n	8006ff0 <_dtoa_r+0xb20>
 800701a:	9b06      	ldr	r3, [sp, #24]
 800701c:	f04f 0800 	mov.w	r8, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	bfcc      	ite	gt
 8007024:	461f      	movgt	r7, r3
 8007026:	2701      	movle	r7, #1
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	441f      	add	r7, r3
 800702c:	4651      	mov	r1, sl
 800702e:	2201      	movs	r2, #1
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fb85 	bl	8007740 <__lshift>
 8007036:	4621      	mov	r1, r4
 8007038:	4682      	mov	sl, r0
 800703a:	f000 fbed 	bl	8007818 <__mcmp>
 800703e:	2800      	cmp	r0, #0
 8007040:	dc97      	bgt.n	8006f72 <_dtoa_r+0xaa2>
 8007042:	d102      	bne.n	800704a <_dtoa_r+0xb7a>
 8007044:	f019 0f01 	tst.w	r9, #1
 8007048:	d193      	bne.n	8006f72 <_dtoa_r+0xaa2>
 800704a:	463b      	mov	r3, r7
 800704c:	461f      	mov	r7, r3
 800704e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007052:	2a30      	cmp	r2, #48	; 0x30
 8007054:	d0fa      	beq.n	800704c <_dtoa_r+0xb7c>
 8007056:	e6e1      	b.n	8006e1c <_dtoa_r+0x94c>
 8007058:	9a03      	ldr	r2, [sp, #12]
 800705a:	429a      	cmp	r2, r3
 800705c:	d18a      	bne.n	8006f74 <_dtoa_r+0xaa4>
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	f10b 0b01 	add.w	fp, fp, #1
 8007064:	e797      	b.n	8006f96 <_dtoa_r+0xac6>
 8007066:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <_dtoa_r+0xbc0>)
 8007068:	f7ff ba9f 	b.w	80065aa <_dtoa_r+0xda>
 800706c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800706e:	2b00      	cmp	r3, #0
 8007070:	f47f aa77 	bne.w	8006562 <_dtoa_r+0x92>
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <_dtoa_r+0xbc4>)
 8007076:	f7ff ba98 	b.w	80065aa <_dtoa_r+0xda>
 800707a:	9b06      	ldr	r3, [sp, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	dcb6      	bgt.n	8006fee <_dtoa_r+0xb1e>
 8007080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007082:	2b02      	cmp	r3, #2
 8007084:	f73f aeb5 	bgt.w	8006df2 <_dtoa_r+0x922>
 8007088:	e7b1      	b.n	8006fee <_dtoa_r+0xb1e>
 800708a:	bf00      	nop
 800708c:	08009bdf 	.word	0x08009bdf
 8007090:	08009b3a 	.word	0x08009b3a
 8007094:	08009b63 	.word	0x08009b63

08007098 <_free_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4605      	mov	r5, r0
 800709c:	2900      	cmp	r1, #0
 800709e:	d040      	beq.n	8007122 <_free_r+0x8a>
 80070a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a4:	1f0c      	subs	r4, r1, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bfb8      	it	lt
 80070aa:	18e4      	addlt	r4, r4, r3
 80070ac:	f000 f8e4 	bl	8007278 <__malloc_lock>
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <_free_r+0x8c>)
 80070b2:	6813      	ldr	r3, [r2, #0]
 80070b4:	b933      	cbnz	r3, 80070c4 <_free_r+0x2c>
 80070b6:	6063      	str	r3, [r4, #4]
 80070b8:	6014      	str	r4, [r2, #0]
 80070ba:	4628      	mov	r0, r5
 80070bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c0:	f000 b8e0 	b.w	8007284 <__malloc_unlock>
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	d908      	bls.n	80070da <_free_r+0x42>
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	1821      	adds	r1, r4, r0
 80070cc:	428b      	cmp	r3, r1
 80070ce:	bf01      	itttt	eq
 80070d0:	6819      	ldreq	r1, [r3, #0]
 80070d2:	685b      	ldreq	r3, [r3, #4]
 80070d4:	1809      	addeq	r1, r1, r0
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	e7ed      	b.n	80070b6 <_free_r+0x1e>
 80070da:	461a      	mov	r2, r3
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b10b      	cbz	r3, 80070e4 <_free_r+0x4c>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d9fa      	bls.n	80070da <_free_r+0x42>
 80070e4:	6811      	ldr	r1, [r2, #0]
 80070e6:	1850      	adds	r0, r2, r1
 80070e8:	42a0      	cmp	r0, r4
 80070ea:	d10b      	bne.n	8007104 <_free_r+0x6c>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	4401      	add	r1, r0
 80070f0:	1850      	adds	r0, r2, r1
 80070f2:	4283      	cmp	r3, r0
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	d1e0      	bne.n	80070ba <_free_r+0x22>
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	4408      	add	r0, r1
 80070fe:	6010      	str	r0, [r2, #0]
 8007100:	6053      	str	r3, [r2, #4]
 8007102:	e7da      	b.n	80070ba <_free_r+0x22>
 8007104:	d902      	bls.n	800710c <_free_r+0x74>
 8007106:	230c      	movs	r3, #12
 8007108:	602b      	str	r3, [r5, #0]
 800710a:	e7d6      	b.n	80070ba <_free_r+0x22>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	1821      	adds	r1, r4, r0
 8007110:	428b      	cmp	r3, r1
 8007112:	bf01      	itttt	eq
 8007114:	6819      	ldreq	r1, [r3, #0]
 8007116:	685b      	ldreq	r3, [r3, #4]
 8007118:	1809      	addeq	r1, r1, r0
 800711a:	6021      	streq	r1, [r4, #0]
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	6054      	str	r4, [r2, #4]
 8007120:	e7cb      	b.n	80070ba <_free_r+0x22>
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	20000500 	.word	0x20000500

08007128 <malloc>:
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <malloc+0xc>)
 800712a:	4601      	mov	r1, r0
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	f000 b823 	b.w	8007178 <_malloc_r>
 8007132:	bf00      	nop
 8007134:	20000068 	.word	0x20000068

08007138 <sbrk_aligned>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4e0e      	ldr	r6, [pc, #56]	; (8007174 <sbrk_aligned+0x3c>)
 800713c:	460c      	mov	r4, r1
 800713e:	6831      	ldr	r1, [r6, #0]
 8007140:	4605      	mov	r5, r0
 8007142:	b911      	cbnz	r1, 800714a <sbrk_aligned+0x12>
 8007144:	f001 fe0c 	bl	8008d60 <_sbrk_r>
 8007148:	6030      	str	r0, [r6, #0]
 800714a:	4621      	mov	r1, r4
 800714c:	4628      	mov	r0, r5
 800714e:	f001 fe07 	bl	8008d60 <_sbrk_r>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d00a      	beq.n	800716c <sbrk_aligned+0x34>
 8007156:	1cc4      	adds	r4, r0, #3
 8007158:	f024 0403 	bic.w	r4, r4, #3
 800715c:	42a0      	cmp	r0, r4
 800715e:	d007      	beq.n	8007170 <sbrk_aligned+0x38>
 8007160:	1a21      	subs	r1, r4, r0
 8007162:	4628      	mov	r0, r5
 8007164:	f001 fdfc 	bl	8008d60 <_sbrk_r>
 8007168:	3001      	adds	r0, #1
 800716a:	d101      	bne.n	8007170 <sbrk_aligned+0x38>
 800716c:	f04f 34ff 	mov.w	r4, #4294967295
 8007170:	4620      	mov	r0, r4
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	20000504 	.word	0x20000504

08007178 <_malloc_r>:
 8007178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800717c:	1ccd      	adds	r5, r1, #3
 800717e:	f025 0503 	bic.w	r5, r5, #3
 8007182:	3508      	adds	r5, #8
 8007184:	2d0c      	cmp	r5, #12
 8007186:	bf38      	it	cc
 8007188:	250c      	movcc	r5, #12
 800718a:	2d00      	cmp	r5, #0
 800718c:	4607      	mov	r7, r0
 800718e:	db01      	blt.n	8007194 <_malloc_r+0x1c>
 8007190:	42a9      	cmp	r1, r5
 8007192:	d905      	bls.n	80071a0 <_malloc_r+0x28>
 8007194:	230c      	movs	r3, #12
 8007196:	2600      	movs	r6, #0
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	4630      	mov	r0, r6
 800719c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007274 <_malloc_r+0xfc>
 80071a4:	f000 f868 	bl	8007278 <__malloc_lock>
 80071a8:	f8d8 3000 	ldr.w	r3, [r8]
 80071ac:	461c      	mov	r4, r3
 80071ae:	bb5c      	cbnz	r4, 8007208 <_malloc_r+0x90>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	f7ff ffc0 	bl	8007138 <sbrk_aligned>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	4604      	mov	r4, r0
 80071bc:	d155      	bne.n	800726a <_malloc_r+0xf2>
 80071be:	f8d8 4000 	ldr.w	r4, [r8]
 80071c2:	4626      	mov	r6, r4
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	d145      	bne.n	8007254 <_malloc_r+0xdc>
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	d048      	beq.n	800725e <_malloc_r+0xe6>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	4631      	mov	r1, r6
 80071d0:	4638      	mov	r0, r7
 80071d2:	eb04 0903 	add.w	r9, r4, r3
 80071d6:	f001 fdc3 	bl	8008d60 <_sbrk_r>
 80071da:	4581      	cmp	r9, r0
 80071dc:	d13f      	bne.n	800725e <_malloc_r+0xe6>
 80071de:	6821      	ldr	r1, [r4, #0]
 80071e0:	4638      	mov	r0, r7
 80071e2:	1a6d      	subs	r5, r5, r1
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7ff ffa7 	bl	8007138 <sbrk_aligned>
 80071ea:	3001      	adds	r0, #1
 80071ec:	d037      	beq.n	800725e <_malloc_r+0xe6>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	442b      	add	r3, r5
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	f8d8 3000 	ldr.w	r3, [r8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d038      	beq.n	800726e <_malloc_r+0xf6>
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	42a2      	cmp	r2, r4
 8007200:	d12b      	bne.n	800725a <_malloc_r+0xe2>
 8007202:	2200      	movs	r2, #0
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	e00f      	b.n	8007228 <_malloc_r+0xb0>
 8007208:	6822      	ldr	r2, [r4, #0]
 800720a:	1b52      	subs	r2, r2, r5
 800720c:	d41f      	bmi.n	800724e <_malloc_r+0xd6>
 800720e:	2a0b      	cmp	r2, #11
 8007210:	d917      	bls.n	8007242 <_malloc_r+0xca>
 8007212:	1961      	adds	r1, r4, r5
 8007214:	42a3      	cmp	r3, r4
 8007216:	6025      	str	r5, [r4, #0]
 8007218:	bf18      	it	ne
 800721a:	6059      	strne	r1, [r3, #4]
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	bf08      	it	eq
 8007220:	f8c8 1000 	streq.w	r1, [r8]
 8007224:	5162      	str	r2, [r4, r5]
 8007226:	604b      	str	r3, [r1, #4]
 8007228:	4638      	mov	r0, r7
 800722a:	f104 060b 	add.w	r6, r4, #11
 800722e:	f000 f829 	bl	8007284 <__malloc_unlock>
 8007232:	f026 0607 	bic.w	r6, r6, #7
 8007236:	1d23      	adds	r3, r4, #4
 8007238:	1af2      	subs	r2, r6, r3
 800723a:	d0ae      	beq.n	800719a <_malloc_r+0x22>
 800723c:	1b9b      	subs	r3, r3, r6
 800723e:	50a3      	str	r3, [r4, r2]
 8007240:	e7ab      	b.n	800719a <_malloc_r+0x22>
 8007242:	42a3      	cmp	r3, r4
 8007244:	6862      	ldr	r2, [r4, #4]
 8007246:	d1dd      	bne.n	8007204 <_malloc_r+0x8c>
 8007248:	f8c8 2000 	str.w	r2, [r8]
 800724c:	e7ec      	b.n	8007228 <_malloc_r+0xb0>
 800724e:	4623      	mov	r3, r4
 8007250:	6864      	ldr	r4, [r4, #4]
 8007252:	e7ac      	b.n	80071ae <_malloc_r+0x36>
 8007254:	4634      	mov	r4, r6
 8007256:	6876      	ldr	r6, [r6, #4]
 8007258:	e7b4      	b.n	80071c4 <_malloc_r+0x4c>
 800725a:	4613      	mov	r3, r2
 800725c:	e7cc      	b.n	80071f8 <_malloc_r+0x80>
 800725e:	230c      	movs	r3, #12
 8007260:	4638      	mov	r0, r7
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	f000 f80e 	bl	8007284 <__malloc_unlock>
 8007268:	e797      	b.n	800719a <_malloc_r+0x22>
 800726a:	6025      	str	r5, [r4, #0]
 800726c:	e7dc      	b.n	8007228 <_malloc_r+0xb0>
 800726e:	605b      	str	r3, [r3, #4]
 8007270:	deff      	udf	#255	; 0xff
 8007272:	bf00      	nop
 8007274:	20000500 	.word	0x20000500

08007278 <__malloc_lock>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__malloc_lock+0x8>)
 800727a:	f7ff b88b 	b.w	8006394 <__retarget_lock_acquire_recursive>
 800727e:	bf00      	nop
 8007280:	200004fc 	.word	0x200004fc

08007284 <__malloc_unlock>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__malloc_unlock+0x8>)
 8007286:	f7ff b886 	b.w	8006396 <__retarget_lock_release_recursive>
 800728a:	bf00      	nop
 800728c:	200004fc 	.word	0x200004fc

08007290 <_Balloc>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	69c6      	ldr	r6, [r0, #28]
 8007294:	4604      	mov	r4, r0
 8007296:	460d      	mov	r5, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Balloc+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff ff44 	bl	8007128 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	61e0      	str	r0, [r4, #28]
 80072a4:	b920      	cbnz	r0, 80072b0 <_Balloc+0x20>
 80072a6:	216b      	movs	r1, #107	; 0x6b
 80072a8:	4b17      	ldr	r3, [pc, #92]	; (8007308 <_Balloc+0x78>)
 80072aa:	4818      	ldr	r0, [pc, #96]	; (800730c <_Balloc+0x7c>)
 80072ac:	f001 fd7c 	bl	8008da8 <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	69e6      	ldr	r6, [r4, #28]
 80072ba:	68f3      	ldr	r3, [r6, #12]
 80072bc:	b183      	cbz	r3, 80072e0 <_Balloc+0x50>
 80072be:	69e3      	ldr	r3, [r4, #28]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072c6:	b9b8      	cbnz	r0, 80072f8 <_Balloc+0x68>
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f605 	lsl.w	r6, r1, r5
 80072ce:	1d72      	adds	r2, r6, #5
 80072d0:	4620      	mov	r0, r4
 80072d2:	0092      	lsls	r2, r2, #2
 80072d4:	f001 fd86 	bl	8008de4 <_calloc_r>
 80072d8:	b160      	cbz	r0, 80072f4 <_Balloc+0x64>
 80072da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072de:	e00e      	b.n	80072fe <_Balloc+0x6e>
 80072e0:	2221      	movs	r2, #33	; 0x21
 80072e2:	2104      	movs	r1, #4
 80072e4:	4620      	mov	r0, r4
 80072e6:	f001 fd7d 	bl	8008de4 <_calloc_r>
 80072ea:	69e3      	ldr	r3, [r4, #28]
 80072ec:	60f0      	str	r0, [r6, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e4      	bne.n	80072be <_Balloc+0x2e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	6802      	ldr	r2, [r0, #0]
 80072fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072fe:	2300      	movs	r3, #0
 8007300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007304:	e7f7      	b.n	80072f6 <_Balloc+0x66>
 8007306:	bf00      	nop
 8007308:	08009b70 	.word	0x08009b70
 800730c:	08009bf0 	.word	0x08009bf0

08007310 <_Bfree>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	69c6      	ldr	r6, [r0, #28]
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	b976      	cbnz	r6, 8007338 <_Bfree+0x28>
 800731a:	2010      	movs	r0, #16
 800731c:	f7ff ff04 	bl	8007128 <malloc>
 8007320:	4602      	mov	r2, r0
 8007322:	61e8      	str	r0, [r5, #28]
 8007324:	b920      	cbnz	r0, 8007330 <_Bfree+0x20>
 8007326:	218f      	movs	r1, #143	; 0x8f
 8007328:	4b08      	ldr	r3, [pc, #32]	; (800734c <_Bfree+0x3c>)
 800732a:	4809      	ldr	r0, [pc, #36]	; (8007350 <_Bfree+0x40>)
 800732c:	f001 fd3c 	bl	8008da8 <__assert_func>
 8007330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007334:	6006      	str	r6, [r0, #0]
 8007336:	60c6      	str	r6, [r0, #12]
 8007338:	b13c      	cbz	r4, 800734a <_Bfree+0x3a>
 800733a:	69eb      	ldr	r3, [r5, #28]
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007344:	6021      	str	r1, [r4, #0]
 8007346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	08009b70 	.word	0x08009b70
 8007350:	08009bf0 	.word	0x08009bf0

08007354 <__multadd>:
 8007354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007358:	4607      	mov	r7, r0
 800735a:	460c      	mov	r4, r1
 800735c:	461e      	mov	r6, r3
 800735e:	2000      	movs	r0, #0
 8007360:	690d      	ldr	r5, [r1, #16]
 8007362:	f101 0c14 	add.w	ip, r1, #20
 8007366:	f8dc 3000 	ldr.w	r3, [ip]
 800736a:	3001      	adds	r0, #1
 800736c:	b299      	uxth	r1, r3
 800736e:	fb02 6101 	mla	r1, r2, r1, r6
 8007372:	0c1e      	lsrs	r6, r3, #16
 8007374:	0c0b      	lsrs	r3, r1, #16
 8007376:	fb02 3306 	mla	r3, r2, r6, r3
 800737a:	b289      	uxth	r1, r1
 800737c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007380:	4285      	cmp	r5, r0
 8007382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007386:	f84c 1b04 	str.w	r1, [ip], #4
 800738a:	dcec      	bgt.n	8007366 <__multadd+0x12>
 800738c:	b30e      	cbz	r6, 80073d2 <__multadd+0x7e>
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	42ab      	cmp	r3, r5
 8007392:	dc19      	bgt.n	80073c8 <__multadd+0x74>
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4638      	mov	r0, r7
 8007398:	3101      	adds	r1, #1
 800739a:	f7ff ff79 	bl	8007290 <_Balloc>
 800739e:	4680      	mov	r8, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__multadd+0x5a>
 80073a2:	4602      	mov	r2, r0
 80073a4:	21ba      	movs	r1, #186	; 0xba
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <__multadd+0x84>)
 80073a8:	480c      	ldr	r0, [pc, #48]	; (80073dc <__multadd+0x88>)
 80073aa:	f001 fcfd 	bl	8008da8 <__assert_func>
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	f104 010c 	add.w	r1, r4, #12
 80073b4:	3202      	adds	r2, #2
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	300c      	adds	r0, #12
 80073ba:	f001 fce1 	bl	8008d80 <memcpy>
 80073be:	4621      	mov	r1, r4
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ffa5 	bl	8007310 <_Bfree>
 80073c6:	4644      	mov	r4, r8
 80073c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073cc:	3501      	adds	r5, #1
 80073ce:	615e      	str	r6, [r3, #20]
 80073d0:	6125      	str	r5, [r4, #16]
 80073d2:	4620      	mov	r0, r4
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	08009bdf 	.word	0x08009bdf
 80073dc:	08009bf0 	.word	0x08009bf0

080073e0 <__s2b>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4615      	mov	r5, r2
 80073e6:	2209      	movs	r2, #9
 80073e8:	461f      	mov	r7, r3
 80073ea:	3308      	adds	r3, #8
 80073ec:	460c      	mov	r4, r1
 80073ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f2:	4606      	mov	r6, r0
 80073f4:	2201      	movs	r2, #1
 80073f6:	2100      	movs	r1, #0
 80073f8:	429a      	cmp	r2, r3
 80073fa:	db09      	blt.n	8007410 <__s2b+0x30>
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7ff ff47 	bl	8007290 <_Balloc>
 8007402:	b940      	cbnz	r0, 8007416 <__s2b+0x36>
 8007404:	4602      	mov	r2, r0
 8007406:	21d3      	movs	r1, #211	; 0xd3
 8007408:	4b18      	ldr	r3, [pc, #96]	; (800746c <__s2b+0x8c>)
 800740a:	4819      	ldr	r0, [pc, #100]	; (8007470 <__s2b+0x90>)
 800740c:	f001 fccc 	bl	8008da8 <__assert_func>
 8007410:	0052      	lsls	r2, r2, #1
 8007412:	3101      	adds	r1, #1
 8007414:	e7f0      	b.n	80073f8 <__s2b+0x18>
 8007416:	9b08      	ldr	r3, [sp, #32]
 8007418:	2d09      	cmp	r5, #9
 800741a:	6143      	str	r3, [r0, #20]
 800741c:	f04f 0301 	mov.w	r3, #1
 8007420:	6103      	str	r3, [r0, #16]
 8007422:	dd16      	ble.n	8007452 <__s2b+0x72>
 8007424:	f104 0909 	add.w	r9, r4, #9
 8007428:	46c8      	mov	r8, r9
 800742a:	442c      	add	r4, r5
 800742c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007430:	4601      	mov	r1, r0
 8007432:	220a      	movs	r2, #10
 8007434:	4630      	mov	r0, r6
 8007436:	3b30      	subs	r3, #48	; 0x30
 8007438:	f7ff ff8c 	bl	8007354 <__multadd>
 800743c:	45a0      	cmp	r8, r4
 800743e:	d1f5      	bne.n	800742c <__s2b+0x4c>
 8007440:	f1a5 0408 	sub.w	r4, r5, #8
 8007444:	444c      	add	r4, r9
 8007446:	1b2d      	subs	r5, r5, r4
 8007448:	1963      	adds	r3, r4, r5
 800744a:	42bb      	cmp	r3, r7
 800744c:	db04      	blt.n	8007458 <__s2b+0x78>
 800744e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007452:	2509      	movs	r5, #9
 8007454:	340a      	adds	r4, #10
 8007456:	e7f6      	b.n	8007446 <__s2b+0x66>
 8007458:	f814 3b01 	ldrb.w	r3, [r4], #1
 800745c:	4601      	mov	r1, r0
 800745e:	220a      	movs	r2, #10
 8007460:	4630      	mov	r0, r6
 8007462:	3b30      	subs	r3, #48	; 0x30
 8007464:	f7ff ff76 	bl	8007354 <__multadd>
 8007468:	e7ee      	b.n	8007448 <__s2b+0x68>
 800746a:	bf00      	nop
 800746c:	08009bdf 	.word	0x08009bdf
 8007470:	08009bf0 	.word	0x08009bf0

08007474 <__hi0bits>:
 8007474:	0c02      	lsrs	r2, r0, #16
 8007476:	0412      	lsls	r2, r2, #16
 8007478:	4603      	mov	r3, r0
 800747a:	b9ca      	cbnz	r2, 80074b0 <__hi0bits+0x3c>
 800747c:	0403      	lsls	r3, r0, #16
 800747e:	2010      	movs	r0, #16
 8007480:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007484:	bf04      	itt	eq
 8007486:	021b      	lsleq	r3, r3, #8
 8007488:	3008      	addeq	r0, #8
 800748a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800748e:	bf04      	itt	eq
 8007490:	011b      	lsleq	r3, r3, #4
 8007492:	3004      	addeq	r0, #4
 8007494:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007498:	bf04      	itt	eq
 800749a:	009b      	lsleq	r3, r3, #2
 800749c:	3002      	addeq	r0, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	db05      	blt.n	80074ae <__hi0bits+0x3a>
 80074a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80074a6:	f100 0001 	add.w	r0, r0, #1
 80074aa:	bf08      	it	eq
 80074ac:	2020      	moveq	r0, #32
 80074ae:	4770      	bx	lr
 80074b0:	2000      	movs	r0, #0
 80074b2:	e7e5      	b.n	8007480 <__hi0bits+0xc>

080074b4 <__lo0bits>:
 80074b4:	6803      	ldr	r3, [r0, #0]
 80074b6:	4602      	mov	r2, r0
 80074b8:	f013 0007 	ands.w	r0, r3, #7
 80074bc:	d00b      	beq.n	80074d6 <__lo0bits+0x22>
 80074be:	07d9      	lsls	r1, r3, #31
 80074c0:	d421      	bmi.n	8007506 <__lo0bits+0x52>
 80074c2:	0798      	lsls	r0, r3, #30
 80074c4:	bf49      	itett	mi
 80074c6:	085b      	lsrmi	r3, r3, #1
 80074c8:	089b      	lsrpl	r3, r3, #2
 80074ca:	2001      	movmi	r0, #1
 80074cc:	6013      	strmi	r3, [r2, #0]
 80074ce:	bf5c      	itt	pl
 80074d0:	2002      	movpl	r0, #2
 80074d2:	6013      	strpl	r3, [r2, #0]
 80074d4:	4770      	bx	lr
 80074d6:	b299      	uxth	r1, r3
 80074d8:	b909      	cbnz	r1, 80074de <__lo0bits+0x2a>
 80074da:	2010      	movs	r0, #16
 80074dc:	0c1b      	lsrs	r3, r3, #16
 80074de:	b2d9      	uxtb	r1, r3
 80074e0:	b909      	cbnz	r1, 80074e6 <__lo0bits+0x32>
 80074e2:	3008      	adds	r0, #8
 80074e4:	0a1b      	lsrs	r3, r3, #8
 80074e6:	0719      	lsls	r1, r3, #28
 80074e8:	bf04      	itt	eq
 80074ea:	091b      	lsreq	r3, r3, #4
 80074ec:	3004      	addeq	r0, #4
 80074ee:	0799      	lsls	r1, r3, #30
 80074f0:	bf04      	itt	eq
 80074f2:	089b      	lsreq	r3, r3, #2
 80074f4:	3002      	addeq	r0, #2
 80074f6:	07d9      	lsls	r1, r3, #31
 80074f8:	d403      	bmi.n	8007502 <__lo0bits+0x4e>
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	f100 0001 	add.w	r0, r0, #1
 8007500:	d003      	beq.n	800750a <__lo0bits+0x56>
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	4770      	bx	lr
 8007506:	2000      	movs	r0, #0
 8007508:	4770      	bx	lr
 800750a:	2020      	movs	r0, #32
 800750c:	4770      	bx	lr
	...

08007510 <__i2b>:
 8007510:	b510      	push	{r4, lr}
 8007512:	460c      	mov	r4, r1
 8007514:	2101      	movs	r1, #1
 8007516:	f7ff febb 	bl	8007290 <_Balloc>
 800751a:	4602      	mov	r2, r0
 800751c:	b928      	cbnz	r0, 800752a <__i2b+0x1a>
 800751e:	f240 1145 	movw	r1, #325	; 0x145
 8007522:	4b04      	ldr	r3, [pc, #16]	; (8007534 <__i2b+0x24>)
 8007524:	4804      	ldr	r0, [pc, #16]	; (8007538 <__i2b+0x28>)
 8007526:	f001 fc3f 	bl	8008da8 <__assert_func>
 800752a:	2301      	movs	r3, #1
 800752c:	6144      	str	r4, [r0, #20]
 800752e:	6103      	str	r3, [r0, #16]
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	08009bdf 	.word	0x08009bdf
 8007538:	08009bf0 	.word	0x08009bf0

0800753c <__multiply>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	4691      	mov	r9, r2
 8007542:	690a      	ldr	r2, [r1, #16]
 8007544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007548:	460c      	mov	r4, r1
 800754a:	429a      	cmp	r2, r3
 800754c:	bfbe      	ittt	lt
 800754e:	460b      	movlt	r3, r1
 8007550:	464c      	movlt	r4, r9
 8007552:	4699      	movlt	r9, r3
 8007554:	6927      	ldr	r7, [r4, #16]
 8007556:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	6861      	ldr	r1, [r4, #4]
 800755e:	eb07 060a 	add.w	r6, r7, sl
 8007562:	42b3      	cmp	r3, r6
 8007564:	b085      	sub	sp, #20
 8007566:	bfb8      	it	lt
 8007568:	3101      	addlt	r1, #1
 800756a:	f7ff fe91 	bl	8007290 <_Balloc>
 800756e:	b930      	cbnz	r0, 800757e <__multiply+0x42>
 8007570:	4602      	mov	r2, r0
 8007572:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007576:	4b43      	ldr	r3, [pc, #268]	; (8007684 <__multiply+0x148>)
 8007578:	4843      	ldr	r0, [pc, #268]	; (8007688 <__multiply+0x14c>)
 800757a:	f001 fc15 	bl	8008da8 <__assert_func>
 800757e:	f100 0514 	add.w	r5, r0, #20
 8007582:	462b      	mov	r3, r5
 8007584:	2200      	movs	r2, #0
 8007586:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800758a:	4543      	cmp	r3, r8
 800758c:	d321      	bcc.n	80075d2 <__multiply+0x96>
 800758e:	f104 0314 	add.w	r3, r4, #20
 8007592:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007596:	f109 0314 	add.w	r3, r9, #20
 800759a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800759e:	9202      	str	r2, [sp, #8]
 80075a0:	1b3a      	subs	r2, r7, r4
 80075a2:	3a15      	subs	r2, #21
 80075a4:	f022 0203 	bic.w	r2, r2, #3
 80075a8:	3204      	adds	r2, #4
 80075aa:	f104 0115 	add.w	r1, r4, #21
 80075ae:	428f      	cmp	r7, r1
 80075b0:	bf38      	it	cc
 80075b2:	2204      	movcc	r2, #4
 80075b4:	9201      	str	r2, [sp, #4]
 80075b6:	9a02      	ldr	r2, [sp, #8]
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d80c      	bhi.n	80075d8 <__multiply+0x9c>
 80075be:	2e00      	cmp	r6, #0
 80075c0:	dd03      	ble.n	80075ca <__multiply+0x8e>
 80075c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d05a      	beq.n	8007680 <__multiply+0x144>
 80075ca:	6106      	str	r6, [r0, #16]
 80075cc:	b005      	add	sp, #20
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	f843 2b04 	str.w	r2, [r3], #4
 80075d6:	e7d8      	b.n	800758a <__multiply+0x4e>
 80075d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80075dc:	f1ba 0f00 	cmp.w	sl, #0
 80075e0:	d023      	beq.n	800762a <__multiply+0xee>
 80075e2:	46a9      	mov	r9, r5
 80075e4:	f04f 0c00 	mov.w	ip, #0
 80075e8:	f104 0e14 	add.w	lr, r4, #20
 80075ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075f0:	f8d9 1000 	ldr.w	r1, [r9]
 80075f4:	fa1f fb82 	uxth.w	fp, r2
 80075f8:	b289      	uxth	r1, r1
 80075fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80075fe:	4461      	add	r1, ip
 8007600:	f8d9 c000 	ldr.w	ip, [r9]
 8007604:	0c12      	lsrs	r2, r2, #16
 8007606:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800760a:	fb0a c202 	mla	r2, sl, r2, ip
 800760e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007612:	b289      	uxth	r1, r1
 8007614:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007618:	4577      	cmp	r7, lr
 800761a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800761e:	f849 1b04 	str.w	r1, [r9], #4
 8007622:	d8e3      	bhi.n	80075ec <__multiply+0xb0>
 8007624:	9a01      	ldr	r2, [sp, #4]
 8007626:	f845 c002 	str.w	ip, [r5, r2]
 800762a:	9a03      	ldr	r2, [sp, #12]
 800762c:	3304      	adds	r3, #4
 800762e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007632:	f1b9 0f00 	cmp.w	r9, #0
 8007636:	d021      	beq.n	800767c <__multiply+0x140>
 8007638:	46ae      	mov	lr, r5
 800763a:	f04f 0a00 	mov.w	sl, #0
 800763e:	6829      	ldr	r1, [r5, #0]
 8007640:	f104 0c14 	add.w	ip, r4, #20
 8007644:	f8bc b000 	ldrh.w	fp, [ip]
 8007648:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800764c:	b289      	uxth	r1, r1
 800764e:	fb09 220b 	mla	r2, r9, fp, r2
 8007652:	4452      	add	r2, sl
 8007654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007658:	f84e 1b04 	str.w	r1, [lr], #4
 800765c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007664:	f8be 1000 	ldrh.w	r1, [lr]
 8007668:	4567      	cmp	r7, ip
 800766a:	fb09 110a 	mla	r1, r9, sl, r1
 800766e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007672:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007676:	d8e5      	bhi.n	8007644 <__multiply+0x108>
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	50a9      	str	r1, [r5, r2]
 800767c:	3504      	adds	r5, #4
 800767e:	e79a      	b.n	80075b6 <__multiply+0x7a>
 8007680:	3e01      	subs	r6, #1
 8007682:	e79c      	b.n	80075be <__multiply+0x82>
 8007684:	08009bdf 	.word	0x08009bdf
 8007688:	08009bf0 	.word	0x08009bf0

0800768c <__pow5mult>:
 800768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007690:	4615      	mov	r5, r2
 8007692:	f012 0203 	ands.w	r2, r2, #3
 8007696:	4606      	mov	r6, r0
 8007698:	460f      	mov	r7, r1
 800769a:	d007      	beq.n	80076ac <__pow5mult+0x20>
 800769c:	4c25      	ldr	r4, [pc, #148]	; (8007734 <__pow5mult+0xa8>)
 800769e:	3a01      	subs	r2, #1
 80076a0:	2300      	movs	r3, #0
 80076a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076a6:	f7ff fe55 	bl	8007354 <__multadd>
 80076aa:	4607      	mov	r7, r0
 80076ac:	10ad      	asrs	r5, r5, #2
 80076ae:	d03d      	beq.n	800772c <__pow5mult+0xa0>
 80076b0:	69f4      	ldr	r4, [r6, #28]
 80076b2:	b97c      	cbnz	r4, 80076d4 <__pow5mult+0x48>
 80076b4:	2010      	movs	r0, #16
 80076b6:	f7ff fd37 	bl	8007128 <malloc>
 80076ba:	4602      	mov	r2, r0
 80076bc:	61f0      	str	r0, [r6, #28]
 80076be:	b928      	cbnz	r0, 80076cc <__pow5mult+0x40>
 80076c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80076c4:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <__pow5mult+0xac>)
 80076c6:	481d      	ldr	r0, [pc, #116]	; (800773c <__pow5mult+0xb0>)
 80076c8:	f001 fb6e 	bl	8008da8 <__assert_func>
 80076cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076d0:	6004      	str	r4, [r0, #0]
 80076d2:	60c4      	str	r4, [r0, #12]
 80076d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80076d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076dc:	b94c      	cbnz	r4, 80076f2 <__pow5mult+0x66>
 80076de:	f240 2171 	movw	r1, #625	; 0x271
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ff14 	bl	8007510 <__i2b>
 80076e8:	2300      	movs	r3, #0
 80076ea:	4604      	mov	r4, r0
 80076ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80076f0:	6003      	str	r3, [r0, #0]
 80076f2:	f04f 0900 	mov.w	r9, #0
 80076f6:	07eb      	lsls	r3, r5, #31
 80076f8:	d50a      	bpl.n	8007710 <__pow5mult+0x84>
 80076fa:	4639      	mov	r1, r7
 80076fc:	4622      	mov	r2, r4
 80076fe:	4630      	mov	r0, r6
 8007700:	f7ff ff1c 	bl	800753c <__multiply>
 8007704:	4680      	mov	r8, r0
 8007706:	4639      	mov	r1, r7
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff fe01 	bl	8007310 <_Bfree>
 800770e:	4647      	mov	r7, r8
 8007710:	106d      	asrs	r5, r5, #1
 8007712:	d00b      	beq.n	800772c <__pow5mult+0xa0>
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	b938      	cbnz	r0, 8007728 <__pow5mult+0x9c>
 8007718:	4622      	mov	r2, r4
 800771a:	4621      	mov	r1, r4
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff ff0d 	bl	800753c <__multiply>
 8007722:	6020      	str	r0, [r4, #0]
 8007724:	f8c0 9000 	str.w	r9, [r0]
 8007728:	4604      	mov	r4, r0
 800772a:	e7e4      	b.n	80076f6 <__pow5mult+0x6a>
 800772c:	4638      	mov	r0, r7
 800772e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007732:	bf00      	nop
 8007734:	08009d40 	.word	0x08009d40
 8007738:	08009b70 	.word	0x08009b70
 800773c:	08009bf0 	.word	0x08009bf0

08007740 <__lshift>:
 8007740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	460c      	mov	r4, r1
 8007746:	4607      	mov	r7, r0
 8007748:	4691      	mov	r9, r2
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	6849      	ldr	r1, [r1, #4]
 800774e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007752:	68a3      	ldr	r3, [r4, #8]
 8007754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007758:	f108 0601 	add.w	r6, r8, #1
 800775c:	42b3      	cmp	r3, r6
 800775e:	db0b      	blt.n	8007778 <__lshift+0x38>
 8007760:	4638      	mov	r0, r7
 8007762:	f7ff fd95 	bl	8007290 <_Balloc>
 8007766:	4605      	mov	r5, r0
 8007768:	b948      	cbnz	r0, 800777e <__lshift+0x3e>
 800776a:	4602      	mov	r2, r0
 800776c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007770:	4b27      	ldr	r3, [pc, #156]	; (8007810 <__lshift+0xd0>)
 8007772:	4828      	ldr	r0, [pc, #160]	; (8007814 <__lshift+0xd4>)
 8007774:	f001 fb18 	bl	8008da8 <__assert_func>
 8007778:	3101      	adds	r1, #1
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	e7ee      	b.n	800775c <__lshift+0x1c>
 800777e:	2300      	movs	r3, #0
 8007780:	f100 0114 	add.w	r1, r0, #20
 8007784:	f100 0210 	add.w	r2, r0, #16
 8007788:	4618      	mov	r0, r3
 800778a:	4553      	cmp	r3, sl
 800778c:	db33      	blt.n	80077f6 <__lshift+0xb6>
 800778e:	6920      	ldr	r0, [r4, #16]
 8007790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007794:	f104 0314 	add.w	r3, r4, #20
 8007798:	f019 091f 	ands.w	r9, r9, #31
 800779c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077a4:	d02b      	beq.n	80077fe <__lshift+0xbe>
 80077a6:	468a      	mov	sl, r1
 80077a8:	2200      	movs	r2, #0
 80077aa:	f1c9 0e20 	rsb	lr, r9, #32
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	fa00 f009 	lsl.w	r0, r0, r9
 80077b4:	4310      	orrs	r0, r2
 80077b6:	f84a 0b04 	str.w	r0, [sl], #4
 80077ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80077be:	459c      	cmp	ip, r3
 80077c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80077c4:	d8f3      	bhi.n	80077ae <__lshift+0x6e>
 80077c6:	ebac 0304 	sub.w	r3, ip, r4
 80077ca:	3b15      	subs	r3, #21
 80077cc:	f023 0303 	bic.w	r3, r3, #3
 80077d0:	3304      	adds	r3, #4
 80077d2:	f104 0015 	add.w	r0, r4, #21
 80077d6:	4584      	cmp	ip, r0
 80077d8:	bf38      	it	cc
 80077da:	2304      	movcc	r3, #4
 80077dc:	50ca      	str	r2, [r1, r3]
 80077de:	b10a      	cbz	r2, 80077e4 <__lshift+0xa4>
 80077e0:	f108 0602 	add.w	r6, r8, #2
 80077e4:	3e01      	subs	r6, #1
 80077e6:	4638      	mov	r0, r7
 80077e8:	4621      	mov	r1, r4
 80077ea:	612e      	str	r6, [r5, #16]
 80077ec:	f7ff fd90 	bl	8007310 <_Bfree>
 80077f0:	4628      	mov	r0, r5
 80077f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80077fa:	3301      	adds	r3, #1
 80077fc:	e7c5      	b.n	800778a <__lshift+0x4a>
 80077fe:	3904      	subs	r1, #4
 8007800:	f853 2b04 	ldr.w	r2, [r3], #4
 8007804:	459c      	cmp	ip, r3
 8007806:	f841 2f04 	str.w	r2, [r1, #4]!
 800780a:	d8f9      	bhi.n	8007800 <__lshift+0xc0>
 800780c:	e7ea      	b.n	80077e4 <__lshift+0xa4>
 800780e:	bf00      	nop
 8007810:	08009bdf 	.word	0x08009bdf
 8007814:	08009bf0 	.word	0x08009bf0

08007818 <__mcmp>:
 8007818:	4603      	mov	r3, r0
 800781a:	690a      	ldr	r2, [r1, #16]
 800781c:	6900      	ldr	r0, [r0, #16]
 800781e:	b530      	push	{r4, r5, lr}
 8007820:	1a80      	subs	r0, r0, r2
 8007822:	d10d      	bne.n	8007840 <__mcmp+0x28>
 8007824:	3314      	adds	r3, #20
 8007826:	3114      	adds	r1, #20
 8007828:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800782c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007830:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007834:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007838:	4295      	cmp	r5, r2
 800783a:	d002      	beq.n	8007842 <__mcmp+0x2a>
 800783c:	d304      	bcc.n	8007848 <__mcmp+0x30>
 800783e:	2001      	movs	r0, #1
 8007840:	bd30      	pop	{r4, r5, pc}
 8007842:	42a3      	cmp	r3, r4
 8007844:	d3f4      	bcc.n	8007830 <__mcmp+0x18>
 8007846:	e7fb      	b.n	8007840 <__mcmp+0x28>
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e7f8      	b.n	8007840 <__mcmp+0x28>
	...

08007850 <__mdiff>:
 8007850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	460d      	mov	r5, r1
 8007856:	4607      	mov	r7, r0
 8007858:	4611      	mov	r1, r2
 800785a:	4628      	mov	r0, r5
 800785c:	4614      	mov	r4, r2
 800785e:	f7ff ffdb 	bl	8007818 <__mcmp>
 8007862:	1e06      	subs	r6, r0, #0
 8007864:	d111      	bne.n	800788a <__mdiff+0x3a>
 8007866:	4631      	mov	r1, r6
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff fd11 	bl	8007290 <_Balloc>
 800786e:	4602      	mov	r2, r0
 8007870:	b928      	cbnz	r0, 800787e <__mdiff+0x2e>
 8007872:	f240 2137 	movw	r1, #567	; 0x237
 8007876:	4b3a      	ldr	r3, [pc, #232]	; (8007960 <__mdiff+0x110>)
 8007878:	483a      	ldr	r0, [pc, #232]	; (8007964 <__mdiff+0x114>)
 800787a:	f001 fa95 	bl	8008da8 <__assert_func>
 800787e:	2301      	movs	r3, #1
 8007880:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007884:	4610      	mov	r0, r2
 8007886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788a:	bfa4      	itt	ge
 800788c:	4623      	movge	r3, r4
 800788e:	462c      	movge	r4, r5
 8007890:	4638      	mov	r0, r7
 8007892:	6861      	ldr	r1, [r4, #4]
 8007894:	bfa6      	itte	ge
 8007896:	461d      	movge	r5, r3
 8007898:	2600      	movge	r6, #0
 800789a:	2601      	movlt	r6, #1
 800789c:	f7ff fcf8 	bl	8007290 <_Balloc>
 80078a0:	4602      	mov	r2, r0
 80078a2:	b918      	cbnz	r0, 80078ac <__mdiff+0x5c>
 80078a4:	f240 2145 	movw	r1, #581	; 0x245
 80078a8:	4b2d      	ldr	r3, [pc, #180]	; (8007960 <__mdiff+0x110>)
 80078aa:	e7e5      	b.n	8007878 <__mdiff+0x28>
 80078ac:	f102 0814 	add.w	r8, r2, #20
 80078b0:	46c2      	mov	sl, r8
 80078b2:	f04f 0c00 	mov.w	ip, #0
 80078b6:	6927      	ldr	r7, [r4, #16]
 80078b8:	60c6      	str	r6, [r0, #12]
 80078ba:	692e      	ldr	r6, [r5, #16]
 80078bc:	f104 0014 	add.w	r0, r4, #20
 80078c0:	f105 0914 	add.w	r9, r5, #20
 80078c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80078c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078cc:	3410      	adds	r4, #16
 80078ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80078d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80078d6:	fa1f f18b 	uxth.w	r1, fp
 80078da:	4461      	add	r1, ip
 80078dc:	fa1f fc83 	uxth.w	ip, r3
 80078e0:	0c1b      	lsrs	r3, r3, #16
 80078e2:	eba1 010c 	sub.w	r1, r1, ip
 80078e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078ee:	b289      	uxth	r1, r1
 80078f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80078f4:	454e      	cmp	r6, r9
 80078f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80078fa:	f84a 1b04 	str.w	r1, [sl], #4
 80078fe:	d8e6      	bhi.n	80078ce <__mdiff+0x7e>
 8007900:	1b73      	subs	r3, r6, r5
 8007902:	3b15      	subs	r3, #21
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	3515      	adds	r5, #21
 800790a:	3304      	adds	r3, #4
 800790c:	42ae      	cmp	r6, r5
 800790e:	bf38      	it	cc
 8007910:	2304      	movcc	r3, #4
 8007912:	4418      	add	r0, r3
 8007914:	4443      	add	r3, r8
 8007916:	461e      	mov	r6, r3
 8007918:	4605      	mov	r5, r0
 800791a:	4575      	cmp	r5, lr
 800791c:	d30e      	bcc.n	800793c <__mdiff+0xec>
 800791e:	f10e 0103 	add.w	r1, lr, #3
 8007922:	1a09      	subs	r1, r1, r0
 8007924:	f021 0103 	bic.w	r1, r1, #3
 8007928:	3803      	subs	r0, #3
 800792a:	4586      	cmp	lr, r0
 800792c:	bf38      	it	cc
 800792e:	2100      	movcc	r1, #0
 8007930:	440b      	add	r3, r1
 8007932:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007936:	b189      	cbz	r1, 800795c <__mdiff+0x10c>
 8007938:	6117      	str	r7, [r2, #16]
 800793a:	e7a3      	b.n	8007884 <__mdiff+0x34>
 800793c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007940:	fa1f f188 	uxth.w	r1, r8
 8007944:	4461      	add	r1, ip
 8007946:	140c      	asrs	r4, r1, #16
 8007948:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800794c:	b289      	uxth	r1, r1
 800794e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007952:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007956:	f846 1b04 	str.w	r1, [r6], #4
 800795a:	e7de      	b.n	800791a <__mdiff+0xca>
 800795c:	3f01      	subs	r7, #1
 800795e:	e7e8      	b.n	8007932 <__mdiff+0xe2>
 8007960:	08009bdf 	.word	0x08009bdf
 8007964:	08009bf0 	.word	0x08009bf0

08007968 <__ulp>:
 8007968:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <__ulp+0x3c>)
 800796a:	400b      	ands	r3, r1
 800796c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007970:	2b00      	cmp	r3, #0
 8007972:	dc08      	bgt.n	8007986 <__ulp+0x1e>
 8007974:	425b      	negs	r3, r3
 8007976:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800797a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800797e:	da04      	bge.n	800798a <__ulp+0x22>
 8007980:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007984:	4113      	asrs	r3, r2
 8007986:	2200      	movs	r2, #0
 8007988:	e008      	b.n	800799c <__ulp+0x34>
 800798a:	f1a2 0314 	sub.w	r3, r2, #20
 800798e:	2b1e      	cmp	r3, #30
 8007990:	bfd6      	itet	le
 8007992:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007996:	2201      	movgt	r2, #1
 8007998:	40da      	lsrle	r2, r3
 800799a:	2300      	movs	r3, #0
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	7ff00000 	.word	0x7ff00000

080079a8 <__b2d>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	6905      	ldr	r5, [r0, #16]
 80079ac:	f100 0714 	add.w	r7, r0, #20
 80079b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80079b4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80079b8:	1f2e      	subs	r6, r5, #4
 80079ba:	4620      	mov	r0, r4
 80079bc:	f7ff fd5a 	bl	8007474 <__hi0bits>
 80079c0:	f1c0 0220 	rsb	r2, r0, #32
 80079c4:	280a      	cmp	r0, #10
 80079c6:	4603      	mov	r3, r0
 80079c8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007a34 <__b2d+0x8c>
 80079cc:	600a      	str	r2, [r1, #0]
 80079ce:	dc12      	bgt.n	80079f6 <__b2d+0x4e>
 80079d0:	f1c0 0e0b 	rsb	lr, r0, #11
 80079d4:	fa24 f20e 	lsr.w	r2, r4, lr
 80079d8:	42b7      	cmp	r7, r6
 80079da:	ea42 010c 	orr.w	r1, r2, ip
 80079de:	bf2c      	ite	cs
 80079e0:	2200      	movcs	r2, #0
 80079e2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80079e6:	3315      	adds	r3, #21
 80079e8:	fa04 f303 	lsl.w	r3, r4, r3
 80079ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80079f0:	431a      	orrs	r2, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f6:	42b7      	cmp	r7, r6
 80079f8:	bf2e      	itee	cs
 80079fa:	2200      	movcs	r2, #0
 80079fc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007a00:	f1a5 0608 	subcc.w	r6, r5, #8
 8007a04:	3b0b      	subs	r3, #11
 8007a06:	d012      	beq.n	8007a2e <__b2d+0x86>
 8007a08:	f1c3 0520 	rsb	r5, r3, #32
 8007a0c:	fa22 f105 	lsr.w	r1, r2, r5
 8007a10:	409c      	lsls	r4, r3
 8007a12:	430c      	orrs	r4, r1
 8007a14:	42be      	cmp	r6, r7
 8007a16:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007a1a:	bf94      	ite	ls
 8007a1c:	2400      	movls	r4, #0
 8007a1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007a22:	409a      	lsls	r2, r3
 8007a24:	40ec      	lsrs	r4, r5
 8007a26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007a2a:	4322      	orrs	r2, r4
 8007a2c:	e7e1      	b.n	80079f2 <__b2d+0x4a>
 8007a2e:	ea44 010c 	orr.w	r1, r4, ip
 8007a32:	e7de      	b.n	80079f2 <__b2d+0x4a>
 8007a34:	3ff00000 	.word	0x3ff00000

08007a38 <__d2b>:
 8007a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	4617      	mov	r7, r2
 8007a3e:	461c      	mov	r4, r3
 8007a40:	9e08      	ldr	r6, [sp, #32]
 8007a42:	f7ff fc25 	bl	8007290 <_Balloc>
 8007a46:	4605      	mov	r5, r0
 8007a48:	b930      	cbnz	r0, 8007a58 <__d2b+0x20>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	f240 310f 	movw	r1, #783	; 0x30f
 8007a50:	4b22      	ldr	r3, [pc, #136]	; (8007adc <__d2b+0xa4>)
 8007a52:	4823      	ldr	r0, [pc, #140]	; (8007ae0 <__d2b+0xa8>)
 8007a54:	f001 f9a8 	bl	8008da8 <__assert_func>
 8007a58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007a5c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007a60:	bb24      	cbnz	r4, 8007aac <__d2b+0x74>
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	d026      	beq.n	8007ab6 <__d2b+0x7e>
 8007a68:	4668      	mov	r0, sp
 8007a6a:	9700      	str	r7, [sp, #0]
 8007a6c:	f7ff fd22 	bl	80074b4 <__lo0bits>
 8007a70:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a74:	b1e8      	cbz	r0, 8007ab2 <__d2b+0x7a>
 8007a76:	f1c0 0320 	rsb	r3, r0, #32
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	40c2      	lsrs	r2, r0
 8007a82:	616b      	str	r3, [r5, #20]
 8007a84:	9201      	str	r2, [sp, #4]
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bf14      	ite	ne
 8007a8c:	2102      	movne	r1, #2
 8007a8e:	2101      	moveq	r1, #1
 8007a90:	61ab      	str	r3, [r5, #24]
 8007a92:	6129      	str	r1, [r5, #16]
 8007a94:	b1bc      	cbz	r4, 8007ac6 <__d2b+0x8e>
 8007a96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a9a:	4404      	add	r4, r0
 8007a9c:	6034      	str	r4, [r6, #0]
 8007a9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa4:	6018      	str	r0, [r3, #0]
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	b003      	add	sp, #12
 8007aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab0:	e7d7      	b.n	8007a62 <__d2b+0x2a>
 8007ab2:	6169      	str	r1, [r5, #20]
 8007ab4:	e7e7      	b.n	8007a86 <__d2b+0x4e>
 8007ab6:	a801      	add	r0, sp, #4
 8007ab8:	f7ff fcfc 	bl	80074b4 <__lo0bits>
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	2101      	movs	r1, #1
 8007ac0:	616b      	str	r3, [r5, #20]
 8007ac2:	3020      	adds	r0, #32
 8007ac4:	e7e5      	b.n	8007a92 <__d2b+0x5a>
 8007ac6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007aca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007ace:	6030      	str	r0, [r6, #0]
 8007ad0:	6918      	ldr	r0, [r3, #16]
 8007ad2:	f7ff fccf 	bl	8007474 <__hi0bits>
 8007ad6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ada:	e7e2      	b.n	8007aa2 <__d2b+0x6a>
 8007adc:	08009bdf 	.word	0x08009bdf
 8007ae0:	08009bf0 	.word	0x08009bf0

08007ae4 <__ratio>:
 8007ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	4688      	mov	r8, r1
 8007aea:	4669      	mov	r1, sp
 8007aec:	4681      	mov	r9, r0
 8007aee:	f7ff ff5b 	bl	80079a8 <__b2d>
 8007af2:	460f      	mov	r7, r1
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
 8007af8:	4640      	mov	r0, r8
 8007afa:	a901      	add	r1, sp, #4
 8007afc:	f7ff ff54 	bl	80079a8 <__b2d>
 8007b00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b08:	468b      	mov	fp, r1
 8007b0a:	eba3 0c02 	sub.w	ip, r3, r2
 8007b0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfd5      	itete	le
 8007b1c:	460a      	movle	r2, r1
 8007b1e:	462a      	movgt	r2, r5
 8007b20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b24:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b28:	bfd8      	it	le
 8007b2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b2e:	465b      	mov	r3, fp
 8007b30:	4602      	mov	r2, r0
 8007b32:	4639      	mov	r1, r7
 8007b34:	4620      	mov	r0, r4
 8007b36:	f7f8 ff19 	bl	800096c <__aeabi_ddiv>
 8007b3a:	b003      	add	sp, #12
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b40 <__copybits>:
 8007b40:	3901      	subs	r1, #1
 8007b42:	b570      	push	{r4, r5, r6, lr}
 8007b44:	1149      	asrs	r1, r1, #5
 8007b46:	6914      	ldr	r4, [r2, #16]
 8007b48:	3101      	adds	r1, #1
 8007b4a:	f102 0314 	add.w	r3, r2, #20
 8007b4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b56:	1f05      	subs	r5, r0, #4
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	d30c      	bcc.n	8007b76 <__copybits+0x36>
 8007b5c:	1aa3      	subs	r3, r4, r2
 8007b5e:	3b11      	subs	r3, #17
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	3211      	adds	r2, #17
 8007b66:	42a2      	cmp	r2, r4
 8007b68:	bf88      	it	hi
 8007b6a:	2300      	movhi	r3, #0
 8007b6c:	4418      	add	r0, r3
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4288      	cmp	r0, r1
 8007b72:	d305      	bcc.n	8007b80 <__copybits+0x40>
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b7e:	e7eb      	b.n	8007b58 <__copybits+0x18>
 8007b80:	f840 3b04 	str.w	r3, [r0], #4
 8007b84:	e7f4      	b.n	8007b70 <__copybits+0x30>

08007b86 <__any_on>:
 8007b86:	f100 0214 	add.w	r2, r0, #20
 8007b8a:	6900      	ldr	r0, [r0, #16]
 8007b8c:	114b      	asrs	r3, r1, #5
 8007b8e:	4298      	cmp	r0, r3
 8007b90:	b510      	push	{r4, lr}
 8007b92:	db11      	blt.n	8007bb8 <__any_on+0x32>
 8007b94:	dd0a      	ble.n	8007bac <__any_on+0x26>
 8007b96:	f011 011f 	ands.w	r1, r1, #31
 8007b9a:	d007      	beq.n	8007bac <__any_on+0x26>
 8007b9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ba0:	fa24 f001 	lsr.w	r0, r4, r1
 8007ba4:	fa00 f101 	lsl.w	r1, r0, r1
 8007ba8:	428c      	cmp	r4, r1
 8007baa:	d10b      	bne.n	8007bc4 <__any_on+0x3e>
 8007bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d803      	bhi.n	8007bbc <__any_on+0x36>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	bd10      	pop	{r4, pc}
 8007bb8:	4603      	mov	r3, r0
 8007bba:	e7f7      	b.n	8007bac <__any_on+0x26>
 8007bbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	d0f5      	beq.n	8007bb0 <__any_on+0x2a>
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	e7f6      	b.n	8007bb6 <__any_on+0x30>

08007bc8 <sulp>:
 8007bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bcc:	460f      	mov	r7, r1
 8007bce:	4690      	mov	r8, r2
 8007bd0:	f7ff feca 	bl	8007968 <__ulp>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	f1b8 0f00 	cmp.w	r8, #0
 8007bdc:	d011      	beq.n	8007c02 <sulp+0x3a>
 8007bde:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007be2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dd0b      	ble.n	8007c02 <sulp+0x3a>
 8007bea:	2400      	movs	r4, #0
 8007bec:	051b      	lsls	r3, r3, #20
 8007bee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007bf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	f7f8 fd8d 	bl	8000718 <__aeabi_dmul>
 8007bfe:	4604      	mov	r4, r0
 8007c00:	460d      	mov	r5, r1
 8007c02:	4620      	mov	r0, r4
 8007c04:	4629      	mov	r1, r5
 8007c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0a:	0000      	movs	r0, r0
 8007c0c:	0000      	movs	r0, r0
	...

08007c10 <_strtod_l>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	b09f      	sub	sp, #124	; 0x7c
 8007c16:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	921a      	str	r2, [sp, #104]	; 0x68
 8007c1e:	460d      	mov	r5, r1
 8007c20:	f04f 0800 	mov.w	r8, #0
 8007c24:	f04f 0900 	mov.w	r9, #0
 8007c28:	460a      	mov	r2, r1
 8007c2a:	9219      	str	r2, [sp, #100]	; 0x64
 8007c2c:	7811      	ldrb	r1, [r2, #0]
 8007c2e:	292b      	cmp	r1, #43	; 0x2b
 8007c30:	d04a      	beq.n	8007cc8 <_strtod_l+0xb8>
 8007c32:	d838      	bhi.n	8007ca6 <_strtod_l+0x96>
 8007c34:	290d      	cmp	r1, #13
 8007c36:	d832      	bhi.n	8007c9e <_strtod_l+0x8e>
 8007c38:	2908      	cmp	r1, #8
 8007c3a:	d832      	bhi.n	8007ca2 <_strtod_l+0x92>
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d03b      	beq.n	8007cb8 <_strtod_l+0xa8>
 8007c40:	2200      	movs	r2, #0
 8007c42:	920e      	str	r2, [sp, #56]	; 0x38
 8007c44:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007c46:	7832      	ldrb	r2, [r6, #0]
 8007c48:	2a30      	cmp	r2, #48	; 0x30
 8007c4a:	f040 80b2 	bne.w	8007db2 <_strtod_l+0x1a2>
 8007c4e:	7872      	ldrb	r2, [r6, #1]
 8007c50:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007c54:	2a58      	cmp	r2, #88	; 0x58
 8007c56:	d16e      	bne.n	8007d36 <_strtod_l+0x126>
 8007c58:	9302      	str	r3, [sp, #8]
 8007c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	ab1a      	add	r3, sp, #104	; 0x68
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4a8c      	ldr	r2, [pc, #560]	; (8007e98 <_strtod_l+0x288>)
 8007c66:	ab1b      	add	r3, sp, #108	; 0x6c
 8007c68:	a919      	add	r1, sp, #100	; 0x64
 8007c6a:	f001 f937 	bl	8008edc <__gethex>
 8007c6e:	f010 070f 	ands.w	r7, r0, #15
 8007c72:	4605      	mov	r5, r0
 8007c74:	d005      	beq.n	8007c82 <_strtod_l+0x72>
 8007c76:	2f06      	cmp	r7, #6
 8007c78:	d128      	bne.n	8007ccc <_strtod_l+0xbc>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	9619      	str	r6, [sp, #100]	; 0x64
 8007c80:	930e      	str	r3, [sp, #56]	; 0x38
 8007c82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 85a0 	bne.w	80087ca <_strtod_l+0xbba>
 8007c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c8c:	b1cb      	cbz	r3, 8007cc2 <_strtod_l+0xb2>
 8007c8e:	4642      	mov	r2, r8
 8007c90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c94:	4610      	mov	r0, r2
 8007c96:	4619      	mov	r1, r3
 8007c98:	b01f      	add	sp, #124	; 0x7c
 8007c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9e:	2920      	cmp	r1, #32
 8007ca0:	d1ce      	bne.n	8007c40 <_strtod_l+0x30>
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	e7c1      	b.n	8007c2a <_strtod_l+0x1a>
 8007ca6:	292d      	cmp	r1, #45	; 0x2d
 8007ca8:	d1ca      	bne.n	8007c40 <_strtod_l+0x30>
 8007caa:	2101      	movs	r1, #1
 8007cac:	910e      	str	r1, [sp, #56]	; 0x38
 8007cae:	1c51      	adds	r1, r2, #1
 8007cb0:	9119      	str	r1, [sp, #100]	; 0x64
 8007cb2:	7852      	ldrb	r2, [r2, #1]
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	d1c5      	bne.n	8007c44 <_strtod_l+0x34>
 8007cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cba:	9519      	str	r5, [sp, #100]	; 0x64
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 8582 	bne.w	80087c6 <_strtod_l+0xbb6>
 8007cc2:	4642      	mov	r2, r8
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	e7e5      	b.n	8007c94 <_strtod_l+0x84>
 8007cc8:	2100      	movs	r1, #0
 8007cca:	e7ef      	b.n	8007cac <_strtod_l+0x9c>
 8007ccc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cce:	b13a      	cbz	r2, 8007ce0 <_strtod_l+0xd0>
 8007cd0:	2135      	movs	r1, #53	; 0x35
 8007cd2:	a81c      	add	r0, sp, #112	; 0x70
 8007cd4:	f7ff ff34 	bl	8007b40 <__copybits>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cdc:	f7ff fb18 	bl	8007310 <_Bfree>
 8007ce0:	3f01      	subs	r7, #1
 8007ce2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007ce4:	2f04      	cmp	r7, #4
 8007ce6:	d806      	bhi.n	8007cf6 <_strtod_l+0xe6>
 8007ce8:	e8df f007 	tbb	[pc, r7]
 8007cec:	201d0314 	.word	0x201d0314
 8007cf0:	14          	.byte	0x14
 8007cf1:	00          	.byte	0x00
 8007cf2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007cf6:	05e9      	lsls	r1, r5, #23
 8007cf8:	bf48      	it	mi
 8007cfa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007cfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d02:	0d1b      	lsrs	r3, r3, #20
 8007d04:	051b      	lsls	r3, r3, #20
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1bb      	bne.n	8007c82 <_strtod_l+0x72>
 8007d0a:	f7fe fb19 	bl	8006340 <__errno>
 8007d0e:	2322      	movs	r3, #34	; 0x22
 8007d10:	6003      	str	r3, [r0, #0]
 8007d12:	e7b6      	b.n	8007c82 <_strtod_l+0x72>
 8007d14:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d18:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007d1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d20:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007d24:	e7e7      	b.n	8007cf6 <_strtod_l+0xe6>
 8007d26:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007e9c <_strtod_l+0x28c>
 8007d2a:	e7e4      	b.n	8007cf6 <_strtod_l+0xe6>
 8007d2c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007d30:	f04f 38ff 	mov.w	r8, #4294967295
 8007d34:	e7df      	b.n	8007cf6 <_strtod_l+0xe6>
 8007d36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	9219      	str	r2, [sp, #100]	; 0x64
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b30      	cmp	r3, #48	; 0x30
 8007d40:	d0f9      	beq.n	8007d36 <_strtod_l+0x126>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d09d      	beq.n	8007c82 <_strtod_l+0x72>
 8007d46:	2301      	movs	r3, #1
 8007d48:	f04f 0a00 	mov.w	sl, #0
 8007d4c:	220a      	movs	r2, #10
 8007d4e:	46d3      	mov	fp, sl
 8007d50:	9305      	str	r3, [sp, #20]
 8007d52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d54:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d5a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007d5c:	7806      	ldrb	r6, [r0, #0]
 8007d5e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007d62:	b2d9      	uxtb	r1, r3
 8007d64:	2909      	cmp	r1, #9
 8007d66:	d926      	bls.n	8007db6 <_strtod_l+0x1a6>
 8007d68:	2201      	movs	r2, #1
 8007d6a:	494d      	ldr	r1, [pc, #308]	; (8007ea0 <_strtod_l+0x290>)
 8007d6c:	f000 ffe6 	bl	8008d3c <strncmp>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d030      	beq.n	8007dd6 <_strtod_l+0x1c6>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4632      	mov	r2, r6
 8007d78:	4603      	mov	r3, r0
 8007d7a:	465e      	mov	r6, fp
 8007d7c:	9008      	str	r0, [sp, #32]
 8007d7e:	2a65      	cmp	r2, #101	; 0x65
 8007d80:	d001      	beq.n	8007d86 <_strtod_l+0x176>
 8007d82:	2a45      	cmp	r2, #69	; 0x45
 8007d84:	d113      	bne.n	8007dae <_strtod_l+0x19e>
 8007d86:	b91e      	cbnz	r6, 8007d90 <_strtod_l+0x180>
 8007d88:	9a05      	ldr	r2, [sp, #20]
 8007d8a:	4302      	orrs	r2, r0
 8007d8c:	d094      	beq.n	8007cb8 <_strtod_l+0xa8>
 8007d8e:	2600      	movs	r6, #0
 8007d90:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007d92:	1c6a      	adds	r2, r5, #1
 8007d94:	9219      	str	r2, [sp, #100]	; 0x64
 8007d96:	786a      	ldrb	r2, [r5, #1]
 8007d98:	2a2b      	cmp	r2, #43	; 0x2b
 8007d9a:	d074      	beq.n	8007e86 <_strtod_l+0x276>
 8007d9c:	2a2d      	cmp	r2, #45	; 0x2d
 8007d9e:	d078      	beq.n	8007e92 <_strtod_l+0x282>
 8007da0:	f04f 0c00 	mov.w	ip, #0
 8007da4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007da8:	2909      	cmp	r1, #9
 8007daa:	d97f      	bls.n	8007eac <_strtod_l+0x29c>
 8007dac:	9519      	str	r5, [sp, #100]	; 0x64
 8007dae:	2700      	movs	r7, #0
 8007db0:	e09e      	b.n	8007ef0 <_strtod_l+0x2e0>
 8007db2:	2300      	movs	r3, #0
 8007db4:	e7c8      	b.n	8007d48 <_strtod_l+0x138>
 8007db6:	f1bb 0f08 	cmp.w	fp, #8
 8007dba:	bfd8      	it	le
 8007dbc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007dbe:	f100 0001 	add.w	r0, r0, #1
 8007dc2:	bfd6      	itet	le
 8007dc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007dc8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007dcc:	930a      	strle	r3, [sp, #40]	; 0x28
 8007dce:	f10b 0b01 	add.w	fp, fp, #1
 8007dd2:	9019      	str	r0, [sp, #100]	; 0x64
 8007dd4:	e7c1      	b.n	8007d5a <_strtod_l+0x14a>
 8007dd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	9219      	str	r2, [sp, #100]	; 0x64
 8007ddc:	785a      	ldrb	r2, [r3, #1]
 8007dde:	f1bb 0f00 	cmp.w	fp, #0
 8007de2:	d037      	beq.n	8007e54 <_strtod_l+0x244>
 8007de4:	465e      	mov	r6, fp
 8007de6:	9008      	str	r0, [sp, #32]
 8007de8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	d912      	bls.n	8007e16 <_strtod_l+0x206>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e7c4      	b.n	8007d7e <_strtod_l+0x16e>
 8007df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007df6:	3001      	adds	r0, #1
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	9219      	str	r2, [sp, #100]	; 0x64
 8007dfc:	785a      	ldrb	r2, [r3, #1]
 8007dfe:	2a30      	cmp	r2, #48	; 0x30
 8007e00:	d0f8      	beq.n	8007df4 <_strtod_l+0x1e4>
 8007e02:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	f200 84e4 	bhi.w	80087d4 <_strtod_l+0xbc4>
 8007e0c:	9008      	str	r0, [sp, #32]
 8007e0e:	2000      	movs	r0, #0
 8007e10:	4606      	mov	r6, r0
 8007e12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e16:	3a30      	subs	r2, #48	; 0x30
 8007e18:	f100 0301 	add.w	r3, r0, #1
 8007e1c:	d014      	beq.n	8007e48 <_strtod_l+0x238>
 8007e1e:	9908      	ldr	r1, [sp, #32]
 8007e20:	eb00 0c06 	add.w	ip, r0, r6
 8007e24:	4419      	add	r1, r3
 8007e26:	9108      	str	r1, [sp, #32]
 8007e28:	4633      	mov	r3, r6
 8007e2a:	210a      	movs	r1, #10
 8007e2c:	4563      	cmp	r3, ip
 8007e2e:	d113      	bne.n	8007e58 <_strtod_l+0x248>
 8007e30:	1833      	adds	r3, r6, r0
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	f106 0601 	add.w	r6, r6, #1
 8007e38:	4406      	add	r6, r0
 8007e3a:	dc1a      	bgt.n	8007e72 <_strtod_l+0x262>
 8007e3c:	230a      	movs	r3, #10
 8007e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e40:	fb03 2301 	mla	r3, r3, r1, r2
 8007e44:	930a      	str	r3, [sp, #40]	; 0x28
 8007e46:	2300      	movs	r3, #0
 8007e48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	1c51      	adds	r1, r2, #1
 8007e4e:	9119      	str	r1, [sp, #100]	; 0x64
 8007e50:	7852      	ldrb	r2, [r2, #1]
 8007e52:	e7c9      	b.n	8007de8 <_strtod_l+0x1d8>
 8007e54:	4658      	mov	r0, fp
 8007e56:	e7d2      	b.n	8007dfe <_strtod_l+0x1ee>
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	f103 0301 	add.w	r3, r3, #1
 8007e5e:	dc03      	bgt.n	8007e68 <_strtod_l+0x258>
 8007e60:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007e62:	434f      	muls	r7, r1
 8007e64:	970a      	str	r7, [sp, #40]	; 0x28
 8007e66:	e7e1      	b.n	8007e2c <_strtod_l+0x21c>
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	bfd8      	it	le
 8007e6c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007e70:	e7dc      	b.n	8007e2c <_strtod_l+0x21c>
 8007e72:	2e10      	cmp	r6, #16
 8007e74:	bfdc      	itt	le
 8007e76:	230a      	movle	r3, #10
 8007e78:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007e7c:	e7e3      	b.n	8007e46 <_strtod_l+0x236>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9308      	str	r3, [sp, #32]
 8007e82:	2301      	movs	r3, #1
 8007e84:	e780      	b.n	8007d88 <_strtod_l+0x178>
 8007e86:	f04f 0c00 	mov.w	ip, #0
 8007e8a:	1caa      	adds	r2, r5, #2
 8007e8c:	9219      	str	r2, [sp, #100]	; 0x64
 8007e8e:	78aa      	ldrb	r2, [r5, #2]
 8007e90:	e788      	b.n	8007da4 <_strtod_l+0x194>
 8007e92:	f04f 0c01 	mov.w	ip, #1
 8007e96:	e7f8      	b.n	8007e8a <_strtod_l+0x27a>
 8007e98:	08009d50 	.word	0x08009d50
 8007e9c:	7ff00000 	.word	0x7ff00000
 8007ea0:	08009d4c 	.word	0x08009d4c
 8007ea4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ea6:	1c51      	adds	r1, r2, #1
 8007ea8:	9119      	str	r1, [sp, #100]	; 0x64
 8007eaa:	7852      	ldrb	r2, [r2, #1]
 8007eac:	2a30      	cmp	r2, #48	; 0x30
 8007eae:	d0f9      	beq.n	8007ea4 <_strtod_l+0x294>
 8007eb0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007eb4:	2908      	cmp	r1, #8
 8007eb6:	f63f af7a 	bhi.w	8007dae <_strtod_l+0x19e>
 8007eba:	3a30      	subs	r2, #48	; 0x30
 8007ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ebe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ec0:	920c      	str	r2, [sp, #48]	; 0x30
 8007ec2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ec4:	1c57      	adds	r7, r2, #1
 8007ec6:	9719      	str	r7, [sp, #100]	; 0x64
 8007ec8:	7852      	ldrb	r2, [r2, #1]
 8007eca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007ece:	f1be 0f09 	cmp.w	lr, #9
 8007ed2:	d938      	bls.n	8007f46 <_strtod_l+0x336>
 8007ed4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ed6:	1a7f      	subs	r7, r7, r1
 8007ed8:	2f08      	cmp	r7, #8
 8007eda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007ede:	dc03      	bgt.n	8007ee8 <_strtod_l+0x2d8>
 8007ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ee2:	428f      	cmp	r7, r1
 8007ee4:	bfa8      	it	ge
 8007ee6:	460f      	movge	r7, r1
 8007ee8:	f1bc 0f00 	cmp.w	ip, #0
 8007eec:	d000      	beq.n	8007ef0 <_strtod_l+0x2e0>
 8007eee:	427f      	negs	r7, r7
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	d14f      	bne.n	8007f94 <_strtod_l+0x384>
 8007ef4:	9905      	ldr	r1, [sp, #20]
 8007ef6:	4301      	orrs	r1, r0
 8007ef8:	f47f aec3 	bne.w	8007c82 <_strtod_l+0x72>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f47f aedb 	bne.w	8007cb8 <_strtod_l+0xa8>
 8007f02:	2a69      	cmp	r2, #105	; 0x69
 8007f04:	d029      	beq.n	8007f5a <_strtod_l+0x34a>
 8007f06:	dc26      	bgt.n	8007f56 <_strtod_l+0x346>
 8007f08:	2a49      	cmp	r2, #73	; 0x49
 8007f0a:	d026      	beq.n	8007f5a <_strtod_l+0x34a>
 8007f0c:	2a4e      	cmp	r2, #78	; 0x4e
 8007f0e:	f47f aed3 	bne.w	8007cb8 <_strtod_l+0xa8>
 8007f12:	499a      	ldr	r1, [pc, #616]	; (800817c <_strtod_l+0x56c>)
 8007f14:	a819      	add	r0, sp, #100	; 0x64
 8007f16:	f001 fa23 	bl	8009360 <__match>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	f43f aecc 	beq.w	8007cb8 <_strtod_l+0xa8>
 8007f20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b28      	cmp	r3, #40	; 0x28
 8007f26:	d12f      	bne.n	8007f88 <_strtod_l+0x378>
 8007f28:	4995      	ldr	r1, [pc, #596]	; (8008180 <_strtod_l+0x570>)
 8007f2a:	aa1c      	add	r2, sp, #112	; 0x70
 8007f2c:	a819      	add	r0, sp, #100	; 0x64
 8007f2e:	f001 fa2b 	bl	8009388 <__hexnan>
 8007f32:	2805      	cmp	r0, #5
 8007f34:	d128      	bne.n	8007f88 <_strtod_l+0x378>
 8007f36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007f3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007f40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007f44:	e69d      	b.n	8007c82 <_strtod_l+0x72>
 8007f46:	210a      	movs	r1, #10
 8007f48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f4a:	fb01 2107 	mla	r1, r1, r7, r2
 8007f4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007f52:	9209      	str	r2, [sp, #36]	; 0x24
 8007f54:	e7b5      	b.n	8007ec2 <_strtod_l+0x2b2>
 8007f56:	2a6e      	cmp	r2, #110	; 0x6e
 8007f58:	e7d9      	b.n	8007f0e <_strtod_l+0x2fe>
 8007f5a:	498a      	ldr	r1, [pc, #552]	; (8008184 <_strtod_l+0x574>)
 8007f5c:	a819      	add	r0, sp, #100	; 0x64
 8007f5e:	f001 f9ff 	bl	8009360 <__match>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f43f aea8 	beq.w	8007cb8 <_strtod_l+0xa8>
 8007f68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f6a:	4987      	ldr	r1, [pc, #540]	; (8008188 <_strtod_l+0x578>)
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	a819      	add	r0, sp, #100	; 0x64
 8007f70:	9319      	str	r3, [sp, #100]	; 0x64
 8007f72:	f001 f9f5 	bl	8009360 <__match>
 8007f76:	b910      	cbnz	r0, 8007f7e <_strtod_l+0x36e>
 8007f78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	9319      	str	r3, [sp, #100]	; 0x64
 8007f7e:	f04f 0800 	mov.w	r8, #0
 8007f82:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800818c <_strtod_l+0x57c>
 8007f86:	e67c      	b.n	8007c82 <_strtod_l+0x72>
 8007f88:	4881      	ldr	r0, [pc, #516]	; (8008190 <_strtod_l+0x580>)
 8007f8a:	f000 ff07 	bl	8008d9c <nan>
 8007f8e:	4680      	mov	r8, r0
 8007f90:	4689      	mov	r9, r1
 8007f92:	e676      	b.n	8007c82 <_strtod_l+0x72>
 8007f94:	9b08      	ldr	r3, [sp, #32]
 8007f96:	f1bb 0f00 	cmp.w	fp, #0
 8007f9a:	bf08      	it	eq
 8007f9c:	46b3      	moveq	fp, r6
 8007f9e:	1afb      	subs	r3, r7, r3
 8007fa0:	2e10      	cmp	r6, #16
 8007fa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fa4:	4635      	mov	r5, r6
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	bfa8      	it	ge
 8007faa:	2510      	movge	r5, #16
 8007fac:	f7f8 fb3a 	bl	8000624 <__aeabi_ui2d>
 8007fb0:	2e09      	cmp	r6, #9
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	4689      	mov	r9, r1
 8007fb6:	dd13      	ble.n	8007fe0 <_strtod_l+0x3d0>
 8007fb8:	4b76      	ldr	r3, [pc, #472]	; (8008194 <_strtod_l+0x584>)
 8007fba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007fbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007fc2:	f7f8 fba9 	bl	8000718 <__aeabi_dmul>
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	4650      	mov	r0, sl
 8007fca:	4689      	mov	r9, r1
 8007fcc:	f7f8 fb2a 	bl	8000624 <__aeabi_ui2d>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 f9e8 	bl	80003ac <__adddf3>
 8007fdc:	4680      	mov	r8, r0
 8007fde:	4689      	mov	r9, r1
 8007fe0:	2e0f      	cmp	r6, #15
 8007fe2:	dc36      	bgt.n	8008052 <_strtod_l+0x442>
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f43f ae4b 	beq.w	8007c82 <_strtod_l+0x72>
 8007fec:	dd22      	ble.n	8008034 <_strtod_l+0x424>
 8007fee:	2b16      	cmp	r3, #22
 8007ff0:	dc09      	bgt.n	8008006 <_strtod_l+0x3f6>
 8007ff2:	4968      	ldr	r1, [pc, #416]	; (8008194 <_strtod_l+0x584>)
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008000:	f7f8 fb8a 	bl	8000718 <__aeabi_dmul>
 8008004:	e7c3      	b.n	8007f8e <_strtod_l+0x37e>
 8008006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008008:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800800c:	4293      	cmp	r3, r2
 800800e:	db20      	blt.n	8008052 <_strtod_l+0x442>
 8008010:	4c60      	ldr	r4, [pc, #384]	; (8008194 <_strtod_l+0x584>)
 8008012:	f1c6 060f 	rsb	r6, r6, #15
 8008016:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800801a:	4642      	mov	r2, r8
 800801c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008020:	464b      	mov	r3, r9
 8008022:	f7f8 fb79 	bl	8000718 <__aeabi_dmul>
 8008026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008028:	1b9e      	subs	r6, r3, r6
 800802a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800802e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008032:	e7e5      	b.n	8008000 <_strtod_l+0x3f0>
 8008034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008036:	3316      	adds	r3, #22
 8008038:	db0b      	blt.n	8008052 <_strtod_l+0x442>
 800803a:	9b08      	ldr	r3, [sp, #32]
 800803c:	4640      	mov	r0, r8
 800803e:	1bdf      	subs	r7, r3, r7
 8008040:	4b54      	ldr	r3, [pc, #336]	; (8008194 <_strtod_l+0x584>)
 8008042:	4649      	mov	r1, r9
 8008044:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800804c:	f7f8 fc8e 	bl	800096c <__aeabi_ddiv>
 8008050:	e79d      	b.n	8007f8e <_strtod_l+0x37e>
 8008052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008054:	1b75      	subs	r5, r6, r5
 8008056:	441d      	add	r5, r3
 8008058:	2d00      	cmp	r5, #0
 800805a:	dd70      	ble.n	800813e <_strtod_l+0x52e>
 800805c:	f015 030f 	ands.w	r3, r5, #15
 8008060:	d00a      	beq.n	8008078 <_strtod_l+0x468>
 8008062:	494c      	ldr	r1, [pc, #304]	; (8008194 <_strtod_l+0x584>)
 8008064:	4642      	mov	r2, r8
 8008066:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800806a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800806e:	464b      	mov	r3, r9
 8008070:	f7f8 fb52 	bl	8000718 <__aeabi_dmul>
 8008074:	4680      	mov	r8, r0
 8008076:	4689      	mov	r9, r1
 8008078:	f035 050f 	bics.w	r5, r5, #15
 800807c:	d04d      	beq.n	800811a <_strtod_l+0x50a>
 800807e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008082:	dd22      	ble.n	80080ca <_strtod_l+0x4ba>
 8008084:	2600      	movs	r6, #0
 8008086:	46b3      	mov	fp, r6
 8008088:	960b      	str	r6, [sp, #44]	; 0x2c
 800808a:	9608      	str	r6, [sp, #32]
 800808c:	2322      	movs	r3, #34	; 0x22
 800808e:	f04f 0800 	mov.w	r8, #0
 8008092:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800818c <_strtod_l+0x57c>
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809a:	2b00      	cmp	r3, #0
 800809c:	f43f adf1 	beq.w	8007c82 <_strtod_l+0x72>
 80080a0:	4620      	mov	r0, r4
 80080a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080a4:	f7ff f934 	bl	8007310 <_Bfree>
 80080a8:	4620      	mov	r0, r4
 80080aa:	9908      	ldr	r1, [sp, #32]
 80080ac:	f7ff f930 	bl	8007310 <_Bfree>
 80080b0:	4659      	mov	r1, fp
 80080b2:	4620      	mov	r0, r4
 80080b4:	f7ff f92c 	bl	8007310 <_Bfree>
 80080b8:	4620      	mov	r0, r4
 80080ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080bc:	f7ff f928 	bl	8007310 <_Bfree>
 80080c0:	4631      	mov	r1, r6
 80080c2:	4620      	mov	r0, r4
 80080c4:	f7ff f924 	bl	8007310 <_Bfree>
 80080c8:	e5db      	b.n	8007c82 <_strtod_l+0x72>
 80080ca:	4b33      	ldr	r3, [pc, #204]	; (8008198 <_strtod_l+0x588>)
 80080cc:	4640      	mov	r0, r8
 80080ce:	9305      	str	r3, [sp, #20]
 80080d0:	2300      	movs	r3, #0
 80080d2:	4649      	mov	r1, r9
 80080d4:	469a      	mov	sl, r3
 80080d6:	112d      	asrs	r5, r5, #4
 80080d8:	2d01      	cmp	r5, #1
 80080da:	dc21      	bgt.n	8008120 <_strtod_l+0x510>
 80080dc:	b10b      	cbz	r3, 80080e2 <_strtod_l+0x4d2>
 80080de:	4680      	mov	r8, r0
 80080e0:	4689      	mov	r9, r1
 80080e2:	492d      	ldr	r1, [pc, #180]	; (8008198 <_strtod_l+0x588>)
 80080e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80080e8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080ec:	4642      	mov	r2, r8
 80080ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f2:	464b      	mov	r3, r9
 80080f4:	f7f8 fb10 	bl	8000718 <__aeabi_dmul>
 80080f8:	4b24      	ldr	r3, [pc, #144]	; (800818c <_strtod_l+0x57c>)
 80080fa:	460a      	mov	r2, r1
 80080fc:	400b      	ands	r3, r1
 80080fe:	4927      	ldr	r1, [pc, #156]	; (800819c <_strtod_l+0x58c>)
 8008100:	4680      	mov	r8, r0
 8008102:	428b      	cmp	r3, r1
 8008104:	d8be      	bhi.n	8008084 <_strtod_l+0x474>
 8008106:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800810a:	428b      	cmp	r3, r1
 800810c:	bf86      	itte	hi
 800810e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008112:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80081a0 <_strtod_l+0x590>
 8008116:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800811a:	2300      	movs	r3, #0
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	e07b      	b.n	8008218 <_strtod_l+0x608>
 8008120:	07ea      	lsls	r2, r5, #31
 8008122:	d505      	bpl.n	8008130 <_strtod_l+0x520>
 8008124:	9b05      	ldr	r3, [sp, #20]
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 faf5 	bl	8000718 <__aeabi_dmul>
 800812e:	2301      	movs	r3, #1
 8008130:	9a05      	ldr	r2, [sp, #20]
 8008132:	f10a 0a01 	add.w	sl, sl, #1
 8008136:	3208      	adds	r2, #8
 8008138:	106d      	asrs	r5, r5, #1
 800813a:	9205      	str	r2, [sp, #20]
 800813c:	e7cc      	b.n	80080d8 <_strtod_l+0x4c8>
 800813e:	d0ec      	beq.n	800811a <_strtod_l+0x50a>
 8008140:	426d      	negs	r5, r5
 8008142:	f015 020f 	ands.w	r2, r5, #15
 8008146:	d00a      	beq.n	800815e <_strtod_l+0x54e>
 8008148:	4b12      	ldr	r3, [pc, #72]	; (8008194 <_strtod_l+0x584>)
 800814a:	4640      	mov	r0, r8
 800814c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008150:	4649      	mov	r1, r9
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 fc09 	bl	800096c <__aeabi_ddiv>
 800815a:	4680      	mov	r8, r0
 800815c:	4689      	mov	r9, r1
 800815e:	112d      	asrs	r5, r5, #4
 8008160:	d0db      	beq.n	800811a <_strtod_l+0x50a>
 8008162:	2d1f      	cmp	r5, #31
 8008164:	dd1e      	ble.n	80081a4 <_strtod_l+0x594>
 8008166:	2600      	movs	r6, #0
 8008168:	46b3      	mov	fp, r6
 800816a:	960b      	str	r6, [sp, #44]	; 0x2c
 800816c:	9608      	str	r6, [sp, #32]
 800816e:	2322      	movs	r3, #34	; 0x22
 8008170:	f04f 0800 	mov.w	r8, #0
 8008174:	f04f 0900 	mov.w	r9, #0
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	e78d      	b.n	8008098 <_strtod_l+0x488>
 800817c:	08009b37 	.word	0x08009b37
 8008180:	08009d64 	.word	0x08009d64
 8008184:	08009b2f 	.word	0x08009b2f
 8008188:	08009b66 	.word	0x08009b66
 800818c:	7ff00000 	.word	0x7ff00000
 8008190:	08009ef5 	.word	0x08009ef5
 8008194:	08009c78 	.word	0x08009c78
 8008198:	08009c50 	.word	0x08009c50
 800819c:	7ca00000 	.word	0x7ca00000
 80081a0:	7fefffff 	.word	0x7fefffff
 80081a4:	f015 0310 	ands.w	r3, r5, #16
 80081a8:	bf18      	it	ne
 80081aa:	236a      	movne	r3, #106	; 0x6a
 80081ac:	4640      	mov	r0, r8
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	4649      	mov	r1, r9
 80081b2:	2300      	movs	r3, #0
 80081b4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008480 <_strtod_l+0x870>
 80081b8:	07ea      	lsls	r2, r5, #31
 80081ba:	d504      	bpl.n	80081c6 <_strtod_l+0x5b6>
 80081bc:	e9da 2300 	ldrd	r2, r3, [sl]
 80081c0:	f7f8 faaa 	bl	8000718 <__aeabi_dmul>
 80081c4:	2301      	movs	r3, #1
 80081c6:	106d      	asrs	r5, r5, #1
 80081c8:	f10a 0a08 	add.w	sl, sl, #8
 80081cc:	d1f4      	bne.n	80081b8 <_strtod_l+0x5a8>
 80081ce:	b10b      	cbz	r3, 80081d4 <_strtod_l+0x5c4>
 80081d0:	4680      	mov	r8, r0
 80081d2:	4689      	mov	r9, r1
 80081d4:	9b05      	ldr	r3, [sp, #20]
 80081d6:	b1bb      	cbz	r3, 8008208 <_strtod_l+0x5f8>
 80081d8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80081dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	4649      	mov	r1, r9
 80081e4:	dd10      	ble.n	8008208 <_strtod_l+0x5f8>
 80081e6:	2b1f      	cmp	r3, #31
 80081e8:	f340 8128 	ble.w	800843c <_strtod_l+0x82c>
 80081ec:	2b34      	cmp	r3, #52	; 0x34
 80081ee:	bfd8      	it	le
 80081f0:	f04f 33ff 	movle.w	r3, #4294967295
 80081f4:	f04f 0800 	mov.w	r8, #0
 80081f8:	bfcf      	iteee	gt
 80081fa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80081fe:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008202:	4093      	lslle	r3, r2
 8008204:	ea03 0901 	andle.w	r9, r3, r1
 8008208:	2200      	movs	r2, #0
 800820a:	2300      	movs	r3, #0
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 fcea 	bl	8000be8 <__aeabi_dcmpeq>
 8008214:	2800      	cmp	r0, #0
 8008216:	d1a6      	bne.n	8008166 <_strtod_l+0x556>
 8008218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821a:	465a      	mov	r2, fp
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	4620      	mov	r0, r4
 8008220:	4633      	mov	r3, r6
 8008222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008224:	f7ff f8dc 	bl	80073e0 <__s2b>
 8008228:	900b      	str	r0, [sp, #44]	; 0x2c
 800822a:	2800      	cmp	r0, #0
 800822c:	f43f af2a 	beq.w	8008084 <_strtod_l+0x474>
 8008230:	2600      	movs	r6, #0
 8008232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	2a00      	cmp	r2, #0
 8008238:	eba3 0307 	sub.w	r3, r3, r7
 800823c:	bfa8      	it	ge
 800823e:	2300      	movge	r3, #0
 8008240:	46b3      	mov	fp, r6
 8008242:	9312      	str	r3, [sp, #72]	; 0x48
 8008244:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008248:	9316      	str	r3, [sp, #88]	; 0x58
 800824a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824c:	4620      	mov	r0, r4
 800824e:	6859      	ldr	r1, [r3, #4]
 8008250:	f7ff f81e 	bl	8007290 <_Balloc>
 8008254:	9008      	str	r0, [sp, #32]
 8008256:	2800      	cmp	r0, #0
 8008258:	f43f af18 	beq.w	800808c <_strtod_l+0x47c>
 800825c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800825e:	300c      	adds	r0, #12
 8008260:	691a      	ldr	r2, [r3, #16]
 8008262:	f103 010c 	add.w	r1, r3, #12
 8008266:	3202      	adds	r2, #2
 8008268:	0092      	lsls	r2, r2, #2
 800826a:	f000 fd89 	bl	8008d80 <memcpy>
 800826e:	ab1c      	add	r3, sp, #112	; 0x70
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	ab1b      	add	r3, sp, #108	; 0x6c
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	4642      	mov	r2, r8
 8008278:	464b      	mov	r3, r9
 800827a:	4620      	mov	r0, r4
 800827c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008280:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008284:	f7ff fbd8 	bl	8007a38 <__d2b>
 8008288:	901a      	str	r0, [sp, #104]	; 0x68
 800828a:	2800      	cmp	r0, #0
 800828c:	f43f aefe 	beq.w	800808c <_strtod_l+0x47c>
 8008290:	2101      	movs	r1, #1
 8008292:	4620      	mov	r0, r4
 8008294:	f7ff f93c 	bl	8007510 <__i2b>
 8008298:	4683      	mov	fp, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	f43f aef6 	beq.w	800808c <_strtod_l+0x47c>
 80082a0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80082a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	bfab      	itete	ge
 80082a8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80082aa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80082ac:	eb07 0a03 	addge.w	sl, r7, r3
 80082b0:	1bdd      	sublt	r5, r3, r7
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	bfa8      	it	ge
 80082b6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80082b8:	eba7 0703 	sub.w	r7, r7, r3
 80082bc:	4417      	add	r7, r2
 80082be:	4b71      	ldr	r3, [pc, #452]	; (8008484 <_strtod_l+0x874>)
 80082c0:	f107 37ff 	add.w	r7, r7, #4294967295
 80082c4:	bfb8      	it	lt
 80082c6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80082ca:	429f      	cmp	r7, r3
 80082cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082d0:	f280 80c7 	bge.w	8008462 <_strtod_l+0x852>
 80082d4:	1bdb      	subs	r3, r3, r7
 80082d6:	2b1f      	cmp	r3, #31
 80082d8:	f04f 0101 	mov.w	r1, #1
 80082dc:	eba2 0203 	sub.w	r2, r2, r3
 80082e0:	f300 80b3 	bgt.w	800844a <_strtod_l+0x83a>
 80082e4:	fa01 f303 	lsl.w	r3, r1, r3
 80082e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80082ea:	2300      	movs	r3, #0
 80082ec:	9310      	str	r3, [sp, #64]	; 0x40
 80082ee:	eb0a 0702 	add.w	r7, sl, r2
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	45ba      	cmp	sl, r7
 80082f6:	4415      	add	r5, r2
 80082f8:	441d      	add	r5, r3
 80082fa:	4653      	mov	r3, sl
 80082fc:	bfa8      	it	ge
 80082fe:	463b      	movge	r3, r7
 8008300:	42ab      	cmp	r3, r5
 8008302:	bfa8      	it	ge
 8008304:	462b      	movge	r3, r5
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfc2      	ittt	gt
 800830a:	1aff      	subgt	r7, r7, r3
 800830c:	1aed      	subgt	r5, r5, r3
 800830e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008314:	2b00      	cmp	r3, #0
 8008316:	dd17      	ble.n	8008348 <_strtod_l+0x738>
 8008318:	4659      	mov	r1, fp
 800831a:	461a      	mov	r2, r3
 800831c:	4620      	mov	r0, r4
 800831e:	f7ff f9b5 	bl	800768c <__pow5mult>
 8008322:	4683      	mov	fp, r0
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f aeb1 	beq.w	800808c <_strtod_l+0x47c>
 800832a:	4601      	mov	r1, r0
 800832c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff f904 	bl	800753c <__multiply>
 8008334:	900a      	str	r0, [sp, #40]	; 0x28
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f aea8 	beq.w	800808c <_strtod_l+0x47c>
 800833c:	4620      	mov	r0, r4
 800833e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008340:	f7fe ffe6 	bl	8007310 <_Bfree>
 8008344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008346:	931a      	str	r3, [sp, #104]	; 0x68
 8008348:	2f00      	cmp	r7, #0
 800834a:	f300 808f 	bgt.w	800846c <_strtod_l+0x85c>
 800834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	dd08      	ble.n	8008366 <_strtod_l+0x756>
 8008354:	4620      	mov	r0, r4
 8008356:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008358:	9908      	ldr	r1, [sp, #32]
 800835a:	f7ff f997 	bl	800768c <__pow5mult>
 800835e:	9008      	str	r0, [sp, #32]
 8008360:	2800      	cmp	r0, #0
 8008362:	f43f ae93 	beq.w	800808c <_strtod_l+0x47c>
 8008366:	2d00      	cmp	r5, #0
 8008368:	dd08      	ble.n	800837c <_strtod_l+0x76c>
 800836a:	462a      	mov	r2, r5
 800836c:	4620      	mov	r0, r4
 800836e:	9908      	ldr	r1, [sp, #32]
 8008370:	f7ff f9e6 	bl	8007740 <__lshift>
 8008374:	9008      	str	r0, [sp, #32]
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f ae88 	beq.w	800808c <_strtod_l+0x47c>
 800837c:	f1ba 0f00 	cmp.w	sl, #0
 8008380:	dd08      	ble.n	8008394 <_strtod_l+0x784>
 8008382:	4659      	mov	r1, fp
 8008384:	4652      	mov	r2, sl
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff f9da 	bl	8007740 <__lshift>
 800838c:	4683      	mov	fp, r0
 800838e:	2800      	cmp	r0, #0
 8008390:	f43f ae7c 	beq.w	800808c <_strtod_l+0x47c>
 8008394:	4620      	mov	r0, r4
 8008396:	9a08      	ldr	r2, [sp, #32]
 8008398:	991a      	ldr	r1, [sp, #104]	; 0x68
 800839a:	f7ff fa59 	bl	8007850 <__mdiff>
 800839e:	4606      	mov	r6, r0
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f43f ae73 	beq.w	800808c <_strtod_l+0x47c>
 80083a6:	2500      	movs	r5, #0
 80083a8:	68c3      	ldr	r3, [r0, #12]
 80083aa:	4659      	mov	r1, fp
 80083ac:	60c5      	str	r5, [r0, #12]
 80083ae:	930a      	str	r3, [sp, #40]	; 0x28
 80083b0:	f7ff fa32 	bl	8007818 <__mcmp>
 80083b4:	42a8      	cmp	r0, r5
 80083b6:	da6b      	bge.n	8008490 <_strtod_l+0x880>
 80083b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ba:	ea53 0308 	orrs.w	r3, r3, r8
 80083be:	f040 808f 	bne.w	80084e0 <_strtod_l+0x8d0>
 80083c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f040 808a 	bne.w	80084e0 <_strtod_l+0x8d0>
 80083cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083d0:	0d1b      	lsrs	r3, r3, #20
 80083d2:	051b      	lsls	r3, r3, #20
 80083d4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80083d8:	f240 8082 	bls.w	80084e0 <_strtod_l+0x8d0>
 80083dc:	6973      	ldr	r3, [r6, #20]
 80083de:	b913      	cbnz	r3, 80083e6 <_strtod_l+0x7d6>
 80083e0:	6933      	ldr	r3, [r6, #16]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	dd7c      	ble.n	80084e0 <_strtod_l+0x8d0>
 80083e6:	4631      	mov	r1, r6
 80083e8:	2201      	movs	r2, #1
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7ff f9a8 	bl	8007740 <__lshift>
 80083f0:	4659      	mov	r1, fp
 80083f2:	4606      	mov	r6, r0
 80083f4:	f7ff fa10 	bl	8007818 <__mcmp>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	dd71      	ble.n	80084e0 <_strtod_l+0x8d0>
 80083fc:	9905      	ldr	r1, [sp, #20]
 80083fe:	464b      	mov	r3, r9
 8008400:	4a21      	ldr	r2, [pc, #132]	; (8008488 <_strtod_l+0x878>)
 8008402:	2900      	cmp	r1, #0
 8008404:	f000 808d 	beq.w	8008522 <_strtod_l+0x912>
 8008408:	ea02 0109 	and.w	r1, r2, r9
 800840c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008410:	f300 8087 	bgt.w	8008522 <_strtod_l+0x912>
 8008414:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008418:	f77f aea9 	ble.w	800816e <_strtod_l+0x55e>
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	4b1a      	ldr	r3, [pc, #104]	; (800848c <_strtod_l+0x87c>)
 8008422:	2200      	movs	r2, #0
 8008424:	f7f8 f978 	bl	8000718 <__aeabi_dmul>
 8008428:	4b17      	ldr	r3, [pc, #92]	; (8008488 <_strtod_l+0x878>)
 800842a:	4680      	mov	r8, r0
 800842c:	400b      	ands	r3, r1
 800842e:	4689      	mov	r9, r1
 8008430:	2b00      	cmp	r3, #0
 8008432:	f47f ae35 	bne.w	80080a0 <_strtod_l+0x490>
 8008436:	2322      	movs	r3, #34	; 0x22
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	e631      	b.n	80080a0 <_strtod_l+0x490>
 800843c:	f04f 32ff 	mov.w	r2, #4294967295
 8008440:	fa02 f303 	lsl.w	r3, r2, r3
 8008444:	ea03 0808 	and.w	r8, r3, r8
 8008448:	e6de      	b.n	8008208 <_strtod_l+0x5f8>
 800844a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800844e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008452:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008456:	37e2      	adds	r7, #226	; 0xe2
 8008458:	fa01 f307 	lsl.w	r3, r1, r7
 800845c:	9310      	str	r3, [sp, #64]	; 0x40
 800845e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008460:	e745      	b.n	80082ee <_strtod_l+0x6de>
 8008462:	2300      	movs	r3, #0
 8008464:	9310      	str	r3, [sp, #64]	; 0x40
 8008466:	2301      	movs	r3, #1
 8008468:	9313      	str	r3, [sp, #76]	; 0x4c
 800846a:	e740      	b.n	80082ee <_strtod_l+0x6de>
 800846c:	463a      	mov	r2, r7
 800846e:	4620      	mov	r0, r4
 8008470:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008472:	f7ff f965 	bl	8007740 <__lshift>
 8008476:	901a      	str	r0, [sp, #104]	; 0x68
 8008478:	2800      	cmp	r0, #0
 800847a:	f47f af68 	bne.w	800834e <_strtod_l+0x73e>
 800847e:	e605      	b.n	800808c <_strtod_l+0x47c>
 8008480:	08009d78 	.word	0x08009d78
 8008484:	fffffc02 	.word	0xfffffc02
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	39500000 	.word	0x39500000
 8008490:	46ca      	mov	sl, r9
 8008492:	d165      	bne.n	8008560 <_strtod_l+0x950>
 8008494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008496:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800849a:	b352      	cbz	r2, 80084f2 <_strtod_l+0x8e2>
 800849c:	4a9e      	ldr	r2, [pc, #632]	; (8008718 <_strtod_l+0xb08>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d12a      	bne.n	80084f8 <_strtod_l+0x8e8>
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	4641      	mov	r1, r8
 80084a6:	b1fb      	cbz	r3, 80084e8 <_strtod_l+0x8d8>
 80084a8:	4b9c      	ldr	r3, [pc, #624]	; (800871c <_strtod_l+0xb0c>)
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	ea09 0303 	and.w	r3, r9, r3
 80084b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084b6:	d81a      	bhi.n	80084ee <_strtod_l+0x8de>
 80084b8:	0d1b      	lsrs	r3, r3, #20
 80084ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	4299      	cmp	r1, r3
 80084c4:	d118      	bne.n	80084f8 <_strtod_l+0x8e8>
 80084c6:	4b96      	ldr	r3, [pc, #600]	; (8008720 <_strtod_l+0xb10>)
 80084c8:	459a      	cmp	sl, r3
 80084ca:	d102      	bne.n	80084d2 <_strtod_l+0x8c2>
 80084cc:	3101      	adds	r1, #1
 80084ce:	f43f addd 	beq.w	800808c <_strtod_l+0x47c>
 80084d2:	f04f 0800 	mov.w	r8, #0
 80084d6:	4b91      	ldr	r3, [pc, #580]	; (800871c <_strtod_l+0xb0c>)
 80084d8:	ea0a 0303 	and.w	r3, sl, r3
 80084dc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80084e0:	9b05      	ldr	r3, [sp, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d19a      	bne.n	800841c <_strtod_l+0x80c>
 80084e6:	e5db      	b.n	80080a0 <_strtod_l+0x490>
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	e7e9      	b.n	80084c2 <_strtod_l+0x8b2>
 80084ee:	4613      	mov	r3, r2
 80084f0:	e7e7      	b.n	80084c2 <_strtod_l+0x8b2>
 80084f2:	ea53 0308 	orrs.w	r3, r3, r8
 80084f6:	d081      	beq.n	80083fc <_strtod_l+0x7ec>
 80084f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fa:	b1e3      	cbz	r3, 8008536 <_strtod_l+0x926>
 80084fc:	ea13 0f0a 	tst.w	r3, sl
 8008500:	d0ee      	beq.n	80084e0 <_strtod_l+0x8d0>
 8008502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	9a05      	ldr	r2, [sp, #20]
 800850a:	b1c3      	cbz	r3, 800853e <_strtod_l+0x92e>
 800850c:	f7ff fb5c 	bl	8007bc8 <sulp>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008516:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008518:	f7f7 ff48 	bl	80003ac <__adddf3>
 800851c:	4680      	mov	r8, r0
 800851e:	4689      	mov	r9, r1
 8008520:	e7de      	b.n	80084e0 <_strtod_l+0x8d0>
 8008522:	4013      	ands	r3, r2
 8008524:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008528:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800852c:	f04f 38ff 	mov.w	r8, #4294967295
 8008530:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008534:	e7d4      	b.n	80084e0 <_strtod_l+0x8d0>
 8008536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008538:	ea13 0f08 	tst.w	r3, r8
 800853c:	e7e0      	b.n	8008500 <_strtod_l+0x8f0>
 800853e:	f7ff fb43 	bl	8007bc8 <sulp>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008548:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800854a:	f7f7 ff2d 	bl	80003a8 <__aeabi_dsub>
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	4680      	mov	r8, r0
 8008554:	4689      	mov	r9, r1
 8008556:	f7f8 fb47 	bl	8000be8 <__aeabi_dcmpeq>
 800855a:	2800      	cmp	r0, #0
 800855c:	d0c0      	beq.n	80084e0 <_strtod_l+0x8d0>
 800855e:	e606      	b.n	800816e <_strtod_l+0x55e>
 8008560:	4659      	mov	r1, fp
 8008562:	4630      	mov	r0, r6
 8008564:	f7ff fabe 	bl	8007ae4 <__ratio>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008570:	2200      	movs	r2, #0
 8008572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008576:	f7f8 fb4b 	bl	8000c10 <__aeabi_dcmple>
 800857a:	2800      	cmp	r0, #0
 800857c:	d06f      	beq.n	800865e <_strtod_l+0xa4e>
 800857e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	d17c      	bne.n	800867e <_strtod_l+0xa6e>
 8008584:	f1b8 0f00 	cmp.w	r8, #0
 8008588:	d159      	bne.n	800863e <_strtod_l+0xa2e>
 800858a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800858e:	2b00      	cmp	r3, #0
 8008590:	d17b      	bne.n	800868a <_strtod_l+0xa7a>
 8008592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008596:	2200      	movs	r2, #0
 8008598:	4b62      	ldr	r3, [pc, #392]	; (8008724 <_strtod_l+0xb14>)
 800859a:	f7f8 fb2f 	bl	8000bfc <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d15a      	bne.n	8008658 <_strtod_l+0xa48>
 80085a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085a6:	2200      	movs	r2, #0
 80085a8:	4b5f      	ldr	r3, [pc, #380]	; (8008728 <_strtod_l+0xb18>)
 80085aa:	f7f8 f8b5 	bl	8000718 <__aeabi_dmul>
 80085ae:	4605      	mov	r5, r0
 80085b0:	460f      	mov	r7, r1
 80085b2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80085b6:	9506      	str	r5, [sp, #24]
 80085b8:	9307      	str	r3, [sp, #28]
 80085ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085be:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80085c2:	4b56      	ldr	r3, [pc, #344]	; (800871c <_strtod_l+0xb0c>)
 80085c4:	4a55      	ldr	r2, [pc, #340]	; (800871c <_strtod_l+0xb0c>)
 80085c6:	ea0a 0303 	and.w	r3, sl, r3
 80085ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80085cc:	4b57      	ldr	r3, [pc, #348]	; (800872c <_strtod_l+0xb1c>)
 80085ce:	ea0a 0202 	and.w	r2, sl, r2
 80085d2:	429a      	cmp	r2, r3
 80085d4:	f040 80b0 	bne.w	8008738 <_strtod_l+0xb28>
 80085d8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7ff f9c2 	bl	8007968 <__ulp>
 80085e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085e8:	f7f8 f896 	bl	8000718 <__aeabi_dmul>
 80085ec:	4642      	mov	r2, r8
 80085ee:	464b      	mov	r3, r9
 80085f0:	f7f7 fedc 	bl	80003ac <__adddf3>
 80085f4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800871c <_strtod_l+0xb0c>
 80085f8:	4a4d      	ldr	r2, [pc, #308]	; (8008730 <_strtod_l+0xb20>)
 80085fa:	ea01 0a0a 	and.w	sl, r1, sl
 80085fe:	4592      	cmp	sl, r2
 8008600:	4680      	mov	r8, r0
 8008602:	d948      	bls.n	8008696 <_strtod_l+0xa86>
 8008604:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008606:	4b46      	ldr	r3, [pc, #280]	; (8008720 <_strtod_l+0xb10>)
 8008608:	429a      	cmp	r2, r3
 800860a:	d103      	bne.n	8008614 <_strtod_l+0xa04>
 800860c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800860e:	3301      	adds	r3, #1
 8008610:	f43f ad3c 	beq.w	800808c <_strtod_l+0x47c>
 8008614:	f04f 38ff 	mov.w	r8, #4294967295
 8008618:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008720 <_strtod_l+0xb10>
 800861c:	4620      	mov	r0, r4
 800861e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008620:	f7fe fe76 	bl	8007310 <_Bfree>
 8008624:	4620      	mov	r0, r4
 8008626:	9908      	ldr	r1, [sp, #32]
 8008628:	f7fe fe72 	bl	8007310 <_Bfree>
 800862c:	4659      	mov	r1, fp
 800862e:	4620      	mov	r0, r4
 8008630:	f7fe fe6e 	bl	8007310 <_Bfree>
 8008634:	4631      	mov	r1, r6
 8008636:	4620      	mov	r0, r4
 8008638:	f7fe fe6a 	bl	8007310 <_Bfree>
 800863c:	e605      	b.n	800824a <_strtod_l+0x63a>
 800863e:	f1b8 0f01 	cmp.w	r8, #1
 8008642:	d103      	bne.n	800864c <_strtod_l+0xa3c>
 8008644:	f1b9 0f00 	cmp.w	r9, #0
 8008648:	f43f ad91 	beq.w	800816e <_strtod_l+0x55e>
 800864c:	2200      	movs	r2, #0
 800864e:	4b39      	ldr	r3, [pc, #228]	; (8008734 <_strtod_l+0xb24>)
 8008650:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008652:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008656:	e016      	b.n	8008686 <_strtod_l+0xa76>
 8008658:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800865a:	4f33      	ldr	r7, [pc, #204]	; (8008728 <_strtod_l+0xb18>)
 800865c:	e7a9      	b.n	80085b2 <_strtod_l+0x9a2>
 800865e:	4b32      	ldr	r3, [pc, #200]	; (8008728 <_strtod_l+0xb18>)
 8008660:	2200      	movs	r2, #0
 8008662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008666:	f7f8 f857 	bl	8000718 <__aeabi_dmul>
 800866a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866c:	4605      	mov	r5, r0
 800866e:	460f      	mov	r7, r1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d09e      	beq.n	80085b2 <_strtod_l+0x9a2>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800867c:	e79d      	b.n	80085ba <_strtod_l+0x9aa>
 800867e:	2200      	movs	r2, #0
 8008680:	4b28      	ldr	r3, [pc, #160]	; (8008724 <_strtod_l+0xb14>)
 8008682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008686:	4f27      	ldr	r7, [pc, #156]	; (8008724 <_strtod_l+0xb14>)
 8008688:	e797      	b.n	80085ba <_strtod_l+0x9aa>
 800868a:	2200      	movs	r2, #0
 800868c:	4b29      	ldr	r3, [pc, #164]	; (8008734 <_strtod_l+0xb24>)
 800868e:	4645      	mov	r5, r8
 8008690:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008694:	e7f7      	b.n	8008686 <_strtod_l+0xa76>
 8008696:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800869a:	9b05      	ldr	r3, [sp, #20]
 800869c:	46ca      	mov	sl, r9
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1bc      	bne.n	800861c <_strtod_l+0xa0c>
 80086a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086a8:	0d1b      	lsrs	r3, r3, #20
 80086aa:	051b      	lsls	r3, r3, #20
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d1b5      	bne.n	800861c <_strtod_l+0xa0c>
 80086b0:	4628      	mov	r0, r5
 80086b2:	4639      	mov	r1, r7
 80086b4:	f7f8 fd1c 	bl	80010f0 <__aeabi_d2lz>
 80086b8:	f7f8 f800 	bl	80006bc <__aeabi_l2d>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4628      	mov	r0, r5
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f7 fe70 	bl	80003a8 <__aeabi_dsub>
 80086c8:	460b      	mov	r3, r1
 80086ca:	4602      	mov	r2, r0
 80086cc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80086d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80086d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d6:	ea4a 0a08 	orr.w	sl, sl, r8
 80086da:	ea5a 0a03 	orrs.w	sl, sl, r3
 80086de:	d06c      	beq.n	80087ba <_strtod_l+0xbaa>
 80086e0:	a309      	add	r3, pc, #36	; (adr r3, 8008708 <_strtod_l+0xaf8>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f8 fa89 	bl	8000bfc <__aeabi_dcmplt>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	f47f acd8 	bne.w	80080a0 <_strtod_l+0x490>
 80086f0:	a307      	add	r3, pc, #28	; (adr r3, 8008710 <_strtod_l+0xb00>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086fa:	f7f8 fa9d 	bl	8000c38 <__aeabi_dcmpgt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d08c      	beq.n	800861c <_strtod_l+0xa0c>
 8008702:	e4cd      	b.n	80080a0 <_strtod_l+0x490>
 8008704:	f3af 8000 	nop.w
 8008708:	94a03595 	.word	0x94a03595
 800870c:	3fdfffff 	.word	0x3fdfffff
 8008710:	35afe535 	.word	0x35afe535
 8008714:	3fe00000 	.word	0x3fe00000
 8008718:	000fffff 	.word	0x000fffff
 800871c:	7ff00000 	.word	0x7ff00000
 8008720:	7fefffff 	.word	0x7fefffff
 8008724:	3ff00000 	.word	0x3ff00000
 8008728:	3fe00000 	.word	0x3fe00000
 800872c:	7fe00000 	.word	0x7fe00000
 8008730:	7c9fffff 	.word	0x7c9fffff
 8008734:	bff00000 	.word	0xbff00000
 8008738:	9b05      	ldr	r3, [sp, #20]
 800873a:	b333      	cbz	r3, 800878a <_strtod_l+0xb7a>
 800873c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800873e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008742:	d822      	bhi.n	800878a <_strtod_l+0xb7a>
 8008744:	a328      	add	r3, pc, #160	; (adr r3, 80087e8 <_strtod_l+0xbd8>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	4628      	mov	r0, r5
 800874c:	4639      	mov	r1, r7
 800874e:	f7f8 fa5f 	bl	8000c10 <__aeabi_dcmple>
 8008752:	b1a0      	cbz	r0, 800877e <_strtod_l+0xb6e>
 8008754:	4639      	mov	r1, r7
 8008756:	4628      	mov	r0, r5
 8008758:	f7f8 fab6 	bl	8000cc8 <__aeabi_d2uiz>
 800875c:	2801      	cmp	r0, #1
 800875e:	bf38      	it	cc
 8008760:	2001      	movcc	r0, #1
 8008762:	f7f7 ff5f 	bl	8000624 <__aeabi_ui2d>
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	4605      	mov	r5, r0
 800876a:	460f      	mov	r7, r1
 800876c:	bb03      	cbnz	r3, 80087b0 <_strtod_l+0xba0>
 800876e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008772:	9014      	str	r0, [sp, #80]	; 0x50
 8008774:	9315      	str	r3, [sp, #84]	; 0x54
 8008776:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800877a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800877e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008782:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	9311      	str	r3, [sp, #68]	; 0x44
 800878a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800878c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800878e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008792:	f7ff f8e9 	bl	8007968 <__ulp>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 ffbb 	bl	8000718 <__aeabi_dmul>
 80087a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a6:	f7f7 fe01 	bl	80003ac <__adddf3>
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	e774      	b.n	800869a <_strtod_l+0xa8a>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80087b8:	e7dd      	b.n	8008776 <_strtod_l+0xb66>
 80087ba:	a30d      	add	r3, pc, #52	; (adr r3, 80087f0 <_strtod_l+0xbe0>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f8 fa1c 	bl	8000bfc <__aeabi_dcmplt>
 80087c4:	e79b      	b.n	80086fe <_strtod_l+0xaee>
 80087c6:	2300      	movs	r3, #0
 80087c8:	930e      	str	r3, [sp, #56]	; 0x38
 80087ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	f7ff ba5b 	b.w	8007c8a <_strtod_l+0x7a>
 80087d4:	2a65      	cmp	r2, #101	; 0x65
 80087d6:	f43f ab52 	beq.w	8007e7e <_strtod_l+0x26e>
 80087da:	2a45      	cmp	r2, #69	; 0x45
 80087dc:	f43f ab4f 	beq.w	8007e7e <_strtod_l+0x26e>
 80087e0:	2301      	movs	r3, #1
 80087e2:	f7ff bb87 	b.w	8007ef4 <_strtod_l+0x2e4>
 80087e6:	bf00      	nop
 80087e8:	ffc00000 	.word	0xffc00000
 80087ec:	41dfffff 	.word	0x41dfffff
 80087f0:	94a03595 	.word	0x94a03595
 80087f4:	3fcfffff 	.word	0x3fcfffff

080087f8 <_strtod_r>:
 80087f8:	4b01      	ldr	r3, [pc, #4]	; (8008800 <_strtod_r+0x8>)
 80087fa:	f7ff ba09 	b.w	8007c10 <_strtod_l>
 80087fe:	bf00      	nop
 8008800:	2000006c 	.word	0x2000006c

08008804 <_strtol_l.constprop.0>:
 8008804:	2b01      	cmp	r3, #1
 8008806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800880a:	4686      	mov	lr, r0
 800880c:	4690      	mov	r8, r2
 800880e:	d001      	beq.n	8008814 <_strtol_l.constprop.0+0x10>
 8008810:	2b24      	cmp	r3, #36	; 0x24
 8008812:	d906      	bls.n	8008822 <_strtol_l.constprop.0+0x1e>
 8008814:	f7fd fd94 	bl	8006340 <__errno>
 8008818:	2316      	movs	r3, #22
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	2000      	movs	r0, #0
 800881e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008822:	460d      	mov	r5, r1
 8008824:	4835      	ldr	r0, [pc, #212]	; (80088fc <_strtol_l.constprop.0+0xf8>)
 8008826:	462a      	mov	r2, r5
 8008828:	f815 4b01 	ldrb.w	r4, [r5], #1
 800882c:	5d06      	ldrb	r6, [r0, r4]
 800882e:	f016 0608 	ands.w	r6, r6, #8
 8008832:	d1f8      	bne.n	8008826 <_strtol_l.constprop.0+0x22>
 8008834:	2c2d      	cmp	r4, #45	; 0x2d
 8008836:	d12e      	bne.n	8008896 <_strtol_l.constprop.0+0x92>
 8008838:	2601      	movs	r6, #1
 800883a:	782c      	ldrb	r4, [r5, #0]
 800883c:	1c95      	adds	r5, r2, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	d057      	beq.n	80088f2 <_strtol_l.constprop.0+0xee>
 8008842:	2b10      	cmp	r3, #16
 8008844:	d109      	bne.n	800885a <_strtol_l.constprop.0+0x56>
 8008846:	2c30      	cmp	r4, #48	; 0x30
 8008848:	d107      	bne.n	800885a <_strtol_l.constprop.0+0x56>
 800884a:	782a      	ldrb	r2, [r5, #0]
 800884c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008850:	2a58      	cmp	r2, #88	; 0x58
 8008852:	d149      	bne.n	80088e8 <_strtol_l.constprop.0+0xe4>
 8008854:	2310      	movs	r3, #16
 8008856:	786c      	ldrb	r4, [r5, #1]
 8008858:	3502      	adds	r5, #2
 800885a:	2200      	movs	r2, #0
 800885c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008860:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008864:	fbbc f9f3 	udiv	r9, ip, r3
 8008868:	4610      	mov	r0, r2
 800886a:	fb03 ca19 	mls	sl, r3, r9, ip
 800886e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008872:	2f09      	cmp	r7, #9
 8008874:	d814      	bhi.n	80088a0 <_strtol_l.constprop.0+0x9c>
 8008876:	463c      	mov	r4, r7
 8008878:	42a3      	cmp	r3, r4
 800887a:	dd20      	ble.n	80088be <_strtol_l.constprop.0+0xba>
 800887c:	1c57      	adds	r7, r2, #1
 800887e:	d007      	beq.n	8008890 <_strtol_l.constprop.0+0x8c>
 8008880:	4581      	cmp	r9, r0
 8008882:	d319      	bcc.n	80088b8 <_strtol_l.constprop.0+0xb4>
 8008884:	d101      	bne.n	800888a <_strtol_l.constprop.0+0x86>
 8008886:	45a2      	cmp	sl, r4
 8008888:	db16      	blt.n	80088b8 <_strtol_l.constprop.0+0xb4>
 800888a:	2201      	movs	r2, #1
 800888c:	fb00 4003 	mla	r0, r0, r3, r4
 8008890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008894:	e7eb      	b.n	800886e <_strtol_l.constprop.0+0x6a>
 8008896:	2c2b      	cmp	r4, #43	; 0x2b
 8008898:	bf04      	itt	eq
 800889a:	782c      	ldrbeq	r4, [r5, #0]
 800889c:	1c95      	addeq	r5, r2, #2
 800889e:	e7ce      	b.n	800883e <_strtol_l.constprop.0+0x3a>
 80088a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80088a4:	2f19      	cmp	r7, #25
 80088a6:	d801      	bhi.n	80088ac <_strtol_l.constprop.0+0xa8>
 80088a8:	3c37      	subs	r4, #55	; 0x37
 80088aa:	e7e5      	b.n	8008878 <_strtol_l.constprop.0+0x74>
 80088ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80088b0:	2f19      	cmp	r7, #25
 80088b2:	d804      	bhi.n	80088be <_strtol_l.constprop.0+0xba>
 80088b4:	3c57      	subs	r4, #87	; 0x57
 80088b6:	e7df      	b.n	8008878 <_strtol_l.constprop.0+0x74>
 80088b8:	f04f 32ff 	mov.w	r2, #4294967295
 80088bc:	e7e8      	b.n	8008890 <_strtol_l.constprop.0+0x8c>
 80088be:	1c53      	adds	r3, r2, #1
 80088c0:	d108      	bne.n	80088d4 <_strtol_l.constprop.0+0xd0>
 80088c2:	2322      	movs	r3, #34	; 0x22
 80088c4:	4660      	mov	r0, ip
 80088c6:	f8ce 3000 	str.w	r3, [lr]
 80088ca:	f1b8 0f00 	cmp.w	r8, #0
 80088ce:	d0a6      	beq.n	800881e <_strtol_l.constprop.0+0x1a>
 80088d0:	1e69      	subs	r1, r5, #1
 80088d2:	e006      	b.n	80088e2 <_strtol_l.constprop.0+0xde>
 80088d4:	b106      	cbz	r6, 80088d8 <_strtol_l.constprop.0+0xd4>
 80088d6:	4240      	negs	r0, r0
 80088d8:	f1b8 0f00 	cmp.w	r8, #0
 80088dc:	d09f      	beq.n	800881e <_strtol_l.constprop.0+0x1a>
 80088de:	2a00      	cmp	r2, #0
 80088e0:	d1f6      	bne.n	80088d0 <_strtol_l.constprop.0+0xcc>
 80088e2:	f8c8 1000 	str.w	r1, [r8]
 80088e6:	e79a      	b.n	800881e <_strtol_l.constprop.0+0x1a>
 80088e8:	2430      	movs	r4, #48	; 0x30
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1b5      	bne.n	800885a <_strtol_l.constprop.0+0x56>
 80088ee:	2308      	movs	r3, #8
 80088f0:	e7b3      	b.n	800885a <_strtol_l.constprop.0+0x56>
 80088f2:	2c30      	cmp	r4, #48	; 0x30
 80088f4:	d0a9      	beq.n	800884a <_strtol_l.constprop.0+0x46>
 80088f6:	230a      	movs	r3, #10
 80088f8:	e7af      	b.n	800885a <_strtol_l.constprop.0+0x56>
 80088fa:	bf00      	nop
 80088fc:	08009da1 	.word	0x08009da1

08008900 <_strtol_r>:
 8008900:	f7ff bf80 	b.w	8008804 <_strtol_l.constprop.0>

08008904 <__ssputs_r>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	461f      	mov	r7, r3
 800890a:	688e      	ldr	r6, [r1, #8]
 800890c:	4682      	mov	sl, r0
 800890e:	42be      	cmp	r6, r7
 8008910:	460c      	mov	r4, r1
 8008912:	4690      	mov	r8, r2
 8008914:	680b      	ldr	r3, [r1, #0]
 8008916:	d82c      	bhi.n	8008972 <__ssputs_r+0x6e>
 8008918:	898a      	ldrh	r2, [r1, #12]
 800891a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800891e:	d026      	beq.n	800896e <__ssputs_r+0x6a>
 8008920:	6965      	ldr	r5, [r4, #20]
 8008922:	6909      	ldr	r1, [r1, #16]
 8008924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008928:	eba3 0901 	sub.w	r9, r3, r1
 800892c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008930:	1c7b      	adds	r3, r7, #1
 8008932:	444b      	add	r3, r9
 8008934:	106d      	asrs	r5, r5, #1
 8008936:	429d      	cmp	r5, r3
 8008938:	bf38      	it	cc
 800893a:	461d      	movcc	r5, r3
 800893c:	0553      	lsls	r3, r2, #21
 800893e:	d527      	bpl.n	8008990 <__ssputs_r+0x8c>
 8008940:	4629      	mov	r1, r5
 8008942:	f7fe fc19 	bl	8007178 <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b360      	cbz	r0, 80089a4 <__ssputs_r+0xa0>
 800894a:	464a      	mov	r2, r9
 800894c:	6921      	ldr	r1, [r4, #16]
 800894e:	f000 fa17 	bl	8008d80 <memcpy>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	6126      	str	r6, [r4, #16]
 8008960:	444e      	add	r6, r9
 8008962:	6026      	str	r6, [r4, #0]
 8008964:	463e      	mov	r6, r7
 8008966:	6165      	str	r5, [r4, #20]
 8008968:	eba5 0509 	sub.w	r5, r5, r9
 800896c:	60a5      	str	r5, [r4, #8]
 800896e:	42be      	cmp	r6, r7
 8008970:	d900      	bls.n	8008974 <__ssputs_r+0x70>
 8008972:	463e      	mov	r6, r7
 8008974:	4632      	mov	r2, r6
 8008976:	4641      	mov	r1, r8
 8008978:	6820      	ldr	r0, [r4, #0]
 800897a:	f000 f9c5 	bl	8008d08 <memmove>
 800897e:	2000      	movs	r0, #0
 8008980:	68a3      	ldr	r3, [r4, #8]
 8008982:	1b9b      	subs	r3, r3, r6
 8008984:	60a3      	str	r3, [r4, #8]
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	4433      	add	r3, r6
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008990:	462a      	mov	r2, r5
 8008992:	f000 fda6 	bl	80094e2 <_realloc_r>
 8008996:	4606      	mov	r6, r0
 8008998:	2800      	cmp	r0, #0
 800899a:	d1e0      	bne.n	800895e <__ssputs_r+0x5a>
 800899c:	4650      	mov	r0, sl
 800899e:	6921      	ldr	r1, [r4, #16]
 80089a0:	f7fe fb7a 	bl	8007098 <_free_r>
 80089a4:	230c      	movs	r3, #12
 80089a6:	f8ca 3000 	str.w	r3, [sl]
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	e7e9      	b.n	800898c <__ssputs_r+0x88>

080089b8 <_svfiprintf_r>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	4698      	mov	r8, r3
 80089be:	898b      	ldrh	r3, [r1, #12]
 80089c0:	4607      	mov	r7, r0
 80089c2:	061b      	lsls	r3, r3, #24
 80089c4:	460d      	mov	r5, r1
 80089c6:	4614      	mov	r4, r2
 80089c8:	b09d      	sub	sp, #116	; 0x74
 80089ca:	d50e      	bpl.n	80089ea <_svfiprintf_r+0x32>
 80089cc:	690b      	ldr	r3, [r1, #16]
 80089ce:	b963      	cbnz	r3, 80089ea <_svfiprintf_r+0x32>
 80089d0:	2140      	movs	r1, #64	; 0x40
 80089d2:	f7fe fbd1 	bl	8007178 <_malloc_r>
 80089d6:	6028      	str	r0, [r5, #0]
 80089d8:	6128      	str	r0, [r5, #16]
 80089da:	b920      	cbnz	r0, 80089e6 <_svfiprintf_r+0x2e>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	e0d0      	b.n	8008b88 <_svfiprintf_r+0x1d0>
 80089e6:	2340      	movs	r3, #64	; 0x40
 80089e8:	616b      	str	r3, [r5, #20]
 80089ea:	2300      	movs	r3, #0
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	2320      	movs	r3, #32
 80089f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f4:	2330      	movs	r3, #48	; 0x30
 80089f6:	f04f 0901 	mov.w	r9, #1
 80089fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80089fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008ba0 <_svfiprintf_r+0x1e8>
 8008a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a06:	4623      	mov	r3, r4
 8008a08:	469a      	mov	sl, r3
 8008a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a0e:	b10a      	cbz	r2, 8008a14 <_svfiprintf_r+0x5c>
 8008a10:	2a25      	cmp	r2, #37	; 0x25
 8008a12:	d1f9      	bne.n	8008a08 <_svfiprintf_r+0x50>
 8008a14:	ebba 0b04 	subs.w	fp, sl, r4
 8008a18:	d00b      	beq.n	8008a32 <_svfiprintf_r+0x7a>
 8008a1a:	465b      	mov	r3, fp
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7ff ff6f 	bl	8008904 <__ssputs_r>
 8008a26:	3001      	adds	r0, #1
 8008a28:	f000 80a9 	beq.w	8008b7e <_svfiprintf_r+0x1c6>
 8008a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a2e:	445a      	add	r2, fp
 8008a30:	9209      	str	r2, [sp, #36]	; 0x24
 8008a32:	f89a 3000 	ldrb.w	r3, [sl]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80a1 	beq.w	8008b7e <_svfiprintf_r+0x1c6>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a46:	f10a 0a01 	add.w	sl, sl, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	9307      	str	r3, [sp, #28]
 8008a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a52:	931a      	str	r3, [sp, #104]	; 0x68
 8008a54:	4654      	mov	r4, sl
 8008a56:	2205      	movs	r2, #5
 8008a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5c:	4850      	ldr	r0, [pc, #320]	; (8008ba0 <_svfiprintf_r+0x1e8>)
 8008a5e:	f7fd fc9b 	bl	8006398 <memchr>
 8008a62:	9a04      	ldr	r2, [sp, #16]
 8008a64:	b9d8      	cbnz	r0, 8008a9e <_svfiprintf_r+0xe6>
 8008a66:	06d0      	lsls	r0, r2, #27
 8008a68:	bf44      	itt	mi
 8008a6a:	2320      	movmi	r3, #32
 8008a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a70:	0711      	lsls	r1, r2, #28
 8008a72:	bf44      	itt	mi
 8008a74:	232b      	movmi	r3, #43	; 0x2b
 8008a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a80:	d015      	beq.n	8008aae <_svfiprintf_r+0xf6>
 8008a82:	4654      	mov	r4, sl
 8008a84:	2000      	movs	r0, #0
 8008a86:	f04f 0c0a 	mov.w	ip, #10
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a92:	3b30      	subs	r3, #48	; 0x30
 8008a94:	2b09      	cmp	r3, #9
 8008a96:	d94d      	bls.n	8008b34 <_svfiprintf_r+0x17c>
 8008a98:	b1b0      	cbz	r0, 8008ac8 <_svfiprintf_r+0x110>
 8008a9a:	9207      	str	r2, [sp, #28]
 8008a9c:	e014      	b.n	8008ac8 <_svfiprintf_r+0x110>
 8008a9e:	eba0 0308 	sub.w	r3, r0, r8
 8008aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	46a2      	mov	sl, r4
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	e7d2      	b.n	8008a54 <_svfiprintf_r+0x9c>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	1d19      	adds	r1, r3, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	9103      	str	r1, [sp, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfbb      	ittet	lt
 8008aba:	425b      	neglt	r3, r3
 8008abc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac0:	9307      	strge	r3, [sp, #28]
 8008ac2:	9307      	strlt	r3, [sp, #28]
 8008ac4:	bfb8      	it	lt
 8008ac6:	9204      	strlt	r2, [sp, #16]
 8008ac8:	7823      	ldrb	r3, [r4, #0]
 8008aca:	2b2e      	cmp	r3, #46	; 0x2e
 8008acc:	d10c      	bne.n	8008ae8 <_svfiprintf_r+0x130>
 8008ace:	7863      	ldrb	r3, [r4, #1]
 8008ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad2:	d134      	bne.n	8008b3e <_svfiprintf_r+0x186>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	3402      	adds	r4, #2
 8008ad8:	1d1a      	adds	r2, r3, #4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	9203      	str	r2, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bfb8      	it	lt
 8008ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ae6:	9305      	str	r3, [sp, #20]
 8008ae8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008ba4 <_svfiprintf_r+0x1ec>
 8008aec:	2203      	movs	r2, #3
 8008aee:	4650      	mov	r0, sl
 8008af0:	7821      	ldrb	r1, [r4, #0]
 8008af2:	f7fd fc51 	bl	8006398 <memchr>
 8008af6:	b138      	cbz	r0, 8008b08 <_svfiprintf_r+0x150>
 8008af8:	2240      	movs	r2, #64	; 0x40
 8008afa:	9b04      	ldr	r3, [sp, #16]
 8008afc:	eba0 000a 	sub.w	r0, r0, sl
 8008b00:	4082      	lsls	r2, r0
 8008b02:	4313      	orrs	r3, r2
 8008b04:	3401      	adds	r4, #1
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0c:	2206      	movs	r2, #6
 8008b0e:	4826      	ldr	r0, [pc, #152]	; (8008ba8 <_svfiprintf_r+0x1f0>)
 8008b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b14:	f7fd fc40 	bl	8006398 <memchr>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d038      	beq.n	8008b8e <_svfiprintf_r+0x1d6>
 8008b1c:	4b23      	ldr	r3, [pc, #140]	; (8008bac <_svfiprintf_r+0x1f4>)
 8008b1e:	bb1b      	cbnz	r3, 8008b68 <_svfiprintf_r+0x1b0>
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	3307      	adds	r3, #7
 8008b24:	f023 0307 	bic.w	r3, r3, #7
 8008b28:	3308      	adds	r3, #8
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2e:	4433      	add	r3, r6
 8008b30:	9309      	str	r3, [sp, #36]	; 0x24
 8008b32:	e768      	b.n	8008a06 <_svfiprintf_r+0x4e>
 8008b34:	460c      	mov	r4, r1
 8008b36:	2001      	movs	r0, #1
 8008b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b3c:	e7a6      	b.n	8008a8c <_svfiprintf_r+0xd4>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f04f 0c0a 	mov.w	ip, #10
 8008b44:	4619      	mov	r1, r3
 8008b46:	3401      	adds	r4, #1
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b50:	3a30      	subs	r2, #48	; 0x30
 8008b52:	2a09      	cmp	r2, #9
 8008b54:	d903      	bls.n	8008b5e <_svfiprintf_r+0x1a6>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0c6      	beq.n	8008ae8 <_svfiprintf_r+0x130>
 8008b5a:	9105      	str	r1, [sp, #20]
 8008b5c:	e7c4      	b.n	8008ae8 <_svfiprintf_r+0x130>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	2301      	movs	r3, #1
 8008b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b66:	e7f0      	b.n	8008b4a <_svfiprintf_r+0x192>
 8008b68:	ab03      	add	r3, sp, #12
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	4638      	mov	r0, r7
 8008b70:	4b0f      	ldr	r3, [pc, #60]	; (8008bb0 <_svfiprintf_r+0x1f8>)
 8008b72:	a904      	add	r1, sp, #16
 8008b74:	f7fc fc8e 	bl	8005494 <_printf_float>
 8008b78:	1c42      	adds	r2, r0, #1
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	d1d6      	bne.n	8008b2c <_svfiprintf_r+0x174>
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	065b      	lsls	r3, r3, #25
 8008b82:	f53f af2d 	bmi.w	80089e0 <_svfiprintf_r+0x28>
 8008b86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b88:	b01d      	add	sp, #116	; 0x74
 8008b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8e:	ab03      	add	r3, sp, #12
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	462a      	mov	r2, r5
 8008b94:	4638      	mov	r0, r7
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <_svfiprintf_r+0x1f8>)
 8008b98:	a904      	add	r1, sp, #16
 8008b9a:	f7fc ff1b 	bl	80059d4 <_printf_i>
 8008b9e:	e7eb      	b.n	8008b78 <_svfiprintf_r+0x1c0>
 8008ba0:	08009ea1 	.word	0x08009ea1
 8008ba4:	08009ea7 	.word	0x08009ea7
 8008ba8:	08009eab 	.word	0x08009eab
 8008bac:	08005495 	.word	0x08005495
 8008bb0:	08008905 	.word	0x08008905

08008bb4 <__sflush_r>:
 8008bb4:	898a      	ldrh	r2, [r1, #12]
 8008bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb8:	4605      	mov	r5, r0
 8008bba:	0710      	lsls	r0, r2, #28
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	d457      	bmi.n	8008c70 <__sflush_r+0xbc>
 8008bc0:	684b      	ldr	r3, [r1, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	dc04      	bgt.n	8008bd0 <__sflush_r+0x1c>
 8008bc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dc01      	bgt.n	8008bd0 <__sflush_r+0x1c>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	d0fa      	beq.n	8008bcc <__sflush_r+0x18>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bdc:	682f      	ldr	r7, [r5, #0]
 8008bde:	6a21      	ldr	r1, [r4, #32]
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	d032      	beq.n	8008c4a <__sflush_r+0x96>
 8008be4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	075a      	lsls	r2, r3, #29
 8008bea:	d505      	bpl.n	8008bf8 <__sflush_r+0x44>
 8008bec:	6863      	ldr	r3, [r4, #4]
 8008bee:	1ac0      	subs	r0, r0, r3
 8008bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf2:	b10b      	cbz	r3, 8008bf8 <__sflush_r+0x44>
 8008bf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bf6:	1ac0      	subs	r0, r0, r3
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bfe:	4628      	mov	r0, r5
 8008c00:	6a21      	ldr	r1, [r4, #32]
 8008c02:	47b0      	blx	r6
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	d106      	bne.n	8008c18 <__sflush_r+0x64>
 8008c0a:	6829      	ldr	r1, [r5, #0]
 8008c0c:	291d      	cmp	r1, #29
 8008c0e:	d82b      	bhi.n	8008c68 <__sflush_r+0xb4>
 8008c10:	4a28      	ldr	r2, [pc, #160]	; (8008cb4 <__sflush_r+0x100>)
 8008c12:	410a      	asrs	r2, r1
 8008c14:	07d6      	lsls	r6, r2, #31
 8008c16:	d427      	bmi.n	8008c68 <__sflush_r+0xb4>
 8008c18:	2200      	movs	r2, #0
 8008c1a:	6062      	str	r2, [r4, #4]
 8008c1c:	6922      	ldr	r2, [r4, #16]
 8008c1e:	04d9      	lsls	r1, r3, #19
 8008c20:	6022      	str	r2, [r4, #0]
 8008c22:	d504      	bpl.n	8008c2e <__sflush_r+0x7a>
 8008c24:	1c42      	adds	r2, r0, #1
 8008c26:	d101      	bne.n	8008c2c <__sflush_r+0x78>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b903      	cbnz	r3, 8008c2e <__sflush_r+0x7a>
 8008c2c:	6560      	str	r0, [r4, #84]	; 0x54
 8008c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c30:	602f      	str	r7, [r5, #0]
 8008c32:	2900      	cmp	r1, #0
 8008c34:	d0ca      	beq.n	8008bcc <__sflush_r+0x18>
 8008c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	d002      	beq.n	8008c44 <__sflush_r+0x90>
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7fe fa2a 	bl	8007098 <_free_r>
 8008c44:	2000      	movs	r0, #0
 8008c46:	6360      	str	r0, [r4, #52]	; 0x34
 8008c48:	e7c1      	b.n	8008bce <__sflush_r+0x1a>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b0      	blx	r6
 8008c50:	1c41      	adds	r1, r0, #1
 8008c52:	d1c8      	bne.n	8008be6 <__sflush_r+0x32>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0c5      	beq.n	8008be6 <__sflush_r+0x32>
 8008c5a:	2b1d      	cmp	r3, #29
 8008c5c:	d001      	beq.n	8008c62 <__sflush_r+0xae>
 8008c5e:	2b16      	cmp	r3, #22
 8008c60:	d101      	bne.n	8008c66 <__sflush_r+0xb2>
 8008c62:	602f      	str	r7, [r5, #0]
 8008c64:	e7b2      	b.n	8008bcc <__sflush_r+0x18>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6c:	81a3      	strh	r3, [r4, #12]
 8008c6e:	e7ae      	b.n	8008bce <__sflush_r+0x1a>
 8008c70:	690f      	ldr	r7, [r1, #16]
 8008c72:	2f00      	cmp	r7, #0
 8008c74:	d0aa      	beq.n	8008bcc <__sflush_r+0x18>
 8008c76:	0793      	lsls	r3, r2, #30
 8008c78:	bf18      	it	ne
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	680e      	ldr	r6, [r1, #0]
 8008c7e:	bf08      	it	eq
 8008c80:	694b      	ldreq	r3, [r1, #20]
 8008c82:	1bf6      	subs	r6, r6, r7
 8008c84:	600f      	str	r7, [r1, #0]
 8008c86:	608b      	str	r3, [r1, #8]
 8008c88:	2e00      	cmp	r6, #0
 8008c8a:	dd9f      	ble.n	8008bcc <__sflush_r+0x18>
 8008c8c:	4633      	mov	r3, r6
 8008c8e:	463a      	mov	r2, r7
 8008c90:	4628      	mov	r0, r5
 8008c92:	6a21      	ldr	r1, [r4, #32]
 8008c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c98:	47e0      	blx	ip
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	dc06      	bgt.n	8008cac <__sflush_r+0xf8>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca8:	81a3      	strh	r3, [r4, #12]
 8008caa:	e790      	b.n	8008bce <__sflush_r+0x1a>
 8008cac:	4407      	add	r7, r0
 8008cae:	1a36      	subs	r6, r6, r0
 8008cb0:	e7ea      	b.n	8008c88 <__sflush_r+0xd4>
 8008cb2:	bf00      	nop
 8008cb4:	dfbffffe 	.word	0xdfbffffe

08008cb8 <_fflush_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	690b      	ldr	r3, [r1, #16]
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b913      	cbnz	r3, 8008cc8 <_fflush_r+0x10>
 8008cc2:	2500      	movs	r5, #0
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	b118      	cbz	r0, 8008cd2 <_fflush_r+0x1a>
 8008cca:	6a03      	ldr	r3, [r0, #32]
 8008ccc:	b90b      	cbnz	r3, 8008cd2 <_fflush_r+0x1a>
 8008cce:	f7fd fa2b 	bl	8006128 <__sinit>
 8008cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f3      	beq.n	8008cc2 <_fflush_r+0xa>
 8008cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cdc:	07d0      	lsls	r0, r2, #31
 8008cde:	d404      	bmi.n	8008cea <_fflush_r+0x32>
 8008ce0:	0599      	lsls	r1, r3, #22
 8008ce2:	d402      	bmi.n	8008cea <_fflush_r+0x32>
 8008ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ce6:	f7fd fb55 	bl	8006394 <__retarget_lock_acquire_recursive>
 8008cea:	4628      	mov	r0, r5
 8008cec:	4621      	mov	r1, r4
 8008cee:	f7ff ff61 	bl	8008bb4 <__sflush_r>
 8008cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	07da      	lsls	r2, r3, #31
 8008cf8:	d4e4      	bmi.n	8008cc4 <_fflush_r+0xc>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	059b      	lsls	r3, r3, #22
 8008cfe:	d4e1      	bmi.n	8008cc4 <_fflush_r+0xc>
 8008d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d02:	f7fd fb48 	bl	8006396 <__retarget_lock_release_recursive>
 8008d06:	e7dd      	b.n	8008cc4 <_fflush_r+0xc>

08008d08 <memmove>:
 8008d08:	4288      	cmp	r0, r1
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	eb01 0402 	add.w	r4, r1, r2
 8008d10:	d902      	bls.n	8008d18 <memmove+0x10>
 8008d12:	4284      	cmp	r4, r0
 8008d14:	4623      	mov	r3, r4
 8008d16:	d807      	bhi.n	8008d28 <memmove+0x20>
 8008d18:	1e43      	subs	r3, r0, #1
 8008d1a:	42a1      	cmp	r1, r4
 8008d1c:	d008      	beq.n	8008d30 <memmove+0x28>
 8008d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d26:	e7f8      	b.n	8008d1a <memmove+0x12>
 8008d28:	4601      	mov	r1, r0
 8008d2a:	4402      	add	r2, r0
 8008d2c:	428a      	cmp	r2, r1
 8008d2e:	d100      	bne.n	8008d32 <memmove+0x2a>
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d3a:	e7f7      	b.n	8008d2c <memmove+0x24>

08008d3c <strncmp>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	b16a      	cbz	r2, 8008d5c <strncmp+0x20>
 8008d40:	3901      	subs	r1, #1
 8008d42:	1884      	adds	r4, r0, r2
 8008d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d103      	bne.n	8008d58 <strncmp+0x1c>
 8008d50:	42a0      	cmp	r0, r4
 8008d52:	d001      	beq.n	8008d58 <strncmp+0x1c>
 8008d54:	2a00      	cmp	r2, #0
 8008d56:	d1f5      	bne.n	8008d44 <strncmp+0x8>
 8008d58:	1ad0      	subs	r0, r2, r3
 8008d5a:	bd10      	pop	{r4, pc}
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	e7fc      	b.n	8008d5a <strncmp+0x1e>

08008d60 <_sbrk_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	2300      	movs	r3, #0
 8008d64:	4d05      	ldr	r5, [pc, #20]	; (8008d7c <_sbrk_r+0x1c>)
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	f7f8 fcd0 	bl	8001710 <_sbrk>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_sbrk_r+0x1a>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_sbrk_r+0x1a>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	200004f8 	.word	0x200004f8

08008d80 <memcpy>:
 8008d80:	440a      	add	r2, r1
 8008d82:	4291      	cmp	r1, r2
 8008d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d88:	d100      	bne.n	8008d8c <memcpy+0xc>
 8008d8a:	4770      	bx	lr
 8008d8c:	b510      	push	{r4, lr}
 8008d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d92:	4291      	cmp	r1, r2
 8008d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d98:	d1f9      	bne.n	8008d8e <memcpy+0xe>
 8008d9a:	bd10      	pop	{r4, pc}

08008d9c <nan>:
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	4901      	ldr	r1, [pc, #4]	; (8008da4 <nan+0x8>)
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	7ff80000 	.word	0x7ff80000

08008da8 <__assert_func>:
 8008da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008daa:	4614      	mov	r4, r2
 8008dac:	461a      	mov	r2, r3
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <__assert_func+0x2c>)
 8008db0:	4605      	mov	r5, r0
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68d8      	ldr	r0, [r3, #12]
 8008db6:	b14c      	cbz	r4, 8008dcc <__assert_func+0x24>
 8008db8:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <__assert_func+0x30>)
 8008dba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dbe:	9100      	str	r1, [sp, #0]
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	4906      	ldr	r1, [pc, #24]	; (8008ddc <__assert_func+0x34>)
 8008dc4:	f000 fbca 	bl	800955c <fiprintf>
 8008dc8:	f000 fbda 	bl	8009580 <abort>
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <__assert_func+0x38>)
 8008dce:	461c      	mov	r4, r3
 8008dd0:	e7f3      	b.n	8008dba <__assert_func+0x12>
 8008dd2:	bf00      	nop
 8008dd4:	20000068 	.word	0x20000068
 8008dd8:	08009eba 	.word	0x08009eba
 8008ddc:	08009ec7 	.word	0x08009ec7
 8008de0:	08009ef5 	.word	0x08009ef5

08008de4 <_calloc_r>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	fba1 5402 	umull	r5, r4, r1, r2
 8008dea:	b934      	cbnz	r4, 8008dfa <_calloc_r+0x16>
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7fe f9c3 	bl	8007178 <_malloc_r>
 8008df2:	4606      	mov	r6, r0
 8008df4:	b928      	cbnz	r0, 8008e02 <_calloc_r+0x1e>
 8008df6:	4630      	mov	r0, r6
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	220c      	movs	r2, #12
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	6002      	str	r2, [r0, #0]
 8008e00:	e7f9      	b.n	8008df6 <_calloc_r+0x12>
 8008e02:	462a      	mov	r2, r5
 8008e04:	4621      	mov	r1, r4
 8008e06:	f7fd fa49 	bl	800629c <memset>
 8008e0a:	e7f4      	b.n	8008df6 <_calloc_r+0x12>

08008e0c <rshift>:
 8008e0c:	6903      	ldr	r3, [r0, #16]
 8008e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e16:	f100 0414 	add.w	r4, r0, #20
 8008e1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e1e:	dd46      	ble.n	8008eae <rshift+0xa2>
 8008e20:	f011 011f 	ands.w	r1, r1, #31
 8008e24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e2c:	d10c      	bne.n	8008e48 <rshift+0x3c>
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f100 0710 	add.w	r7, r0, #16
 8008e34:	42b1      	cmp	r1, r6
 8008e36:	d335      	bcc.n	8008ea4 <rshift+0x98>
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	1eea      	subs	r2, r5, #3
 8008e3e:	4296      	cmp	r6, r2
 8008e40:	bf38      	it	cc
 8008e42:	2300      	movcc	r3, #0
 8008e44:	4423      	add	r3, r4
 8008e46:	e015      	b.n	8008e74 <rshift+0x68>
 8008e48:	46a1      	mov	r9, r4
 8008e4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e4e:	f1c1 0820 	rsb	r8, r1, #32
 8008e52:	40cf      	lsrs	r7, r1
 8008e54:	f105 0e04 	add.w	lr, r5, #4
 8008e58:	4576      	cmp	r6, lr
 8008e5a:	46f4      	mov	ip, lr
 8008e5c:	d816      	bhi.n	8008e8c <rshift+0x80>
 8008e5e:	1a9a      	subs	r2, r3, r2
 8008e60:	0092      	lsls	r2, r2, #2
 8008e62:	3a04      	subs	r2, #4
 8008e64:	3501      	adds	r5, #1
 8008e66:	42ae      	cmp	r6, r5
 8008e68:	bf38      	it	cc
 8008e6a:	2200      	movcc	r2, #0
 8008e6c:	18a3      	adds	r3, r4, r2
 8008e6e:	50a7      	str	r7, [r4, r2]
 8008e70:	b107      	cbz	r7, 8008e74 <rshift+0x68>
 8008e72:	3304      	adds	r3, #4
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	eba3 0204 	sub.w	r2, r3, r4
 8008e7a:	bf08      	it	eq
 8008e7c:	2300      	moveq	r3, #0
 8008e7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e82:	6102      	str	r2, [r0, #16]
 8008e84:	bf08      	it	eq
 8008e86:	6143      	streq	r3, [r0, #20]
 8008e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e8c:	f8dc c000 	ldr.w	ip, [ip]
 8008e90:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e94:	ea4c 0707 	orr.w	r7, ip, r7
 8008e98:	f849 7b04 	str.w	r7, [r9], #4
 8008e9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ea0:	40cf      	lsrs	r7, r1
 8008ea2:	e7d9      	b.n	8008e58 <rshift+0x4c>
 8008ea4:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ea8:	f847 cf04 	str.w	ip, [r7, #4]!
 8008eac:	e7c2      	b.n	8008e34 <rshift+0x28>
 8008eae:	4623      	mov	r3, r4
 8008eb0:	e7e0      	b.n	8008e74 <rshift+0x68>

08008eb2 <__hexdig_fun>:
 8008eb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008eb6:	2b09      	cmp	r3, #9
 8008eb8:	d802      	bhi.n	8008ec0 <__hexdig_fun+0xe>
 8008eba:	3820      	subs	r0, #32
 8008ebc:	b2c0      	uxtb	r0, r0
 8008ebe:	4770      	bx	lr
 8008ec0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ec4:	2b05      	cmp	r3, #5
 8008ec6:	d801      	bhi.n	8008ecc <__hexdig_fun+0x1a>
 8008ec8:	3847      	subs	r0, #71	; 0x47
 8008eca:	e7f7      	b.n	8008ebc <__hexdig_fun+0xa>
 8008ecc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ed0:	2b05      	cmp	r3, #5
 8008ed2:	d801      	bhi.n	8008ed8 <__hexdig_fun+0x26>
 8008ed4:	3827      	subs	r0, #39	; 0x27
 8008ed6:	e7f1      	b.n	8008ebc <__hexdig_fun+0xa>
 8008ed8:	2000      	movs	r0, #0
 8008eda:	4770      	bx	lr

08008edc <__gethex>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4681      	mov	r9, r0
 8008ee2:	468a      	mov	sl, r1
 8008ee4:	4617      	mov	r7, r2
 8008ee6:	680a      	ldr	r2, [r1, #0]
 8008ee8:	b085      	sub	sp, #20
 8008eea:	f102 0b02 	add.w	fp, r2, #2
 8008eee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ef2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ef6:	9302      	str	r3, [sp, #8]
 8008ef8:	32fe      	adds	r2, #254	; 0xfe
 8008efa:	eb02 030b 	add.w	r3, r2, fp
 8008efe:	46d8      	mov	r8, fp
 8008f00:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	2830      	cmp	r0, #48	; 0x30
 8008f08:	d0f7      	beq.n	8008efa <__gethex+0x1e>
 8008f0a:	f7ff ffd2 	bl	8008eb2 <__hexdig_fun>
 8008f0e:	4604      	mov	r4, r0
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d138      	bne.n	8008f86 <__gethex+0xaa>
 8008f14:	2201      	movs	r2, #1
 8008f16:	4640      	mov	r0, r8
 8008f18:	49a7      	ldr	r1, [pc, #668]	; (80091b8 <__gethex+0x2dc>)
 8008f1a:	f7ff ff0f 	bl	8008d3c <strncmp>
 8008f1e:	4606      	mov	r6, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d169      	bne.n	8008ff8 <__gethex+0x11c>
 8008f24:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008f28:	465d      	mov	r5, fp
 8008f2a:	f7ff ffc2 	bl	8008eb2 <__hexdig_fun>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d064      	beq.n	8008ffc <__gethex+0x120>
 8008f32:	465a      	mov	r2, fp
 8008f34:	7810      	ldrb	r0, [r2, #0]
 8008f36:	4690      	mov	r8, r2
 8008f38:	2830      	cmp	r0, #48	; 0x30
 8008f3a:	f102 0201 	add.w	r2, r2, #1
 8008f3e:	d0f9      	beq.n	8008f34 <__gethex+0x58>
 8008f40:	f7ff ffb7 	bl	8008eb2 <__hexdig_fun>
 8008f44:	2301      	movs	r3, #1
 8008f46:	fab0 f480 	clz	r4, r0
 8008f4a:	465e      	mov	r6, fp
 8008f4c:	0964      	lsrs	r4, r4, #5
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	4642      	mov	r2, r8
 8008f52:	4615      	mov	r5, r2
 8008f54:	7828      	ldrb	r0, [r5, #0]
 8008f56:	3201      	adds	r2, #1
 8008f58:	f7ff ffab 	bl	8008eb2 <__hexdig_fun>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1f8      	bne.n	8008f52 <__gethex+0x76>
 8008f60:	2201      	movs	r2, #1
 8008f62:	4628      	mov	r0, r5
 8008f64:	4994      	ldr	r1, [pc, #592]	; (80091b8 <__gethex+0x2dc>)
 8008f66:	f7ff fee9 	bl	8008d3c <strncmp>
 8008f6a:	b978      	cbnz	r0, 8008f8c <__gethex+0xb0>
 8008f6c:	b946      	cbnz	r6, 8008f80 <__gethex+0xa4>
 8008f6e:	1c6e      	adds	r6, r5, #1
 8008f70:	4632      	mov	r2, r6
 8008f72:	4615      	mov	r5, r2
 8008f74:	7828      	ldrb	r0, [r5, #0]
 8008f76:	3201      	adds	r2, #1
 8008f78:	f7ff ff9b 	bl	8008eb2 <__hexdig_fun>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d1f8      	bne.n	8008f72 <__gethex+0x96>
 8008f80:	1b73      	subs	r3, r6, r5
 8008f82:	009e      	lsls	r6, r3, #2
 8008f84:	e004      	b.n	8008f90 <__gethex+0xb4>
 8008f86:	2400      	movs	r4, #0
 8008f88:	4626      	mov	r6, r4
 8008f8a:	e7e1      	b.n	8008f50 <__gethex+0x74>
 8008f8c:	2e00      	cmp	r6, #0
 8008f8e:	d1f7      	bne.n	8008f80 <__gethex+0xa4>
 8008f90:	782b      	ldrb	r3, [r5, #0]
 8008f92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f96:	2b50      	cmp	r3, #80	; 0x50
 8008f98:	d13d      	bne.n	8009016 <__gethex+0x13a>
 8008f9a:	786b      	ldrb	r3, [r5, #1]
 8008f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8008f9e:	d02f      	beq.n	8009000 <__gethex+0x124>
 8008fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8008fa2:	d031      	beq.n	8009008 <__gethex+0x12c>
 8008fa4:	f04f 0b00 	mov.w	fp, #0
 8008fa8:	1c69      	adds	r1, r5, #1
 8008faa:	7808      	ldrb	r0, [r1, #0]
 8008fac:	f7ff ff81 	bl	8008eb2 <__hexdig_fun>
 8008fb0:	1e42      	subs	r2, r0, #1
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	2a18      	cmp	r2, #24
 8008fb6:	d82e      	bhi.n	8009016 <__gethex+0x13a>
 8008fb8:	f1a0 0210 	sub.w	r2, r0, #16
 8008fbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fc0:	f7ff ff77 	bl	8008eb2 <__hexdig_fun>
 8008fc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008fc8:	fa5f fc8c 	uxtb.w	ip, ip
 8008fcc:	f1bc 0f18 	cmp.w	ip, #24
 8008fd0:	d91d      	bls.n	800900e <__gethex+0x132>
 8008fd2:	f1bb 0f00 	cmp.w	fp, #0
 8008fd6:	d000      	beq.n	8008fda <__gethex+0xfe>
 8008fd8:	4252      	negs	r2, r2
 8008fda:	4416      	add	r6, r2
 8008fdc:	f8ca 1000 	str.w	r1, [sl]
 8008fe0:	b1dc      	cbz	r4, 800901a <__gethex+0x13e>
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bf14      	ite	ne
 8008fe8:	f04f 0800 	movne.w	r8, #0
 8008fec:	f04f 0806 	moveq.w	r8, #6
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	b005      	add	sp, #20
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	4645      	mov	r5, r8
 8008ffa:	4626      	mov	r6, r4
 8008ffc:	2401      	movs	r4, #1
 8008ffe:	e7c7      	b.n	8008f90 <__gethex+0xb4>
 8009000:	f04f 0b00 	mov.w	fp, #0
 8009004:	1ca9      	adds	r1, r5, #2
 8009006:	e7d0      	b.n	8008faa <__gethex+0xce>
 8009008:	f04f 0b01 	mov.w	fp, #1
 800900c:	e7fa      	b.n	8009004 <__gethex+0x128>
 800900e:	230a      	movs	r3, #10
 8009010:	fb03 0002 	mla	r0, r3, r2, r0
 8009014:	e7d0      	b.n	8008fb8 <__gethex+0xdc>
 8009016:	4629      	mov	r1, r5
 8009018:	e7e0      	b.n	8008fdc <__gethex+0x100>
 800901a:	4621      	mov	r1, r4
 800901c:	eba5 0308 	sub.w	r3, r5, r8
 8009020:	3b01      	subs	r3, #1
 8009022:	2b07      	cmp	r3, #7
 8009024:	dc0a      	bgt.n	800903c <__gethex+0x160>
 8009026:	4648      	mov	r0, r9
 8009028:	f7fe f932 	bl	8007290 <_Balloc>
 800902c:	4604      	mov	r4, r0
 800902e:	b940      	cbnz	r0, 8009042 <__gethex+0x166>
 8009030:	4602      	mov	r2, r0
 8009032:	21e4      	movs	r1, #228	; 0xe4
 8009034:	4b61      	ldr	r3, [pc, #388]	; (80091bc <__gethex+0x2e0>)
 8009036:	4862      	ldr	r0, [pc, #392]	; (80091c0 <__gethex+0x2e4>)
 8009038:	f7ff feb6 	bl	8008da8 <__assert_func>
 800903c:	3101      	adds	r1, #1
 800903e:	105b      	asrs	r3, r3, #1
 8009040:	e7ef      	b.n	8009022 <__gethex+0x146>
 8009042:	2300      	movs	r3, #0
 8009044:	469b      	mov	fp, r3
 8009046:	f100 0a14 	add.w	sl, r0, #20
 800904a:	f8cd a004 	str.w	sl, [sp, #4]
 800904e:	45a8      	cmp	r8, r5
 8009050:	d344      	bcc.n	80090dc <__gethex+0x200>
 8009052:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009056:	4658      	mov	r0, fp
 8009058:	f848 bb04 	str.w	fp, [r8], #4
 800905c:	eba8 080a 	sub.w	r8, r8, sl
 8009060:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009064:	6122      	str	r2, [r4, #16]
 8009066:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800906a:	f7fe fa03 	bl	8007474 <__hi0bits>
 800906e:	683d      	ldr	r5, [r7, #0]
 8009070:	eba8 0800 	sub.w	r8, r8, r0
 8009074:	45a8      	cmp	r8, r5
 8009076:	dd59      	ble.n	800912c <__gethex+0x250>
 8009078:	eba8 0805 	sub.w	r8, r8, r5
 800907c:	4641      	mov	r1, r8
 800907e:	4620      	mov	r0, r4
 8009080:	f7fe fd81 	bl	8007b86 <__any_on>
 8009084:	4683      	mov	fp, r0
 8009086:	b1b8      	cbz	r0, 80090b8 <__gethex+0x1dc>
 8009088:	f04f 0b01 	mov.w	fp, #1
 800908c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009090:	1159      	asrs	r1, r3, #5
 8009092:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009096:	f003 021f 	and.w	r2, r3, #31
 800909a:	fa0b f202 	lsl.w	r2, fp, r2
 800909e:	420a      	tst	r2, r1
 80090a0:	d00a      	beq.n	80090b8 <__gethex+0x1dc>
 80090a2:	455b      	cmp	r3, fp
 80090a4:	dd06      	ble.n	80090b4 <__gethex+0x1d8>
 80090a6:	4620      	mov	r0, r4
 80090a8:	f1a8 0102 	sub.w	r1, r8, #2
 80090ac:	f7fe fd6b 	bl	8007b86 <__any_on>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d138      	bne.n	8009126 <__gethex+0x24a>
 80090b4:	f04f 0b02 	mov.w	fp, #2
 80090b8:	4641      	mov	r1, r8
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7ff fea6 	bl	8008e0c <rshift>
 80090c0:	4446      	add	r6, r8
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	42b3      	cmp	r3, r6
 80090c6:	da41      	bge.n	800914c <__gethex+0x270>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4648      	mov	r0, r9
 80090cc:	f7fe f920 	bl	8007310 <_Bfree>
 80090d0:	2300      	movs	r3, #0
 80090d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	e789      	b.n	8008ff0 <__gethex+0x114>
 80090dc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80090e0:	2a2e      	cmp	r2, #46	; 0x2e
 80090e2:	d014      	beq.n	800910e <__gethex+0x232>
 80090e4:	2b20      	cmp	r3, #32
 80090e6:	d106      	bne.n	80090f6 <__gethex+0x21a>
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	f843 bb04 	str.w	fp, [r3], #4
 80090ee:	f04f 0b00 	mov.w	fp, #0
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	465b      	mov	r3, fp
 80090f6:	7828      	ldrb	r0, [r5, #0]
 80090f8:	9303      	str	r3, [sp, #12]
 80090fa:	f7ff feda 	bl	8008eb2 <__hexdig_fun>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	f000 000f 	and.w	r0, r0, #15
 8009104:	4098      	lsls	r0, r3
 8009106:	ea4b 0b00 	orr.w	fp, fp, r0
 800910a:	3304      	adds	r3, #4
 800910c:	e79f      	b.n	800904e <__gethex+0x172>
 800910e:	45a8      	cmp	r8, r5
 8009110:	d8e8      	bhi.n	80090e4 <__gethex+0x208>
 8009112:	2201      	movs	r2, #1
 8009114:	4628      	mov	r0, r5
 8009116:	4928      	ldr	r1, [pc, #160]	; (80091b8 <__gethex+0x2dc>)
 8009118:	9303      	str	r3, [sp, #12]
 800911a:	f7ff fe0f 	bl	8008d3c <strncmp>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	2800      	cmp	r0, #0
 8009122:	d1df      	bne.n	80090e4 <__gethex+0x208>
 8009124:	e793      	b.n	800904e <__gethex+0x172>
 8009126:	f04f 0b03 	mov.w	fp, #3
 800912a:	e7c5      	b.n	80090b8 <__gethex+0x1dc>
 800912c:	da0b      	bge.n	8009146 <__gethex+0x26a>
 800912e:	eba5 0808 	sub.w	r8, r5, r8
 8009132:	4621      	mov	r1, r4
 8009134:	4642      	mov	r2, r8
 8009136:	4648      	mov	r0, r9
 8009138:	f7fe fb02 	bl	8007740 <__lshift>
 800913c:	4604      	mov	r4, r0
 800913e:	eba6 0608 	sub.w	r6, r6, r8
 8009142:	f100 0a14 	add.w	sl, r0, #20
 8009146:	f04f 0b00 	mov.w	fp, #0
 800914a:	e7ba      	b.n	80090c2 <__gethex+0x1e6>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	42b3      	cmp	r3, r6
 8009150:	dd74      	ble.n	800923c <__gethex+0x360>
 8009152:	1b9e      	subs	r6, r3, r6
 8009154:	42b5      	cmp	r5, r6
 8009156:	dc35      	bgt.n	80091c4 <__gethex+0x2e8>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d023      	beq.n	80091a6 <__gethex+0x2ca>
 800915e:	2b03      	cmp	r3, #3
 8009160:	d025      	beq.n	80091ae <__gethex+0x2d2>
 8009162:	2b01      	cmp	r3, #1
 8009164:	d115      	bne.n	8009192 <__gethex+0x2b6>
 8009166:	42b5      	cmp	r5, r6
 8009168:	d113      	bne.n	8009192 <__gethex+0x2b6>
 800916a:	2d01      	cmp	r5, #1
 800916c:	d10b      	bne.n	8009186 <__gethex+0x2aa>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	9a02      	ldr	r2, [sp, #8]
 8009172:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	2301      	movs	r3, #1
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	f8ca 3000 	str.w	r3, [sl]
 8009180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009182:	601c      	str	r4, [r3, #0]
 8009184:	e734      	b.n	8008ff0 <__gethex+0x114>
 8009186:	4620      	mov	r0, r4
 8009188:	1e69      	subs	r1, r5, #1
 800918a:	f7fe fcfc 	bl	8007b86 <__any_on>
 800918e:	2800      	cmp	r0, #0
 8009190:	d1ed      	bne.n	800916e <__gethex+0x292>
 8009192:	4621      	mov	r1, r4
 8009194:	4648      	mov	r0, r9
 8009196:	f7fe f8bb 	bl	8007310 <_Bfree>
 800919a:	2300      	movs	r3, #0
 800919c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800919e:	f04f 0850 	mov.w	r8, #80	; 0x50
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	e724      	b.n	8008ff0 <__gethex+0x114>
 80091a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1f2      	bne.n	8009192 <__gethex+0x2b6>
 80091ac:	e7df      	b.n	800916e <__gethex+0x292>
 80091ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1dc      	bne.n	800916e <__gethex+0x292>
 80091b4:	e7ed      	b.n	8009192 <__gethex+0x2b6>
 80091b6:	bf00      	nop
 80091b8:	08009d4c 	.word	0x08009d4c
 80091bc:	08009bdf 	.word	0x08009bdf
 80091c0:	08009ef6 	.word	0x08009ef6
 80091c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80091c8:	f1bb 0f00 	cmp.w	fp, #0
 80091cc:	d133      	bne.n	8009236 <__gethex+0x35a>
 80091ce:	f1b8 0f00 	cmp.w	r8, #0
 80091d2:	d004      	beq.n	80091de <__gethex+0x302>
 80091d4:	4641      	mov	r1, r8
 80091d6:	4620      	mov	r0, r4
 80091d8:	f7fe fcd5 	bl	8007b86 <__any_on>
 80091dc:	4683      	mov	fp, r0
 80091de:	2301      	movs	r3, #1
 80091e0:	ea4f 1268 	mov.w	r2, r8, asr #5
 80091e4:	f008 081f 	and.w	r8, r8, #31
 80091e8:	fa03 f308 	lsl.w	r3, r3, r8
 80091ec:	f04f 0802 	mov.w	r8, #2
 80091f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80091f4:	4631      	mov	r1, r6
 80091f6:	4213      	tst	r3, r2
 80091f8:	4620      	mov	r0, r4
 80091fa:	bf18      	it	ne
 80091fc:	f04b 0b02 	orrne.w	fp, fp, #2
 8009200:	1bad      	subs	r5, r5, r6
 8009202:	f7ff fe03 	bl	8008e0c <rshift>
 8009206:	687e      	ldr	r6, [r7, #4]
 8009208:	f1bb 0f00 	cmp.w	fp, #0
 800920c:	d04a      	beq.n	80092a4 <__gethex+0x3c8>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d016      	beq.n	8009242 <__gethex+0x366>
 8009214:	2b03      	cmp	r3, #3
 8009216:	d018      	beq.n	800924a <__gethex+0x36e>
 8009218:	2b01      	cmp	r3, #1
 800921a:	d109      	bne.n	8009230 <__gethex+0x354>
 800921c:	f01b 0f02 	tst.w	fp, #2
 8009220:	d006      	beq.n	8009230 <__gethex+0x354>
 8009222:	f8da 3000 	ldr.w	r3, [sl]
 8009226:	ea4b 0b03 	orr.w	fp, fp, r3
 800922a:	f01b 0f01 	tst.w	fp, #1
 800922e:	d10f      	bne.n	8009250 <__gethex+0x374>
 8009230:	f048 0810 	orr.w	r8, r8, #16
 8009234:	e036      	b.n	80092a4 <__gethex+0x3c8>
 8009236:	f04f 0b01 	mov.w	fp, #1
 800923a:	e7d0      	b.n	80091de <__gethex+0x302>
 800923c:	f04f 0801 	mov.w	r8, #1
 8009240:	e7e2      	b.n	8009208 <__gethex+0x32c>
 8009242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009244:	f1c3 0301 	rsb	r3, r3, #1
 8009248:	930f      	str	r3, [sp, #60]	; 0x3c
 800924a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0ef      	beq.n	8009230 <__gethex+0x354>
 8009250:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009254:	f104 0214 	add.w	r2, r4, #20
 8009258:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	2300      	movs	r3, #0
 8009260:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009264:	4694      	mov	ip, r2
 8009266:	f852 1b04 	ldr.w	r1, [r2], #4
 800926a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800926e:	d01e      	beq.n	80092ae <__gethex+0x3d2>
 8009270:	3101      	adds	r1, #1
 8009272:	f8cc 1000 	str.w	r1, [ip]
 8009276:	f1b8 0f02 	cmp.w	r8, #2
 800927a:	f104 0214 	add.w	r2, r4, #20
 800927e:	d13d      	bne.n	80092fc <__gethex+0x420>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	3b01      	subs	r3, #1
 8009284:	42ab      	cmp	r3, r5
 8009286:	d10b      	bne.n	80092a0 <__gethex+0x3c4>
 8009288:	2301      	movs	r3, #1
 800928a:	1169      	asrs	r1, r5, #5
 800928c:	f005 051f 	and.w	r5, r5, #31
 8009290:	fa03 f505 	lsl.w	r5, r3, r5
 8009294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009298:	421d      	tst	r5, r3
 800929a:	bf18      	it	ne
 800929c:	f04f 0801 	movne.w	r8, #1
 80092a0:	f048 0820 	orr.w	r8, r8, #32
 80092a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092a6:	601c      	str	r4, [r3, #0]
 80092a8:	9b02      	ldr	r3, [sp, #8]
 80092aa:	601e      	str	r6, [r3, #0]
 80092ac:	e6a0      	b.n	8008ff0 <__gethex+0x114>
 80092ae:	4290      	cmp	r0, r2
 80092b0:	f842 3c04 	str.w	r3, [r2, #-4]
 80092b4:	d8d6      	bhi.n	8009264 <__gethex+0x388>
 80092b6:	68a2      	ldr	r2, [r4, #8]
 80092b8:	4593      	cmp	fp, r2
 80092ba:	db17      	blt.n	80092ec <__gethex+0x410>
 80092bc:	6861      	ldr	r1, [r4, #4]
 80092be:	4648      	mov	r0, r9
 80092c0:	3101      	adds	r1, #1
 80092c2:	f7fd ffe5 	bl	8007290 <_Balloc>
 80092c6:	4682      	mov	sl, r0
 80092c8:	b918      	cbnz	r0, 80092d2 <__gethex+0x3f6>
 80092ca:	4602      	mov	r2, r0
 80092cc:	2184      	movs	r1, #132	; 0x84
 80092ce:	4b1a      	ldr	r3, [pc, #104]	; (8009338 <__gethex+0x45c>)
 80092d0:	e6b1      	b.n	8009036 <__gethex+0x15a>
 80092d2:	6922      	ldr	r2, [r4, #16]
 80092d4:	f104 010c 	add.w	r1, r4, #12
 80092d8:	3202      	adds	r2, #2
 80092da:	0092      	lsls	r2, r2, #2
 80092dc:	300c      	adds	r0, #12
 80092de:	f7ff fd4f 	bl	8008d80 <memcpy>
 80092e2:	4621      	mov	r1, r4
 80092e4:	4648      	mov	r0, r9
 80092e6:	f7fe f813 	bl	8007310 <_Bfree>
 80092ea:	4654      	mov	r4, sl
 80092ec:	6922      	ldr	r2, [r4, #16]
 80092ee:	1c51      	adds	r1, r2, #1
 80092f0:	6121      	str	r1, [r4, #16]
 80092f2:	2101      	movs	r1, #1
 80092f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80092f8:	6151      	str	r1, [r2, #20]
 80092fa:	e7bc      	b.n	8009276 <__gethex+0x39a>
 80092fc:	6921      	ldr	r1, [r4, #16]
 80092fe:	4559      	cmp	r1, fp
 8009300:	dd0b      	ble.n	800931a <__gethex+0x43e>
 8009302:	2101      	movs	r1, #1
 8009304:	4620      	mov	r0, r4
 8009306:	f7ff fd81 	bl	8008e0c <rshift>
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	3601      	adds	r6, #1
 800930e:	42b3      	cmp	r3, r6
 8009310:	f6ff aeda 	blt.w	80090c8 <__gethex+0x1ec>
 8009314:	f04f 0801 	mov.w	r8, #1
 8009318:	e7c2      	b.n	80092a0 <__gethex+0x3c4>
 800931a:	f015 051f 	ands.w	r5, r5, #31
 800931e:	d0f9      	beq.n	8009314 <__gethex+0x438>
 8009320:	9b01      	ldr	r3, [sp, #4]
 8009322:	f1c5 0520 	rsb	r5, r5, #32
 8009326:	441a      	add	r2, r3
 8009328:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800932c:	f7fe f8a2 	bl	8007474 <__hi0bits>
 8009330:	42a8      	cmp	r0, r5
 8009332:	dbe6      	blt.n	8009302 <__gethex+0x426>
 8009334:	e7ee      	b.n	8009314 <__gethex+0x438>
 8009336:	bf00      	nop
 8009338:	08009bdf 	.word	0x08009bdf

0800933c <L_shift>:
 800933c:	f1c2 0208 	rsb	r2, r2, #8
 8009340:	0092      	lsls	r2, r2, #2
 8009342:	b570      	push	{r4, r5, r6, lr}
 8009344:	f1c2 0620 	rsb	r6, r2, #32
 8009348:	6843      	ldr	r3, [r0, #4]
 800934a:	6804      	ldr	r4, [r0, #0]
 800934c:	fa03 f506 	lsl.w	r5, r3, r6
 8009350:	432c      	orrs	r4, r5
 8009352:	40d3      	lsrs	r3, r2
 8009354:	6004      	str	r4, [r0, #0]
 8009356:	f840 3f04 	str.w	r3, [r0, #4]!
 800935a:	4288      	cmp	r0, r1
 800935c:	d3f4      	bcc.n	8009348 <L_shift+0xc>
 800935e:	bd70      	pop	{r4, r5, r6, pc}

08009360 <__match>:
 8009360:	b530      	push	{r4, r5, lr}
 8009362:	6803      	ldr	r3, [r0, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800936a:	b914      	cbnz	r4, 8009372 <__match+0x12>
 800936c:	6003      	str	r3, [r0, #0]
 800936e:	2001      	movs	r0, #1
 8009370:	bd30      	pop	{r4, r5, pc}
 8009372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009376:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800937a:	2d19      	cmp	r5, #25
 800937c:	bf98      	it	ls
 800937e:	3220      	addls	r2, #32
 8009380:	42a2      	cmp	r2, r4
 8009382:	d0f0      	beq.n	8009366 <__match+0x6>
 8009384:	2000      	movs	r0, #0
 8009386:	e7f3      	b.n	8009370 <__match+0x10>

08009388 <__hexnan>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	2500      	movs	r5, #0
 800938e:	680b      	ldr	r3, [r1, #0]
 8009390:	4682      	mov	sl, r0
 8009392:	115e      	asrs	r6, r3, #5
 8009394:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009398:	f013 031f 	ands.w	r3, r3, #31
 800939c:	bf18      	it	ne
 800939e:	3604      	addne	r6, #4
 80093a0:	1f37      	subs	r7, r6, #4
 80093a2:	4690      	mov	r8, r2
 80093a4:	46b9      	mov	r9, r7
 80093a6:	463c      	mov	r4, r7
 80093a8:	46ab      	mov	fp, r5
 80093aa:	b087      	sub	sp, #28
 80093ac:	6801      	ldr	r1, [r0, #0]
 80093ae:	9301      	str	r3, [sp, #4]
 80093b0:	f846 5c04 	str.w	r5, [r6, #-4]
 80093b4:	9502      	str	r5, [sp, #8]
 80093b6:	784a      	ldrb	r2, [r1, #1]
 80093b8:	1c4b      	adds	r3, r1, #1
 80093ba:	9303      	str	r3, [sp, #12]
 80093bc:	b342      	cbz	r2, 8009410 <__hexnan+0x88>
 80093be:	4610      	mov	r0, r2
 80093c0:	9105      	str	r1, [sp, #20]
 80093c2:	9204      	str	r2, [sp, #16]
 80093c4:	f7ff fd75 	bl	8008eb2 <__hexdig_fun>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d14f      	bne.n	800946c <__hexnan+0xe4>
 80093cc:	9a04      	ldr	r2, [sp, #16]
 80093ce:	9905      	ldr	r1, [sp, #20]
 80093d0:	2a20      	cmp	r2, #32
 80093d2:	d818      	bhi.n	8009406 <__hexnan+0x7e>
 80093d4:	9b02      	ldr	r3, [sp, #8]
 80093d6:	459b      	cmp	fp, r3
 80093d8:	dd13      	ble.n	8009402 <__hexnan+0x7a>
 80093da:	454c      	cmp	r4, r9
 80093dc:	d206      	bcs.n	80093ec <__hexnan+0x64>
 80093de:	2d07      	cmp	r5, #7
 80093e0:	dc04      	bgt.n	80093ec <__hexnan+0x64>
 80093e2:	462a      	mov	r2, r5
 80093e4:	4649      	mov	r1, r9
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7ff ffa8 	bl	800933c <L_shift>
 80093ec:	4544      	cmp	r4, r8
 80093ee:	d950      	bls.n	8009492 <__hexnan+0x10a>
 80093f0:	2300      	movs	r3, #0
 80093f2:	f1a4 0904 	sub.w	r9, r4, #4
 80093f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80093fa:	461d      	mov	r5, r3
 80093fc:	464c      	mov	r4, r9
 80093fe:	f8cd b008 	str.w	fp, [sp, #8]
 8009402:	9903      	ldr	r1, [sp, #12]
 8009404:	e7d7      	b.n	80093b6 <__hexnan+0x2e>
 8009406:	2a29      	cmp	r2, #41	; 0x29
 8009408:	d155      	bne.n	80094b6 <__hexnan+0x12e>
 800940a:	3102      	adds	r1, #2
 800940c:	f8ca 1000 	str.w	r1, [sl]
 8009410:	f1bb 0f00 	cmp.w	fp, #0
 8009414:	d04f      	beq.n	80094b6 <__hexnan+0x12e>
 8009416:	454c      	cmp	r4, r9
 8009418:	d206      	bcs.n	8009428 <__hexnan+0xa0>
 800941a:	2d07      	cmp	r5, #7
 800941c:	dc04      	bgt.n	8009428 <__hexnan+0xa0>
 800941e:	462a      	mov	r2, r5
 8009420:	4649      	mov	r1, r9
 8009422:	4620      	mov	r0, r4
 8009424:	f7ff ff8a 	bl	800933c <L_shift>
 8009428:	4544      	cmp	r4, r8
 800942a:	d934      	bls.n	8009496 <__hexnan+0x10e>
 800942c:	4623      	mov	r3, r4
 800942e:	f1a8 0204 	sub.w	r2, r8, #4
 8009432:	f853 1b04 	ldr.w	r1, [r3], #4
 8009436:	429f      	cmp	r7, r3
 8009438:	f842 1f04 	str.w	r1, [r2, #4]!
 800943c:	d2f9      	bcs.n	8009432 <__hexnan+0xaa>
 800943e:	1b3b      	subs	r3, r7, r4
 8009440:	f023 0303 	bic.w	r3, r3, #3
 8009444:	3304      	adds	r3, #4
 8009446:	3e03      	subs	r6, #3
 8009448:	3401      	adds	r4, #1
 800944a:	42a6      	cmp	r6, r4
 800944c:	bf38      	it	cc
 800944e:	2304      	movcc	r3, #4
 8009450:	2200      	movs	r2, #0
 8009452:	4443      	add	r3, r8
 8009454:	f843 2b04 	str.w	r2, [r3], #4
 8009458:	429f      	cmp	r7, r3
 800945a:	d2fb      	bcs.n	8009454 <__hexnan+0xcc>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	b91b      	cbnz	r3, 8009468 <__hexnan+0xe0>
 8009460:	4547      	cmp	r7, r8
 8009462:	d126      	bne.n	80094b2 <__hexnan+0x12a>
 8009464:	2301      	movs	r3, #1
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	2005      	movs	r0, #5
 800946a:	e025      	b.n	80094b8 <__hexnan+0x130>
 800946c:	3501      	adds	r5, #1
 800946e:	2d08      	cmp	r5, #8
 8009470:	f10b 0b01 	add.w	fp, fp, #1
 8009474:	dd06      	ble.n	8009484 <__hexnan+0xfc>
 8009476:	4544      	cmp	r4, r8
 8009478:	d9c3      	bls.n	8009402 <__hexnan+0x7a>
 800947a:	2300      	movs	r3, #0
 800947c:	2501      	movs	r5, #1
 800947e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009482:	3c04      	subs	r4, #4
 8009484:	6822      	ldr	r2, [r4, #0]
 8009486:	f000 000f 	and.w	r0, r0, #15
 800948a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	e7b7      	b.n	8009402 <__hexnan+0x7a>
 8009492:	2508      	movs	r5, #8
 8009494:	e7b5      	b.n	8009402 <__hexnan+0x7a>
 8009496:	9b01      	ldr	r3, [sp, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0df      	beq.n	800945c <__hexnan+0xd4>
 800949c:	f04f 32ff 	mov.w	r2, #4294967295
 80094a0:	f1c3 0320 	rsb	r3, r3, #32
 80094a4:	40da      	lsrs	r2, r3
 80094a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094aa:	4013      	ands	r3, r2
 80094ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80094b0:	e7d4      	b.n	800945c <__hexnan+0xd4>
 80094b2:	3f04      	subs	r7, #4
 80094b4:	e7d2      	b.n	800945c <__hexnan+0xd4>
 80094b6:	2004      	movs	r0, #4
 80094b8:	b007      	add	sp, #28
 80094ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094be <__ascii_mbtowc>:
 80094be:	b082      	sub	sp, #8
 80094c0:	b901      	cbnz	r1, 80094c4 <__ascii_mbtowc+0x6>
 80094c2:	a901      	add	r1, sp, #4
 80094c4:	b142      	cbz	r2, 80094d8 <__ascii_mbtowc+0x1a>
 80094c6:	b14b      	cbz	r3, 80094dc <__ascii_mbtowc+0x1e>
 80094c8:	7813      	ldrb	r3, [r2, #0]
 80094ca:	600b      	str	r3, [r1, #0]
 80094cc:	7812      	ldrb	r2, [r2, #0]
 80094ce:	1e10      	subs	r0, r2, #0
 80094d0:	bf18      	it	ne
 80094d2:	2001      	movne	r0, #1
 80094d4:	b002      	add	sp, #8
 80094d6:	4770      	bx	lr
 80094d8:	4610      	mov	r0, r2
 80094da:	e7fb      	b.n	80094d4 <__ascii_mbtowc+0x16>
 80094dc:	f06f 0001 	mvn.w	r0, #1
 80094e0:	e7f8      	b.n	80094d4 <__ascii_mbtowc+0x16>

080094e2 <_realloc_r>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	4680      	mov	r8, r0
 80094e8:	4614      	mov	r4, r2
 80094ea:	460e      	mov	r6, r1
 80094ec:	b921      	cbnz	r1, 80094f8 <_realloc_r+0x16>
 80094ee:	4611      	mov	r1, r2
 80094f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f4:	f7fd be40 	b.w	8007178 <_malloc_r>
 80094f8:	b92a      	cbnz	r2, 8009506 <_realloc_r+0x24>
 80094fa:	f7fd fdcd 	bl	8007098 <_free_r>
 80094fe:	4625      	mov	r5, r4
 8009500:	4628      	mov	r0, r5
 8009502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009506:	f000 f842 	bl	800958e <_malloc_usable_size_r>
 800950a:	4284      	cmp	r4, r0
 800950c:	4607      	mov	r7, r0
 800950e:	d802      	bhi.n	8009516 <_realloc_r+0x34>
 8009510:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009514:	d812      	bhi.n	800953c <_realloc_r+0x5a>
 8009516:	4621      	mov	r1, r4
 8009518:	4640      	mov	r0, r8
 800951a:	f7fd fe2d 	bl	8007178 <_malloc_r>
 800951e:	4605      	mov	r5, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	d0ed      	beq.n	8009500 <_realloc_r+0x1e>
 8009524:	42bc      	cmp	r4, r7
 8009526:	4622      	mov	r2, r4
 8009528:	4631      	mov	r1, r6
 800952a:	bf28      	it	cs
 800952c:	463a      	movcs	r2, r7
 800952e:	f7ff fc27 	bl	8008d80 <memcpy>
 8009532:	4631      	mov	r1, r6
 8009534:	4640      	mov	r0, r8
 8009536:	f7fd fdaf 	bl	8007098 <_free_r>
 800953a:	e7e1      	b.n	8009500 <_realloc_r+0x1e>
 800953c:	4635      	mov	r5, r6
 800953e:	e7df      	b.n	8009500 <_realloc_r+0x1e>

08009540 <__ascii_wctomb>:
 8009540:	4603      	mov	r3, r0
 8009542:	4608      	mov	r0, r1
 8009544:	b141      	cbz	r1, 8009558 <__ascii_wctomb+0x18>
 8009546:	2aff      	cmp	r2, #255	; 0xff
 8009548:	d904      	bls.n	8009554 <__ascii_wctomb+0x14>
 800954a:	228a      	movs	r2, #138	; 0x8a
 800954c:	f04f 30ff 	mov.w	r0, #4294967295
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	4770      	bx	lr
 8009554:	2001      	movs	r0, #1
 8009556:	700a      	strb	r2, [r1, #0]
 8009558:	4770      	bx	lr
	...

0800955c <fiprintf>:
 800955c:	b40e      	push	{r1, r2, r3}
 800955e:	b503      	push	{r0, r1, lr}
 8009560:	4601      	mov	r1, r0
 8009562:	ab03      	add	r3, sp, #12
 8009564:	4805      	ldr	r0, [pc, #20]	; (800957c <fiprintf+0x20>)
 8009566:	f853 2b04 	ldr.w	r2, [r3], #4
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	f000 f83d 	bl	80095ec <_vfiprintf_r>
 8009572:	b002      	add	sp, #8
 8009574:	f85d eb04 	ldr.w	lr, [sp], #4
 8009578:	b003      	add	sp, #12
 800957a:	4770      	bx	lr
 800957c:	20000068 	.word	0x20000068

08009580 <abort>:
 8009580:	2006      	movs	r0, #6
 8009582:	b508      	push	{r3, lr}
 8009584:	f000 fa0a 	bl	800999c <raise>
 8009588:	2001      	movs	r0, #1
 800958a:	f7f8 f84e 	bl	800162a <_exit>

0800958e <_malloc_usable_size_r>:
 800958e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009592:	1f18      	subs	r0, r3, #4
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfbc      	itt	lt
 8009598:	580b      	ldrlt	r3, [r1, r0]
 800959a:	18c0      	addlt	r0, r0, r3
 800959c:	4770      	bx	lr

0800959e <__sfputc_r>:
 800959e:	6893      	ldr	r3, [r2, #8]
 80095a0:	b410      	push	{r4}
 80095a2:	3b01      	subs	r3, #1
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	6093      	str	r3, [r2, #8]
 80095a8:	da07      	bge.n	80095ba <__sfputc_r+0x1c>
 80095aa:	6994      	ldr	r4, [r2, #24]
 80095ac:	42a3      	cmp	r3, r4
 80095ae:	db01      	blt.n	80095b4 <__sfputc_r+0x16>
 80095b0:	290a      	cmp	r1, #10
 80095b2:	d102      	bne.n	80095ba <__sfputc_r+0x1c>
 80095b4:	bc10      	pop	{r4}
 80095b6:	f000 b933 	b.w	8009820 <__swbuf_r>
 80095ba:	6813      	ldr	r3, [r2, #0]
 80095bc:	1c58      	adds	r0, r3, #1
 80095be:	6010      	str	r0, [r2, #0]
 80095c0:	7019      	strb	r1, [r3, #0]
 80095c2:	4608      	mov	r0, r1
 80095c4:	bc10      	pop	{r4}
 80095c6:	4770      	bx	lr

080095c8 <__sfputs_r>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	4606      	mov	r6, r0
 80095cc:	460f      	mov	r7, r1
 80095ce:	4614      	mov	r4, r2
 80095d0:	18d5      	adds	r5, r2, r3
 80095d2:	42ac      	cmp	r4, r5
 80095d4:	d101      	bne.n	80095da <__sfputs_r+0x12>
 80095d6:	2000      	movs	r0, #0
 80095d8:	e007      	b.n	80095ea <__sfputs_r+0x22>
 80095da:	463a      	mov	r2, r7
 80095dc:	4630      	mov	r0, r6
 80095de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e2:	f7ff ffdc 	bl	800959e <__sfputc_r>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d1f3      	bne.n	80095d2 <__sfputs_r+0xa>
 80095ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095ec <_vfiprintf_r>:
 80095ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	460d      	mov	r5, r1
 80095f2:	4614      	mov	r4, r2
 80095f4:	4698      	mov	r8, r3
 80095f6:	4606      	mov	r6, r0
 80095f8:	b09d      	sub	sp, #116	; 0x74
 80095fa:	b118      	cbz	r0, 8009604 <_vfiprintf_r+0x18>
 80095fc:	6a03      	ldr	r3, [r0, #32]
 80095fe:	b90b      	cbnz	r3, 8009604 <_vfiprintf_r+0x18>
 8009600:	f7fc fd92 	bl	8006128 <__sinit>
 8009604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009606:	07d9      	lsls	r1, r3, #31
 8009608:	d405      	bmi.n	8009616 <_vfiprintf_r+0x2a>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	059a      	lsls	r2, r3, #22
 800960e:	d402      	bmi.n	8009616 <_vfiprintf_r+0x2a>
 8009610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009612:	f7fc febf 	bl	8006394 <__retarget_lock_acquire_recursive>
 8009616:	89ab      	ldrh	r3, [r5, #12]
 8009618:	071b      	lsls	r3, r3, #28
 800961a:	d501      	bpl.n	8009620 <_vfiprintf_r+0x34>
 800961c:	692b      	ldr	r3, [r5, #16]
 800961e:	b99b      	cbnz	r3, 8009648 <_vfiprintf_r+0x5c>
 8009620:	4629      	mov	r1, r5
 8009622:	4630      	mov	r0, r6
 8009624:	f000 f93a 	bl	800989c <__swsetup_r>
 8009628:	b170      	cbz	r0, 8009648 <_vfiprintf_r+0x5c>
 800962a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800962c:	07dc      	lsls	r4, r3, #31
 800962e:	d504      	bpl.n	800963a <_vfiprintf_r+0x4e>
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	b01d      	add	sp, #116	; 0x74
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	89ab      	ldrh	r3, [r5, #12]
 800963c:	0598      	lsls	r0, r3, #22
 800963e:	d4f7      	bmi.n	8009630 <_vfiprintf_r+0x44>
 8009640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009642:	f7fc fea8 	bl	8006396 <__retarget_lock_release_recursive>
 8009646:	e7f3      	b.n	8009630 <_vfiprintf_r+0x44>
 8009648:	2300      	movs	r3, #0
 800964a:	9309      	str	r3, [sp, #36]	; 0x24
 800964c:	2320      	movs	r3, #32
 800964e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009652:	2330      	movs	r3, #48	; 0x30
 8009654:	f04f 0901 	mov.w	r9, #1
 8009658:	f8cd 800c 	str.w	r8, [sp, #12]
 800965c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800980c <_vfiprintf_r+0x220>
 8009660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009664:	4623      	mov	r3, r4
 8009666:	469a      	mov	sl, r3
 8009668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800966c:	b10a      	cbz	r2, 8009672 <_vfiprintf_r+0x86>
 800966e:	2a25      	cmp	r2, #37	; 0x25
 8009670:	d1f9      	bne.n	8009666 <_vfiprintf_r+0x7a>
 8009672:	ebba 0b04 	subs.w	fp, sl, r4
 8009676:	d00b      	beq.n	8009690 <_vfiprintf_r+0xa4>
 8009678:	465b      	mov	r3, fp
 800967a:	4622      	mov	r2, r4
 800967c:	4629      	mov	r1, r5
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff ffa2 	bl	80095c8 <__sfputs_r>
 8009684:	3001      	adds	r0, #1
 8009686:	f000 80a9 	beq.w	80097dc <_vfiprintf_r+0x1f0>
 800968a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968c:	445a      	add	r2, fp
 800968e:	9209      	str	r2, [sp, #36]	; 0x24
 8009690:	f89a 3000 	ldrb.w	r3, [sl]
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80a1 	beq.w	80097dc <_vfiprintf_r+0x1f0>
 800969a:	2300      	movs	r3, #0
 800969c:	f04f 32ff 	mov.w	r2, #4294967295
 80096a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a4:	f10a 0a01 	add.w	sl, sl, #1
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	9307      	str	r3, [sp, #28]
 80096ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096b0:	931a      	str	r3, [sp, #104]	; 0x68
 80096b2:	4654      	mov	r4, sl
 80096b4:	2205      	movs	r2, #5
 80096b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ba:	4854      	ldr	r0, [pc, #336]	; (800980c <_vfiprintf_r+0x220>)
 80096bc:	f7fc fe6c 	bl	8006398 <memchr>
 80096c0:	9a04      	ldr	r2, [sp, #16]
 80096c2:	b9d8      	cbnz	r0, 80096fc <_vfiprintf_r+0x110>
 80096c4:	06d1      	lsls	r1, r2, #27
 80096c6:	bf44      	itt	mi
 80096c8:	2320      	movmi	r3, #32
 80096ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ce:	0713      	lsls	r3, r2, #28
 80096d0:	bf44      	itt	mi
 80096d2:	232b      	movmi	r3, #43	; 0x2b
 80096d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d8:	f89a 3000 	ldrb.w	r3, [sl]
 80096dc:	2b2a      	cmp	r3, #42	; 0x2a
 80096de:	d015      	beq.n	800970c <_vfiprintf_r+0x120>
 80096e0:	4654      	mov	r4, sl
 80096e2:	2000      	movs	r0, #0
 80096e4:	f04f 0c0a 	mov.w	ip, #10
 80096e8:	9a07      	ldr	r2, [sp, #28]
 80096ea:	4621      	mov	r1, r4
 80096ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096f0:	3b30      	subs	r3, #48	; 0x30
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	d94d      	bls.n	8009792 <_vfiprintf_r+0x1a6>
 80096f6:	b1b0      	cbz	r0, 8009726 <_vfiprintf_r+0x13a>
 80096f8:	9207      	str	r2, [sp, #28]
 80096fa:	e014      	b.n	8009726 <_vfiprintf_r+0x13a>
 80096fc:	eba0 0308 	sub.w	r3, r0, r8
 8009700:	fa09 f303 	lsl.w	r3, r9, r3
 8009704:	4313      	orrs	r3, r2
 8009706:	46a2      	mov	sl, r4
 8009708:	9304      	str	r3, [sp, #16]
 800970a:	e7d2      	b.n	80096b2 <_vfiprintf_r+0xc6>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	1d19      	adds	r1, r3, #4
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	9103      	str	r1, [sp, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	bfbb      	ittet	lt
 8009718:	425b      	neglt	r3, r3
 800971a:	f042 0202 	orrlt.w	r2, r2, #2
 800971e:	9307      	strge	r3, [sp, #28]
 8009720:	9307      	strlt	r3, [sp, #28]
 8009722:	bfb8      	it	lt
 8009724:	9204      	strlt	r2, [sp, #16]
 8009726:	7823      	ldrb	r3, [r4, #0]
 8009728:	2b2e      	cmp	r3, #46	; 0x2e
 800972a:	d10c      	bne.n	8009746 <_vfiprintf_r+0x15a>
 800972c:	7863      	ldrb	r3, [r4, #1]
 800972e:	2b2a      	cmp	r3, #42	; 0x2a
 8009730:	d134      	bne.n	800979c <_vfiprintf_r+0x1b0>
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	3402      	adds	r4, #2
 8009736:	1d1a      	adds	r2, r3, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	9203      	str	r2, [sp, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	bfb8      	it	lt
 8009740:	f04f 33ff 	movlt.w	r3, #4294967295
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009810 <_vfiprintf_r+0x224>
 800974a:	2203      	movs	r2, #3
 800974c:	4650      	mov	r0, sl
 800974e:	7821      	ldrb	r1, [r4, #0]
 8009750:	f7fc fe22 	bl	8006398 <memchr>
 8009754:	b138      	cbz	r0, 8009766 <_vfiprintf_r+0x17a>
 8009756:	2240      	movs	r2, #64	; 0x40
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	eba0 000a 	sub.w	r0, r0, sl
 800975e:	4082      	lsls	r2, r0
 8009760:	4313      	orrs	r3, r2
 8009762:	3401      	adds	r4, #1
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976a:	2206      	movs	r2, #6
 800976c:	4829      	ldr	r0, [pc, #164]	; (8009814 <_vfiprintf_r+0x228>)
 800976e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009772:	f7fc fe11 	bl	8006398 <memchr>
 8009776:	2800      	cmp	r0, #0
 8009778:	d03f      	beq.n	80097fa <_vfiprintf_r+0x20e>
 800977a:	4b27      	ldr	r3, [pc, #156]	; (8009818 <_vfiprintf_r+0x22c>)
 800977c:	bb1b      	cbnz	r3, 80097c6 <_vfiprintf_r+0x1da>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	3307      	adds	r3, #7
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	3308      	adds	r3, #8
 8009788:	9303      	str	r3, [sp, #12]
 800978a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978c:	443b      	add	r3, r7
 800978e:	9309      	str	r3, [sp, #36]	; 0x24
 8009790:	e768      	b.n	8009664 <_vfiprintf_r+0x78>
 8009792:	460c      	mov	r4, r1
 8009794:	2001      	movs	r0, #1
 8009796:	fb0c 3202 	mla	r2, ip, r2, r3
 800979a:	e7a6      	b.n	80096ea <_vfiprintf_r+0xfe>
 800979c:	2300      	movs	r3, #0
 800979e:	f04f 0c0a 	mov.w	ip, #10
 80097a2:	4619      	mov	r1, r3
 80097a4:	3401      	adds	r4, #1
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	4620      	mov	r0, r4
 80097aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ae:	3a30      	subs	r2, #48	; 0x30
 80097b0:	2a09      	cmp	r2, #9
 80097b2:	d903      	bls.n	80097bc <_vfiprintf_r+0x1d0>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0c6      	beq.n	8009746 <_vfiprintf_r+0x15a>
 80097b8:	9105      	str	r1, [sp, #20]
 80097ba:	e7c4      	b.n	8009746 <_vfiprintf_r+0x15a>
 80097bc:	4604      	mov	r4, r0
 80097be:	2301      	movs	r3, #1
 80097c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c4:	e7f0      	b.n	80097a8 <_vfiprintf_r+0x1bc>
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4630      	mov	r0, r6
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <_vfiprintf_r+0x230>)
 80097d0:	a904      	add	r1, sp, #16
 80097d2:	f7fb fe5f 	bl	8005494 <_printf_float>
 80097d6:	4607      	mov	r7, r0
 80097d8:	1c78      	adds	r0, r7, #1
 80097da:	d1d6      	bne.n	800978a <_vfiprintf_r+0x19e>
 80097dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097de:	07d9      	lsls	r1, r3, #31
 80097e0:	d405      	bmi.n	80097ee <_vfiprintf_r+0x202>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	059a      	lsls	r2, r3, #22
 80097e6:	d402      	bmi.n	80097ee <_vfiprintf_r+0x202>
 80097e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ea:	f7fc fdd4 	bl	8006396 <__retarget_lock_release_recursive>
 80097ee:	89ab      	ldrh	r3, [r5, #12]
 80097f0:	065b      	lsls	r3, r3, #25
 80097f2:	f53f af1d 	bmi.w	8009630 <_vfiprintf_r+0x44>
 80097f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f8:	e71c      	b.n	8009634 <_vfiprintf_r+0x48>
 80097fa:	ab03      	add	r3, sp, #12
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	462a      	mov	r2, r5
 8009800:	4630      	mov	r0, r6
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <_vfiprintf_r+0x230>)
 8009804:	a904      	add	r1, sp, #16
 8009806:	f7fc f8e5 	bl	80059d4 <_printf_i>
 800980a:	e7e4      	b.n	80097d6 <_vfiprintf_r+0x1ea>
 800980c:	08009ea1 	.word	0x08009ea1
 8009810:	08009ea7 	.word	0x08009ea7
 8009814:	08009eab 	.word	0x08009eab
 8009818:	08005495 	.word	0x08005495
 800981c:	080095c9 	.word	0x080095c9

08009820 <__swbuf_r>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	460e      	mov	r6, r1
 8009824:	4614      	mov	r4, r2
 8009826:	4605      	mov	r5, r0
 8009828:	b118      	cbz	r0, 8009832 <__swbuf_r+0x12>
 800982a:	6a03      	ldr	r3, [r0, #32]
 800982c:	b90b      	cbnz	r3, 8009832 <__swbuf_r+0x12>
 800982e:	f7fc fc7b 	bl	8006128 <__sinit>
 8009832:	69a3      	ldr	r3, [r4, #24]
 8009834:	60a3      	str	r3, [r4, #8]
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	071a      	lsls	r2, r3, #28
 800983a:	d525      	bpl.n	8009888 <__swbuf_r+0x68>
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	b31b      	cbz	r3, 8009888 <__swbuf_r+0x68>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	6922      	ldr	r2, [r4, #16]
 8009844:	b2f6      	uxtb	r6, r6
 8009846:	1a98      	subs	r0, r3, r2
 8009848:	6963      	ldr	r3, [r4, #20]
 800984a:	4637      	mov	r7, r6
 800984c:	4283      	cmp	r3, r0
 800984e:	dc04      	bgt.n	800985a <__swbuf_r+0x3a>
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f7ff fa30 	bl	8008cb8 <_fflush_r>
 8009858:	b9e0      	cbnz	r0, 8009894 <__swbuf_r+0x74>
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	3b01      	subs	r3, #1
 800985e:	60a3      	str	r3, [r4, #8]
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	6022      	str	r2, [r4, #0]
 8009866:	701e      	strb	r6, [r3, #0]
 8009868:	6962      	ldr	r2, [r4, #20]
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	429a      	cmp	r2, r3
 800986e:	d004      	beq.n	800987a <__swbuf_r+0x5a>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	07db      	lsls	r3, r3, #31
 8009874:	d506      	bpl.n	8009884 <__swbuf_r+0x64>
 8009876:	2e0a      	cmp	r6, #10
 8009878:	d104      	bne.n	8009884 <__swbuf_r+0x64>
 800987a:	4621      	mov	r1, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f7ff fa1b 	bl	8008cb8 <_fflush_r>
 8009882:	b938      	cbnz	r0, 8009894 <__swbuf_r+0x74>
 8009884:	4638      	mov	r0, r7
 8009886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009888:	4621      	mov	r1, r4
 800988a:	4628      	mov	r0, r5
 800988c:	f000 f806 	bl	800989c <__swsetup_r>
 8009890:	2800      	cmp	r0, #0
 8009892:	d0d5      	beq.n	8009840 <__swbuf_r+0x20>
 8009894:	f04f 37ff 	mov.w	r7, #4294967295
 8009898:	e7f4      	b.n	8009884 <__swbuf_r+0x64>
	...

0800989c <__swsetup_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4b2a      	ldr	r3, [pc, #168]	; (8009948 <__swsetup_r+0xac>)
 80098a0:	4605      	mov	r5, r0
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	460c      	mov	r4, r1
 80098a6:	b118      	cbz	r0, 80098b0 <__swsetup_r+0x14>
 80098a8:	6a03      	ldr	r3, [r0, #32]
 80098aa:	b90b      	cbnz	r3, 80098b0 <__swsetup_r+0x14>
 80098ac:	f7fc fc3c 	bl	8006128 <__sinit>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b6:	0718      	lsls	r0, r3, #28
 80098b8:	d422      	bmi.n	8009900 <__swsetup_r+0x64>
 80098ba:	06d9      	lsls	r1, r3, #27
 80098bc:	d407      	bmi.n	80098ce <__swsetup_r+0x32>
 80098be:	2309      	movs	r3, #9
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	e034      	b.n	8009938 <__swsetup_r+0x9c>
 80098ce:	0758      	lsls	r0, r3, #29
 80098d0:	d512      	bpl.n	80098f8 <__swsetup_r+0x5c>
 80098d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098d4:	b141      	cbz	r1, 80098e8 <__swsetup_r+0x4c>
 80098d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098da:	4299      	cmp	r1, r3
 80098dc:	d002      	beq.n	80098e4 <__swsetup_r+0x48>
 80098de:	4628      	mov	r0, r5
 80098e0:	f7fd fbda 	bl	8007098 <_free_r>
 80098e4:	2300      	movs	r3, #0
 80098e6:	6363      	str	r3, [r4, #52]	; 0x34
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	2300      	movs	r3, #0
 80098f2:	6063      	str	r3, [r4, #4]
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	6023      	str	r3, [r4, #0]
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	f043 0308 	orr.w	r3, r3, #8
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	b94b      	cbnz	r3, 8009918 <__swsetup_r+0x7c>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800990a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800990e:	d003      	beq.n	8009918 <__swsetup_r+0x7c>
 8009910:	4621      	mov	r1, r4
 8009912:	4628      	mov	r0, r5
 8009914:	f000 f883 	bl	8009a1e <__smakebuf_r>
 8009918:	89a0      	ldrh	r0, [r4, #12]
 800991a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800991e:	f010 0301 	ands.w	r3, r0, #1
 8009922:	d00a      	beq.n	800993a <__swsetup_r+0x9e>
 8009924:	2300      	movs	r3, #0
 8009926:	60a3      	str	r3, [r4, #8]
 8009928:	6963      	ldr	r3, [r4, #20]
 800992a:	425b      	negs	r3, r3
 800992c:	61a3      	str	r3, [r4, #24]
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	b943      	cbnz	r3, 8009944 <__swsetup_r+0xa8>
 8009932:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009936:	d1c4      	bne.n	80098c2 <__swsetup_r+0x26>
 8009938:	bd38      	pop	{r3, r4, r5, pc}
 800993a:	0781      	lsls	r1, r0, #30
 800993c:	bf58      	it	pl
 800993e:	6963      	ldrpl	r3, [r4, #20]
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	e7f4      	b.n	800992e <__swsetup_r+0x92>
 8009944:	2000      	movs	r0, #0
 8009946:	e7f7      	b.n	8009938 <__swsetup_r+0x9c>
 8009948:	20000068 	.word	0x20000068

0800994c <_raise_r>:
 800994c:	291f      	cmp	r1, #31
 800994e:	b538      	push	{r3, r4, r5, lr}
 8009950:	4604      	mov	r4, r0
 8009952:	460d      	mov	r5, r1
 8009954:	d904      	bls.n	8009960 <_raise_r+0x14>
 8009956:	2316      	movs	r3, #22
 8009958:	6003      	str	r3, [r0, #0]
 800995a:	f04f 30ff 	mov.w	r0, #4294967295
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009962:	b112      	cbz	r2, 800996a <_raise_r+0x1e>
 8009964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009968:	b94b      	cbnz	r3, 800997e <_raise_r+0x32>
 800996a:	4620      	mov	r0, r4
 800996c:	f000 f830 	bl	80099d0 <_getpid_r>
 8009970:	462a      	mov	r2, r5
 8009972:	4601      	mov	r1, r0
 8009974:	4620      	mov	r0, r4
 8009976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800997a:	f000 b817 	b.w	80099ac <_kill_r>
 800997e:	2b01      	cmp	r3, #1
 8009980:	d00a      	beq.n	8009998 <_raise_r+0x4c>
 8009982:	1c59      	adds	r1, r3, #1
 8009984:	d103      	bne.n	800998e <_raise_r+0x42>
 8009986:	2316      	movs	r3, #22
 8009988:	6003      	str	r3, [r0, #0]
 800998a:	2001      	movs	r0, #1
 800998c:	e7e7      	b.n	800995e <_raise_r+0x12>
 800998e:	2400      	movs	r4, #0
 8009990:	4628      	mov	r0, r5
 8009992:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009996:	4798      	blx	r3
 8009998:	2000      	movs	r0, #0
 800999a:	e7e0      	b.n	800995e <_raise_r+0x12>

0800999c <raise>:
 800999c:	4b02      	ldr	r3, [pc, #8]	; (80099a8 <raise+0xc>)
 800999e:	4601      	mov	r1, r0
 80099a0:	6818      	ldr	r0, [r3, #0]
 80099a2:	f7ff bfd3 	b.w	800994c <_raise_r>
 80099a6:	bf00      	nop
 80099a8:	20000068 	.word	0x20000068

080099ac <_kill_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	2300      	movs	r3, #0
 80099b0:	4d06      	ldr	r5, [pc, #24]	; (80099cc <_kill_r+0x20>)
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	4611      	mov	r1, r2
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	f7f7 fe26 	bl	800160a <_kill>
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	d102      	bne.n	80099c8 <_kill_r+0x1c>
 80099c2:	682b      	ldr	r3, [r5, #0]
 80099c4:	b103      	cbz	r3, 80099c8 <_kill_r+0x1c>
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	bd38      	pop	{r3, r4, r5, pc}
 80099ca:	bf00      	nop
 80099cc:	200004f8 	.word	0x200004f8

080099d0 <_getpid_r>:
 80099d0:	f7f7 be14 	b.w	80015fc <_getpid>

080099d4 <__swhatbuf_r>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	460c      	mov	r4, r1
 80099d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099dc:	4615      	mov	r5, r2
 80099de:	2900      	cmp	r1, #0
 80099e0:	461e      	mov	r6, r3
 80099e2:	b096      	sub	sp, #88	; 0x58
 80099e4:	da0c      	bge.n	8009a00 <__swhatbuf_r+0x2c>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	2100      	movs	r1, #0
 80099ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80099ee:	bf0c      	ite	eq
 80099f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80099f4:	2340      	movne	r3, #64	; 0x40
 80099f6:	2000      	movs	r0, #0
 80099f8:	6031      	str	r1, [r6, #0]
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	b016      	add	sp, #88	; 0x58
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	466a      	mov	r2, sp
 8009a02:	f000 f849 	bl	8009a98 <_fstat_r>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	dbed      	blt.n	80099e6 <__swhatbuf_r+0x12>
 8009a0a:	9901      	ldr	r1, [sp, #4]
 8009a0c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009a10:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009a14:	4259      	negs	r1, r3
 8009a16:	4159      	adcs	r1, r3
 8009a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a1c:	e7eb      	b.n	80099f6 <__swhatbuf_r+0x22>

08009a1e <__smakebuf_r>:
 8009a1e:	898b      	ldrh	r3, [r1, #12]
 8009a20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a22:	079d      	lsls	r5, r3, #30
 8009a24:	4606      	mov	r6, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	d507      	bpl.n	8009a3a <__smakebuf_r+0x1c>
 8009a2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	2301      	movs	r3, #1
 8009a34:	6163      	str	r3, [r4, #20]
 8009a36:	b002      	add	sp, #8
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	466a      	mov	r2, sp
 8009a3c:	ab01      	add	r3, sp, #4
 8009a3e:	f7ff ffc9 	bl	80099d4 <__swhatbuf_r>
 8009a42:	9900      	ldr	r1, [sp, #0]
 8009a44:	4605      	mov	r5, r0
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7fd fb96 	bl	8007178 <_malloc_r>
 8009a4c:	b948      	cbnz	r0, 8009a62 <__smakebuf_r+0x44>
 8009a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a52:	059a      	lsls	r2, r3, #22
 8009a54:	d4ef      	bmi.n	8009a36 <__smakebuf_r+0x18>
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	f043 0302 	orr.w	r3, r3, #2
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e7e3      	b.n	8009a2a <__smakebuf_r+0xc>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	6020      	str	r0, [r4, #0]
 8009a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	9b00      	ldr	r3, [sp, #0]
 8009a6e:	6120      	str	r0, [r4, #16]
 8009a70:	6163      	str	r3, [r4, #20]
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	b15b      	cbz	r3, 8009a8e <__smakebuf_r+0x70>
 8009a76:	4630      	mov	r0, r6
 8009a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a7c:	f000 f81e 	bl	8009abc <_isatty_r>
 8009a80:	b128      	cbz	r0, 8009a8e <__smakebuf_r+0x70>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f023 0303 	bic.w	r3, r3, #3
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	431d      	orrs	r5, r3
 8009a92:	81a5      	strh	r5, [r4, #12]
 8009a94:	e7cf      	b.n	8009a36 <__smakebuf_r+0x18>
	...

08009a98 <_fstat_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	4d06      	ldr	r5, [pc, #24]	; (8009ab8 <_fstat_r+0x20>)
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	602b      	str	r3, [r5, #0]
 8009aa6:	f7f7 fe0e 	bl	80016c6 <_fstat>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d102      	bne.n	8009ab4 <_fstat_r+0x1c>
 8009aae:	682b      	ldr	r3, [r5, #0]
 8009ab0:	b103      	cbz	r3, 8009ab4 <_fstat_r+0x1c>
 8009ab2:	6023      	str	r3, [r4, #0]
 8009ab4:	bd38      	pop	{r3, r4, r5, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200004f8 	.word	0x200004f8

08009abc <_isatty_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4d05      	ldr	r5, [pc, #20]	; (8009ad8 <_isatty_r+0x1c>)
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	f7f7 fe0c 	bl	80016e4 <_isatty>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_isatty_r+0x1a>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_isatty_r+0x1a>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	200004f8 	.word	0x200004f8

08009adc <_init>:
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	bf00      	nop
 8009ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae2:	bc08      	pop	{r3}
 8009ae4:	469e      	mov	lr, r3
 8009ae6:	4770      	bx	lr

08009ae8 <_fini>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	bf00      	nop
 8009aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aee:	bc08      	pop	{r3}
 8009af0:	469e      	mov	lr, r3
 8009af2:	4770      	bx	lr
